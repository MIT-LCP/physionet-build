# Generated by Django 2.1.7 on 2019-07-16 18:37

from django.db import migrations, models, transaction
import django.db.models.deletion
import project.models
from django.conf import settings
from django.core.management import call_command
from project.models import ProjectSection, SectionContent, CoreProject
from itertools import chain
from django.contrib.contenttypes.models import ContentType
from django.core.exceptions import ObjectDoesNotExist
from html import unescape
from django.utils.html import strip_tags
import os


LABELS = [
    # 0: Database
    {'background': 'Background',
    'methods': 'Methods',
    'content_description': 'Data Description',
    'usage_notes': 'Usage Notes',
    'release_notes': 'Release Notes',
    'acknowledgements': 'Acknowledgements',
    'conflicts_of_interest': 'Conflicts of Interest'},
    # 1: Software
    {'background': 'Background',
    'content_description': 'Software Description',
    'methods': 'Technical Implementation',
    'usage_notes': 'Usage Notes',
    'release_notes': 'Release Notes',
    'installation': 'Installation and Requirements',
    'acknowledgements': 'Acknowledgements',
    'conflicts_of_interest': 'Conflicts of Interest'},
    # 2: Challenge
    {'background': 'Objective',
    'methods': 'Participation',
    'content_description': 'Data Description',
    'usage_notes': 'Evaluation',
    'release_notes': 'Release Notes',
    'acknowledgements': 'Acknowledgements',
    'conflicts_of_interest': 'Conflicts of Interest'},
    # 3: Model
    {'background': 'Background',
    'content_description': 'Model Description',
    'methods': 'Technical Implementation',
    'usage_notes': 'Usage Notes',
    'release_notes': 'Release Notes',
    'installation': 'Installation and Requirements',
    'acknowledgements': 'Acknowledgements',
    'conflicts_of_interest': 'Conflicts of Interest'},
]


def load_fixture(apps, schema_editor):
    project_types_fixtures = os.path.join(settings.BASE_DIR, 'project',
                                          'fixtures', 'project-sections.json')
    call_command('loaddata', project_types_fixtures) 


def unload_fixture(apps, schema_editor):
    model = apps.get_model("project", "ProjectSection")
    model.objects.all().delete()


def migrate_content(apps, schema_editor):
    # Gets all projects currently in the database
    data = chain(
        apps.get_model("project", "ActiveProject").objects.all(),
        apps.get_model("project", "PublishedProject").objects.all(),
        apps.get_model("project", "ArchivedProject").objects.all()
    )

    for d in data:
        # Separates labels for one resource type
        labels = LABELS[d.resource_type.id]

        # Persists new SectionContent entity based on content from the previous structure
        for l, n in labels.items():
            section = ProjectSection.objects.get(name=n, resource_type=d.resource_type.id)
            text = unescape(strip_tags(d._meta.get_field(l).value_from_object(d)))
            if text and not text.isspace():
                SectionContent.objects.create(project=d, project_section=section,
                                            section_content=d._meta.get_field(l).value_from_object(d))


def undo_migrate_content(apps, schema_editor):
    sections = apps.get_model("project", "ProjectSection")
    content = apps.get_model("project", "SectionContent")
    data = chain(
        apps.get_model("project", "ActiveProject").objects.all(),
        apps.get_model("project", "PublishedProject").objects.all(),
        apps.get_model("project", "ArchivedProject").objects.all()
    )

    for d in data:
        # Separates labels for one resource type
        labels = LABELS[d.resource_type.id]

        # Persists new SectionContent entity based on content from the previous structure
        for l, n in labels.items():
            try:
                section = sections.objects.get(name=n, resource_type=d.resource_type.id)
                content_type = ContentType.objects.get_for_model(d).id
                value = content.objects.get(object_id=d.id, content_type=content_type, project_section=section).section_content
                with transaction.atomic():
                    setattr(d, l, value)
                    d.save()
            except ObjectDoesNotExist:
                pass


class Migration(migrations.Migration):

    dependencies = [
        ('project', '0033_auto_20191029_1506'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProjectSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.TextField()),
                ('default_order', models.PositiveSmallIntegerField()),
                ('required', models.BooleanField()),
                ('resource_type', models.ForeignKey(db_column='resource_type', on_delete=django.db.models.deletion.PROTECT, related_name='projectsections', to='project.ProjectType')),
            ],
        ),
        migrations.RunPython(load_fixture, reverse_code=unload_fixture),
        migrations.CreateModel(
            name='SectionContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_content', project.models.SafeHTMLField(blank=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='contenttypes.ContentType')),
                ('object_id', models.PositiveIntegerField()),
                ('project_section', models.ForeignKey(db_column='project_section', on_delete=django.db.models.deletion.PROTECT, related_name='sectioncontents', to='project.ProjectSection')),
            ],
        ),
        migrations.RunPython(migrate_content, reverse_code=undo_migrate_content),
        migrations.RemoveField(
            model_name='activeproject',
            name='release_notes',
        ),
        migrations.RemoveField(
            model_name='activeproject',
            name='acknowledgements',
        ),
        migrations.RemoveField(
            model_name='activeproject',
            name='background',
        ),
        migrations.RemoveField(
            model_name='activeproject',
            name='conflicts_of_interest',
        ),
        migrations.RemoveField(
            model_name='activeproject',
            name='content_description',
        ),
        migrations.RemoveField(
            model_name='activeproject',
            name='installation',
        ),
        migrations.RemoveField(
            model_name='activeproject',
            name='methods',
        ),
        migrations.RemoveField(
            model_name='activeproject',
            name='usage_notes',
        ),
        migrations.RemoveField(
            model_name='archivedproject',
            name='release_notes',
        ),
        migrations.RemoveField(
            model_name='archivedproject',
            name='acknowledgements',
        ),
        migrations.RemoveField(
            model_name='archivedproject',
            name='background',
        ),
        migrations.RemoveField(
            model_name='archivedproject',
            name='conflicts_of_interest',
        ),
        migrations.RemoveField(
            model_name='archivedproject',
            name='content_description',
        ),
        migrations.RemoveField(
            model_name='archivedproject',
            name='installation',
        ),
        migrations.RemoveField(
            model_name='archivedproject',
            name='methods',
        ),
        migrations.RemoveField(
            model_name='archivedproject',
            name='usage_notes',
        ),
        migrations.RemoveField(
            model_name='publishedproject',
            name='release_notes',
        ),
        migrations.RemoveField(
            model_name='publishedproject',
            name='acknowledgements',
        ),
        migrations.RemoveField(
            model_name='publishedproject',
            name='background',
        ),
        migrations.RemoveField(
            model_name='publishedproject',
            name='conflicts_of_interest',
        ),
        migrations.RemoveField(
            model_name='publishedproject',
            name='content_description',
        ),
        migrations.RemoveField(
            model_name='publishedproject',
            name='installation',
        ),
        migrations.RemoveField(
            model_name='publishedproject',
            name='methods',
        ),
        migrations.RemoveField(
            model_name='publishedproject',
            name='usage_notes',
        ),
        migrations.AlterUniqueTogether(
            name='sectioncontent',
            unique_together={('content_type', 'object_id', 'project_section')},
        ),
        migrations.AlterUniqueTogether(
            name='projectsection',
            unique_together={('name', 'resource_type')},
        ),
        migrations.AlterUniqueTogether(
            name='projectsection',
            unique_together={('resource_type', 'default_order')},
        ),
    ]
