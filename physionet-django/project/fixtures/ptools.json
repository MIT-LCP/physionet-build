[
{
  "model": "project.legacyproject",
  "pk": 110,
  "fields": {
    "title": "The WFDB Software Package",
    "slug": "wfdb",
    "abstract": "<p>Effective use of PhysioBank data requires specialized software. We have developed a large collection of such software over the past twenty years, and much of it is contained within the WFDB (WaveForm DataBase) Software Package, the <a href=\"https://physionet.org/physiotools/wfdb/COPYING\">GPL</a>ed successor to the MIT <a href=\"https://physionet.org/physiotools/old/\">DB Software Package</a>.</p>\r\n\r\n<p>The major components of the WFDB Software Package are the <a href=\"https://physionet.org/physiotools/wfdb.shtml#library\">WFDB library</a>, about 75 <a href=\"https://physionet.org/physiotools/wfdb.shtml#applications\">WFDB applications</a> for signal processing and automated analysis, and the <a href=\"https://physionet.org/physiotools/wfdb.shtml#WAVE\"><em>WAVE</em></a> software for viewing, annotation, and interactive analysis of waveform data. A comprehensive collection of <a href=\"https://physionet.org/physiotools/manuals.shtml\">documentation</a>, including tutorials and reference manuals, is also included in the package.</p>\r\n\r\n<p>The package is frequently updated; a summary of recent changes can be found <a href=\"https://physionet.org/physiotools/wfdb/NEWS\">here</a>. The package is written in highly portable C and can be used on all popular platforms, including GNU/Linux, MacOS X, MS-Windows, and all versions of Unix.</p>",
    "full_description": "<h3>Introduction</h3>\r\n\r\n<p>Effective use of PhysioBank data requires specialized software. We have developed a large collection of such software over the past twenty years, and much of it is contained within the WFDB (WaveForm DataBase) Software Package, the <a href=\"https://physionet.org/physiotools/wfdb/COPYING\">GPL</a>ed successor to the MIT <a href=\"https://physionet.org/physiotools/old/\">DB Software Package</a>.</p>\r\n\r\n<p>The major components of the WFDB Software Package are the <a href=\"https://physionet.org/physiotools/wfdb.shtml#library\">WFDB library</a>, about 75 <a href=\"https://physionet.org/physiotools/wfdb.shtml#applications\">WFDB applications</a> for signal processing and automated analysis, and the <a href=\"https://physionet.org/physiotools/wfdb.shtml#WAVE\"><em>WAVE</em></a> software for viewing, annotation, and interactive analysis of waveform data. A comprehensive collection of <a href=\"https://physionet.org/physiotools/manuals.shtml\">documentation</a>, including tutorials and reference manuals, is also included in the package.</p>\r\n\r\n<p>The package is frequently updated; a summary of recent changes can be found <a href=\"https://physionet.org/physiotools/wfdb/NEWS\">here</a>. The package is written in highly portable C and can be used on all popular platforms, including GNU/Linux, MacOS X, MS-Windows, and all versions of Unix.</p>\r\n\r\n<h3>WFDB library</h3>\r\n\r\n<p>This is a <a href=\"https://physionet.org/physiotools/wfdb/lib/\">set of functions</a> (subroutines) for reading and writing files in the formats used by PhysioBank databases (among others). The WFDB library is <a href=\"https://physionet.org/physiotools/wfdb/lib/COPYING.LIB\">LGPL</a>ed, and can be used by programs written in ANSI/ISO C, K&amp;R C, C++, or Fortran, running under any operating system for which an ANSI/ISO or K&amp;R C compiler is available, including all versions of Unix, MS-DOS, MS-Windows, the Macintosh OS, and VMS.</p>\r\n\r\n<p>Optionally, the WFDB library may be compiled with support for reading input directly from web (HTTP) and FTP servers without the use of a web browser or an FTP client. This optional feature allows applications linked with the WFDB library to view or analyze data such as those available from <a href=\"https://physionet.org/physiobank/\">PhysioBank</a> without the need to download entire records and to store them locally. To enable this feature, you will also need the <a href=\"https://physionet.org/physiotools/libcurl/\"><code>libcurl</code></a> library.</p>\r\n\r\n<p>The WFDB library is documented by the <em>WFDB Programmer&#39;s Guide</em> (available as <a href=\"https://physionet.org/physiotools/wpg/wpg.htm\">HTML</a> or <a href=\"https://physionet.org/physiotools/wpg/wpg.pdf\">PDF</a>). Texinfo sources for the <em>WFDB Programmer&#39;s Guide</em> are included in the <a href=\"https://physionet.org/physiotools/wfdb/doc/\"><code>doc</code></a> directory of the WFDB Software Package.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>WFDB applications</h3>\r\n\r\n<p>A large set of well-tested, interoperable command-line tools for signal processing and automated analysis is included in the <a href=\"https://physionet.org/physiotools/wfdb/app/\"><code>app</code></a>, <a href=\"https://physionet.org/physiotools/wfdb/convert/\"><code>convert</code></a>, and <a href=\"https://physionet.org/physiotools/wfdb/psd/\"><code>psd</code></a> directories of the WFDB Software Package. These applications are described in the <em>WFDB Applications Guide</em> (available as <a href=\"https://physionet.org/physiotools/wag/wag.htm\">HTML</a> or <a href=\"https://physionet.org/physiotools/wag/wag.pdf\">PDF</a>). The <code>troff</code> (Unix <code>man</code> page) sources for the <em>WFDB Applications Guide</em> are included in the <a href=\"https://physionet.org/physiotools/wfdb/doc/\"><code>doc</code></a> directory of the WFDB Software Package.</p>\r\n\r\n<p>Two American National Standards, ANSI/AAMI EC38:1998 (Ambulatory Electrocardiographs) and ANSI/AAMI EC57:1998 (Testing and Reporting Performance Results of Cardiac Rhythm and ST Segment Measurement Algorithms) require the use of several of the WFDB applications for evaluation of certain devices and algorithms. For details, see <a href=\"https://physionet.org/physiotools/wag/eval.htm\">Evaluating ECG Analyzers</a> in the <em>WFDB Applications Guide</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><em>WAVE</em> for GNU/Linux, FreeBSD, Mac OS X, MS-Windows, Solaris, and SunOS</h3>\r\n\r\n<p><em>WAVE</em> is an extensible interactive graphical environment for manipulating sets of digitized signals with optional annotations. <em>WAVE</em> is built using the WFDB library developed for physiologic signal processing, so it can be applied to any of a wide variety of data formats supported by the WFDB library. <em>WAVE</em> can run on GNU/Linux or FreeBSD PCs, Mac OS X, MS-Windows PCs, and Sun workstations, or on any other systems to which the open-source XView toolkit has been ported; in addition, it can be accessed remotely using networked PCs, Macintoshes, or other systems for which X11 servers are available.</p>\r\n\r\n<p>Among <em>WAVE</em>&#39;s capabilities are:</p>\r\n\r\n<ul>\r\n\t<li>fast display of waveforms and annotations at various calibrated scales</li>\r\n\t<li>fast access to any portion of a recording, with caching and `read-ahead&#39; heuristics to improve efficiency and reduce network traffic</li>\r\n\t<li>forward and backward searches for annotation patterns</li>\r\n\t<li>graphical annotation editing using standard or user-defined annotations</li>\r\n\t<li>variable-speed superimposition display (simulation of triggered oscilloscope display with persistence; can be run forward or backward)</li>\r\n\t<li>high-resolution printing of user-selected signal segments</li>\r\n\t<li>extremely flexible control of external signal-processing and analysis programs (menus may be reconfigured by the user while <em>WAVE</em> is running)</li>\r\n\t<li>`remote&#39; mode: external programs such as Web browsers can control <em>WAVE</em>&#39;s display</li>\r\n\t<li>on-line `spot&#39; help for all controls, with additional topic-oriented on-line help</li>\r\n</ul>\r\n\r\n<p>A complete set of sources for <em>WAVE</em> is included in the <a href=\"https://physionet.org/physiotools/wfdb/wave/\"><code>wave</code></a> directory of the WFDB Software Package. The <em>WAVE User&#39;s Guide</em> (available as <a href=\"https://physionet.org/physiotools/wug/wug.htm\">HTML</a> or <a href=\"https://physionet.org/physiotools/wug/wug.pdf\">PDF</a>) contains both tutorial and reference material. The LaTeX source for the <em>WAVE User&#39;s Guide</em> is included in the <a href=\"https://physionet.org/physiotools/wfdb/doc/\"><code>doc</code></a> directory of the WFDB Software Package.</p>\r\n\r\n<p>For convenience, XView sources are available <a href=\"https://physionet.org/physiotools/xview/\">here</a>, as are XView binaries for GNU/Linux, Mac OS X, and MS-Windows, instructions for installing them, as well as information about how to find or create XView libraries for FreeBSD, Solaris, and other versions of Unix. The source and binary packages contain the <code>xview</code> and <code>olgx</code> libraries needed by <em>WAVE</em>.</p>\r\n\r\n<h3>Related software packages</h3>\r\n\r\n<p>The packages described in this section allow use of the WFDB software from other environments and programming languages. These packages are not included in the WFDB Software Package; they must be installed separately.</p>\r\n\r\n<ul>\r\n\t<li>The <a href=\"https://github.com/MIT-LCP/wfdb-python\">WFDB Python package</a> contains a library of native python scripts for reading and writing WFDB signals and annotations without any dependencies on the original WFDB software package</li>\r\n\t<li>The <a href=\"https://physionet.org/physiotools/matlab/wfdb-app-matlab/\">WFDB Toolbox for MATLAB</a> provides access from MATLAB to more than 20 of the applications included in the WFDB Software Package. The toolbox provides MATLAB and Java wrappers for these applications, and an installer that runs within MATLAB to install both the toolbox itself and the precompiled WFDB Software Package executables upon which it relies. The toolbox can be used with 64-bit MATLAB R2010b or later on GNU/Linux, Mac OS X, and MS-Windows.</li>\r\n\t<li>The <a href=\"https://physionet.org/physiotools/wfdb-swig.shtml\">wfdb-swig</a> package provides interfaces between the WFDB library and software written in a variety of other languages, so that such software can have access to the full range of capabilities supported by current and future versions of the WFDB library. The package provides interfaces for software written using Perl, Python, C# (and other .NET languages), and Java. The wfdb-swig package can be readily extended for use with other target languages supported by <a href=\"http://www.swig.org/\" target=\"other\">SWIG</a>, such as PHP, Ruby, TCL, and several versions of Lisp.</li>\r\n</ul>\r\n\r\n<h3>Downloading</h3>\r\n\r\n<p><strong>Quick start guides</strong> are available for <a href=\"https://physionet.org/physiotools/wfdb-freebsd-quick-start.shtml\">FreeBSD</a>, <a href=\"https://physionet.org/physiotools/wfdb-linux-quick-start.shtml\">GNU/Linux</a>, <a href=\"https://physionet.org/physiotools/wfdb-darwin-quick-start.shtml\">Mac OS X (Darwin)</a>, <a href=\"https://physionet.org/physiotools/wfdb-windows-quick-start.shtml\">MS-Windows 95/98/ME/NT/2000/XP</a>, and <a href=\"https://physionet.org/physiotools/wfdb-solaris-quick-start.shtml\">Solaris</a>. (If your platform is not one of these, install the package from sources, following the procedure in the <a href=\"https://physionet.org/physiotools/wfdb-linux-quick-start.shtml\">GNU/Linux</a> quick start guide.)</p>\r\n\r\n<p><strong>Sources:</strong> The current version of the WFDB Software Package (most recently updated on Friday, 8 March 2019 at 20:04 EST) may be downloaded in source form, as a <a href=\"https://physionet.org/physiotools/wfdb.tar.gz\">compressed tar archive</a> (2.2M). A <a href=\"https://physionet.org/physiotools/wfdb-no-docs.tar.gz\">shorter version</a> (904K), without the documentation, is also available. (WinZip users, please read about how to unpack <code>.tar.gz</code> archives in the <a href=\"https://physionet.org/faq.shtml#tar-gz\">FAQ</a>.) You may also browse through the <a href=\"https://physionet.org/physiotools/wfdb/\">source tree</a> to read or download individual files.</p>\r\n\r\n<p>Development snapshots of the WFDB Software Package may be available as <a href=\"https://physionet.org/physiotools/beta/\">beta software</a>. Beta software is available in source form only, to those with the skills, patience, and willingness to contribute to the final stages of the process of testing and debugging upcoming releases of PhysioToolkit software. Don&#39;t use beta software if you need support!</p>\r\n\r\n<p>Older stable versions of the WFDB Software Package are also available in the <a href=\"https://physionet.org/physiotools/archives/\">PhysioToolkit Archives</a>.</p>\r\n\r\n<p><strong>Ready-to-run, precompiled <a href=\"https://physionet.org/physiotools/binaries/\" id=\"binaries\">binaries</a></strong> are available for several popular operating systems. Please read the quick start guide for your platform before installing any of these binaries! Contributions of binaries for other operating systems are welcome; please write to us first.</p>\r\n\r\n<p><strong>Documentation</strong>: A comprehensive set of <a href=\"https://physionet.org/physiotools/manuals.shtml\">tutorials and reference manuals</a> can be read on-line or downloaded and printed.</p>",
    "doi": "",
    "version": "10.6.2",
    "resource_type": 1,
    "publish_date": "2019-03-08",
    "citation": "",
    "citation_url": "",
    "contact_name": "Benjamin Moody",
    "contact_affiliations": "MIT",
    "contact_email": "benjamin@gmail.com"
  }
},
{
  "model": "project.legacyproject",
  "pk": 111,
  "fields": {
    "title": "SEMIA",
    "slug": "semia",
    "abstract": "<p>SEMIA, version 3.0.1, is a tool for viewing time series of diagnostic and morphology parameters of long-term ambulatory recordings, and ST segment annotations with their corresponding ECG waveforms of the Long-Term ST Database (LTST DB). SEMIA was created during the development of the LTST DB, a project supported by Medtronic, Inc. (Minneapolis, MN, USA) and Zymed, Inc. (Camarillo, CA, USA).</p>",
    "full_description": "<h3>Introduction</h3>\r\n\r\n<p>SEMIA, version 3.0.1, is a tool for viewing time series of diagnostic and morphology parameters of long-term ambulatory recordings, and ST segment annotations with their corresponding ECG waveforms of the Long-Term ST Database (LTST DB). SEMIA was created during the development of the LTST DB, a project supported by Medtronic, Inc. (Minneapolis, MN, USA) and Zymed, Inc. (Camarillo, CA, USA).</p>\r\n\r\n<h3>Compiling SEMIA</h3>\r\n\r\n<p>If you have not already installed the <a href=\"https://physionet.org/physiotools/wfdb.shtml\">WFDB software package</a> and the <a href=\"https://physionet.org/physiotools/xview/\">XView toolkit</a>, do so now.</p>\r\n\r\n<p>If you are running under GNU/Linux, you may not need to compile SEMIA. Try running the precompiled version of SEMIA available <a href=\"https://physionet.org/physiobank/database/ltstdb/semia/semia\">here</a>. (You will still need to have installed WFDB and XView in order to do this successfully.)</p>\r\n\r\n<p>If you need to compile SEMIA, make a directory for the SEMIA sources, then copy all files from this directory into it. (For convenience, you may download this <a href=\"https://physionet.org/physiobank/database/ltstdb/semia-3.0.1.tar.gz\">gzip-compressed tar archive</a> of all files in this directory rather than downloading the individual files.)</p>\r\n\r\n<p>Enter your directory of SEMIA sources and type &#39;make&#39;.</p>\r\n\r\n<p>You may encounter many warnings related to improperly formatted comments in XView #include files. These warnings may be ignored. If you wish to eliminate them, download and apply this <a href=\"https://physionet.org/physiotools/wfdb/wave/xview-patches\">patch</a> (read and follow the instructions at the beginning of the patch to see how to apply it).</p>\r\n\r\n<p>When &#39;make&#39; finishes, copy semia into a directory in your <strong>PATH</strong>, and copy semia.opt and semia.hlp into the directory where you wish to use SEMIA.</p>\r\n\r\n<h3>Using SEMIA</h3>\r\n\r\n<p>To run SEMIA successfully, the following files of the LTST DB are needed in the current working directory:</p>\r\n\r\n<ul>\r\n\t<li>s<em>nnnnn</em>.hea (the header file for record s<em>nnnnn</em>). This file also contains comments of human annotators, diagnostic data of the patient, and technical data of the record.</li>\r\n\t<li>s<em>nnnnn</em>.dat (digitized ECGs for the record)</li>\r\n\t<li>s<em>nnnnn</em>.cnt (numbers of annotated ST events and their durations according to annotation protocols A, B, and C, and numbers of normal and abnormal heart beats)</li>\r\n\t<li>s<em>nnnnn</em>_fin.dmy (time series of &quot;fine&quot; diagnostic and morphology parameters obtained on average heart beats)</li>\r\n\t<li>s<em>nnnnn</em>_raw.dmy (time series of &quot;raw&quot; (resampled - 0.5 samples/sec - and smoothed) diagnostic and morphology parameters)</li>\r\n\t<li>s<em>nnnnn</em>_1.sta (ST annotation markers according to annotation protocol A)</li>\r\n</ul>\r\n\r\n<p>The last three of these files are contained within the .tsr.zip files in the LTST DB directory on PhysioNet (or on the &quot;Subset&quot; CD-ROM). Download the .tsr.zip file and unpack it using a command such as:</p>\r\n\r\n<blockquote>\r\n<p>unzip s20011.tsr.zip</p>\r\n</blockquote>\r\n\r\n<p>In addition, you will need copies of semia.opt (a text file containing SEMIA&#39;s options) and semia.hlp (a text file containing on-line help for SEMIA) in the current working directory, as noted above.</p>\r\n\r\n<p>Run SEMIA by typing &quot;semia&quot;. Click on the &quot;Help&quot; button to view SEMIA&#39;s on-line manual. To open a record, click on &quot;Open&quot;, then enter the record name (s<em>nnnnn</em> only; do not include .hea or any other suffix in the record name). Depending on the speed of your system, it may take up to a minute for SEMIA to load the data after you click &quot;OK&quot;.</p>\r\n\r\n<p>Once the data have been loaded, several buttons that were initially inactive become available for use. Each of them ( &quot;Lead0&quot;, &quot;Lead1&quot;, &quot;Lead2&quot;, &quot;Data&quot;, and &quot;KL&quot;) opens a window when clicked. (&quot;Lead2&quot; remains inactive unless you have opened a record with 3 ECG signals.)</p>\r\n\r\n<ul>\r\n\t<li>The &quot;Lead&quot; windows display time series of diagnostic parameters (raw and fine ST level functions, raw and fine ST slope functions, raw linearly interpolated ST reference functions, raw ST deviation functions, raw and fine heart rate functions, and annotated ST episodes) and ST segment annotations according to annotation protocol A of the LTST DB.\r\n\t<p>Fine time series or functions are those obtained on average heart beats after noise detection during preprocessing phase. Raw time series or functions are those after resampling and smoothing of fine functions.</p>\r\n\r\n\t<p>ST segment annotations are: global reference, local references that define the ST reference function, ST segment annotations indicating ischemic and heart-rate related ST episodes (beginnings, extrema, ends), axis shift annotations, conduction change annotations, noise annotations, and annotations indicating unreadable intervals (beginnings, ends).</p>\r\n\r\n\t<p>Three different display modes for &quot;Lead&quot; windows are possible:</p>\r\n\r\n\t<ul>\r\n\t\t<li>Unsubtracted mode displaying ST level function (linearly interpolated ST reference function is not subtracted from the ST level function). In this mode, the active reference to compare ST segment waveforms is the global reference annotation.</li>\r\n\t\t<li>Unsubtracted mode displaying ST level function (linearly interpolated ST reference function is not subtracted from the ST level function). In this mode, the active reference to compare ST segment waveforms is a local reference annotation.</li>\r\n\t\t<li>Subtracted mode displaying ST deviation function (linearly interpolated ST reference function is subtracted from the ST level function to form the ST deviation function). In this mode, the active reference to compare ST segment waveforms is the global reference annotation</li>\r\n\t</ul>\r\n\r\n\t<p>The ECG signal corresponding to current active reference annotation is displayed in the upper part of the &quot;Data&quot; window.</p>\r\n\r\n\t<p>Time series displayed in the &quot;Lead&quot; windows can be examined by pointing them using mouse cursor or setting the <strong>Marker</strong> at the time instance of interest. The corresponding ECG signal is displayed in the lower part of the &quot;Data&quot; window.</p>\r\n\r\n\t<p>ST segment annotations can be examined using the <strong>Exm</strong> option. The examined ST annotation becomes the currently active annotation, and its corresponding ECG signal is displayed in the lower part of the &quot;Data&quot; window as well.</p>\r\n\r\n\t<p>The time scale may be adjusted to permit between 1 minute and 96 hours of data to be seen at once. Time series from &quot;other&quot; ECG leads may be overlaid in each &quot;Lead&quot; window.</p>\r\n\t</li>\r\n\t<li>The &quot;Data&quot; window displays the ECG signal corresponding to the time of the active reference annotation in the upper portion of the window, and that corresponding to the time of the current active annotation or marker in the lower portion of the window. These two ECG waveforms may be overlaid. A variety of scales may be selected for comparing ST segment morphologies. The time scale may be adjusted to permit between 1 and 60 seconds of data to be seen at once.\r\n\t<p>The center heart beat in each ECG trace is the beat average over the chosen time window. ECG signals from &quot;other&quot; ECG leads may be overlaid.</p>\r\n\t</li>\r\n\t<li>The &quot;KL&quot; window displays time series of morphology (waveform shape) parameters. Two sets of parameters (for the ST segment and the QRS complex) can be displayed; the parameters are coefficients of a Karhunen-Lo&egrave;ve transform (principal components).\r\n\t<p>The ST segment or QRS complex distance function (Mahalanobis distance function) can be overlaid in the KL window.</p>\r\n\t</li>\r\n</ul>\r\n\r\n<h3>References</h3>\r\n\r\n<ol>\r\n\t<li>Franc Jager, George B. Moody, Alessandro Taddei, Gorazd Antolic, Michele Emdin, Ales Smrdel, Boris Glavic, Carlo Marchesi, and Roger G. Mark. A Long-Term ST Database for Development and Evaluation of Ischemia Detectors. <em>Computers in Cardiology 1998</em>, pp. 301-304, IEEE Press. ISSN 0276-6547.</li>\r\n\t<li>Franc Jager, Alessandro Taddei, Michele Emdin, Gorazd Antolic, Roman Dorn, George B. Moody, Boris Glavic, Ales Smrdel, M Varanini, Mitja Zabukovec, Simone Bordigiago, Carlo Marchesi, and Roger G. Mark. The Long-Term ST Database: A Research Resource for Algorithm Development and Physiologic Studies of Transient Myocardial Ischemia. <em>Computers in Cardiology 2000</em>, pp. 841-844. IEEE Press. ISSN 0276-6547.</li>\r\n</ol>",
    "doi": "",
    "version": "3.0.1",
    "resource_type": 1,
    "publish_date": "2002-10-30",
    "citation": "",
    "citation_url": "",
    "contact_name": "Franc Jager",
    "contact_affiliations": "University of Ljubljana",
    "contact_email": "franc.jager@fri.uni-lj.si"
  }
},
{
  "model": "project.legacyproject",
  "pk": 112,
  "fields": {
    "title": "rddata",
    "slug": "rddata",
    "abstract": "<pre>\r\nThis program reads ECG data which are saved in MIT format 212.</pre>",
    "full_description": "<p>This program reads ECG data which are saved in MIT format 212.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2003-02-27",
    "citation": "",
    "citation_url": "",
    "contact_name": "Robert Tratnig",
    "contact_affiliations": "Vorarlberg University of Applied Sciences",
    "contact_email": "rtratnig@gmx.at"
  }
},
{
  "model": "project.legacyproject",
  "pk": 113,
  "fields": {
    "title": "Data Chromatix",
    "slug": "dchromatix",
    "abstract": "<p>Analysis of biomedical time series plays a key role in clinical management and basic investigation. However, most conventional monitors streaming data in real-time show only the most recent values, not referenced to past dynamics. The proposed visualization method (termed &ldquo;data chromatix&rdquo;) was developed to address this challenge by bringing memory of the system&rsquo;s past behavior into the current display window.</p>\r\n\r\n<p>The function DataChromatix.m (version 1.0) assigns a color to each data point of a time series. The color is determined by the values of a normalized histogram (estimated probability density function) computed from a pre-selected segment of the data. The algorithm receives the time series as input and generates a video of its colorized version as it would look on a typical monitor display, as well as a static graph of the entire colorized signal.</p>",
    "full_description": "<h3>Software Description</h3>\r\n\r\n<p>Analysis of biomedical time series plays a key role in clinical management and basic investigation. However, most conventional monitors streaming data in real-time show only the most recent values, not referenced to past dynamics. The proposed visualization method (termed &ldquo;data chromatix&rdquo;) was developed to address this challenge by bringing memory of the system&rsquo;s past behavior into the current display window.</p>\r\n\r\n<p>The function DataChromatix.m (version 1.0) assigns a color to each data point of a time series. The color is determined by the values of a normalized histogram (estimated probability density function) computed from a pre-selected segment of the data. The algorithm receives the time series as input and generates a video of its colorized version as it would look on a typical monitor display, as well as a static graph of the entire colorized signal.</p>\r\n\r\n<p>The algorithm has the following parameters:</p>\r\n\r\n<ul>\r\n\t<li>the memory and colorization window lengths</li>\r\n\t<li>the shift (s)</li>\r\n\t<li>the histogram bin size</li>\r\n\t<li>the number of colors (c) in the chromatic map (Fig. 1).</li>\r\n</ul>\r\n\r\n<p>Figure 1 shows: Memory window and colorization window at a given time tC and at the following time instant tC+s. Both windows are shifted to the right by the shift s. Adapted from (1).</p>\r\n\r\n<p>At each step, a normalized histogram of the data points in the memory window is computed. Then, the interval [0,1] is divided into c adjacent intervals, and each interval is assigned a color. If the jet color-map is used, the interval [0,1/c) corresponds to dark red and the interval ((c-1)/c,1] corresponds to dark blue. Subsequently, each data point in the colorization window is assigned the color of the histogram bin into which it falls. Finally, the colorization window is advanced by the shift, s, and the memory window is either extended or advanced by the same amount (Fig. 2).</p>\r\n\r\n<p>Figure 2 shows: Schematic illustration of the colorization algorithm: the histogram of the time series (left panel) is colorized according to the bins height. Each point of the time series (right panel) is then colorized according to the bin it belongs to. Adapted from (1).</p>\r\n\r\n<p>This colorization algorithm is intended to facilitate analysis of physiologic and non-physiologic time series. Future studies will help assess its utility.</p>\r\n\r\n<p>The function has been tested on MATLAB R2014a, R2014b and R2015a.</p>\r\n\r\n<h3>Sample Input</h3>\r\n\r\n<p>Mandatory inputs to the function are:</p>\r\n\r\n<ul>\r\n\t<li>The time series to be colorized</li>\r\n\t<li>The units to show on the x and y axis</li>\r\n\t<li>The length of the window to display in the video</li>\r\n\t<li>The shift</li>\r\n</ul>\r\n\r\n<p>Optional inputs to the function are:</p>\r\n\r\n<ul>\r\n\t<li>The length of the memory window (default from the beginning of recording to the end of the colorization window)</li>\r\n\t<li>The length of the colorization window (default equal to the display window)</li>\r\n\t<li>The number of bins of the histogram (default determined by means of Friedman-Diaconis rule)</li>\r\n\t<li>The number of colors in the color-map (default = 64)</li>\r\n\t<li>The smoothing parameter for the histogram (default = 10)</li>\r\n\t<li>The data sampling frequency (default = 1 Hz)</li>\r\n\t<li>The name of the video (if = 0 does not create the video, default = &lsquo;Myvideo&rsquo;)</li>\r\n\t<li>A flag for data time format, when time units are seconds (if =1, the format is mm:ss, if =0 the format is s, default = 0)</li>\r\n\t<li>The desired color-map (default jet)</li>\r\n</ul>\r\n\r\n<p>Along with the function, we provide two examples that employ a fetal heart rate time series from the <a href=\"https://physionet.org/physiotools/dchromatix/physiobank/database/ctu-uhb-ctgdb/\">CTU-UHB Intrapartum Cardiotocography Database</a> on PhysioNet, one using a memory window starting from the beginning of the recording, the other using a moving memory window of fixed length. Please note that for loading the time series, the MATLAB version of the wfdb library (<a href=\"https://physionet.org/physiotools/dchromatix/physiotools/matlab/wfdb-app-matlab/\">http://physionet.org/physiotools/matlab/wfdb-app-matlab/</a>) must be installed.</p>\r\n\r\n<h3>Acknowledgments</h3>\r\n\r\n<p>This package was developed at the Wyss Institute at Harvard by A. Burykin, S. Mariani, T. Silva and T. Henriques.</p>\r\n\r\n<p>Users of our software should cite: (1) Burykin A*, Mariani S*, Henriques T, Silva T, Schnettler W, Costa MD**, Goldberger AL**. <a href=\"http://www.ncbi.nlm.nih.gov/pubmed/26012777\">&ldquo;Remembrance of time series past: simple chromatic method for visualizing trends in biomedical signals.&rdquo;</a> <em>Physiol Meas</em> 2015;36(7):N95.</p>\r\n\r\n<p>* Joint first authors<br />\r\n** Joint senior authors</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2015-11-09",
    "citation": "Burykin A, Mariani S, Henriques T, Silva T, Schnettler W, Costa MD, Goldberger AL. \u201cRemembrance of time series past: simple chromatic method for visualizing trends in biomedical signals.\u201d Physiol Meas 2015;36(7):N95.",
    "citation_url": "http://www.ncbi.nlm.nih.gov/pubmed/26012777",
    "contact_name": "PhysioNet Support",
    "contact_affiliations": "MIT",
    "contact_email": "webmaster@physionet.org"
  }
}
]
