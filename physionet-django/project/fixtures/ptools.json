[
{
  "model": "project.legacyproject",
  "pk": 110,
  "fields": {
    "title": "The WFDB Software Package",
    "slug": "wfdb",
    "abstract": "<p>Effective use of PhysioBank data requires specialized software. We have developed a large collection of such software over the past twenty years, and much of it is contained within the WFDB (WaveForm DataBase) Software Package, the <a href=\"https://physionet.org/physiotools/wfdb/COPYING\">GPL</a>ed successor to the MIT <a href=\"https://physionet.org/physiotools/old/\">DB Software Package</a>.</p>\r\n\r\n<p>The major components of the WFDB Software Package are the <a href=\"https://physionet.org/physiotools/wfdb.shtml#library\">WFDB library</a>, about 75 <a href=\"https://physionet.org/physiotools/wfdb.shtml#applications\">WFDB applications</a> for signal processing and automated analysis, and the <a href=\"https://physionet.org/physiotools/wfdb.shtml#WAVE\"><em>WAVE</em></a> software for viewing, annotation, and interactive analysis of waveform data. A comprehensive collection of <a href=\"https://physionet.org/physiotools/manuals.shtml\">documentation</a>, including tutorials and reference manuals, is also included in the package.</p>\r\n\r\n<p>The package is frequently updated; a summary of recent changes can be found <a href=\"https://physionet.org/physiotools/wfdb/NEWS\">here</a>. The package is written in highly portable C and can be used on all popular platforms, including GNU/Linux, MacOS X, MS-Windows, and all versions of Unix.</p>",
    "full_description": "<h3>Introduction</h3>\r\n\r\n<p>Effective use of PhysioBank data requires specialized software. We have developed a large collection of such software over the past twenty years, and much of it is contained within the WFDB (WaveForm DataBase) Software Package, the <a href=\"https://physionet.org/physiotools/wfdb/COPYING\">GPL</a>ed successor to the MIT <a href=\"https://physionet.org/physiotools/old/\">DB Software Package</a>.</p>\r\n\r\n<p>The major components of the WFDB Software Package are the <a href=\"https://physionet.org/physiotools/wfdb.shtml#library\">WFDB library</a>, about 75 <a href=\"https://physionet.org/physiotools/wfdb.shtml#applications\">WFDB applications</a> for signal processing and automated analysis, and the <a href=\"https://physionet.org/physiotools/wfdb.shtml#WAVE\"><em>WAVE</em></a> software for viewing, annotation, and interactive analysis of waveform data. A comprehensive collection of <a href=\"https://physionet.org/physiotools/manuals.shtml\">documentation</a>, including tutorials and reference manuals, is also included in the package.</p>\r\n\r\n<p>The package is frequently updated; a summary of recent changes can be found <a href=\"https://physionet.org/physiotools/wfdb/NEWS\">here</a>. The package is written in highly portable C and can be used on all popular platforms, including GNU/Linux, MacOS X, MS-Windows, and all versions of Unix.</p>\r\n\r\n<h3>WFDB library</h3>\r\n\r\n<p>This is a <a href=\"https://physionet.org/physiotools/wfdb/lib/\">set of functions</a> (subroutines) for reading and writing files in the formats used by PhysioBank databases (among others). The WFDB library is <a href=\"https://physionet.org/physiotools/wfdb/lib/COPYING.LIB\">LGPL</a>ed, and can be used by programs written in ANSI/ISO C, K&amp;R C, C++, or Fortran, running under any operating system for which an ANSI/ISO or K&amp;R C compiler is available, including all versions of Unix, MS-DOS, MS-Windows, the Macintosh OS, and VMS.</p>\r\n\r\n<p>Optionally, the WFDB library may be compiled with support for reading input directly from web (HTTP) and FTP servers without the use of a web browser or an FTP client. This optional feature allows applications linked with the WFDB library to view or analyze data such as those available from <a href=\"https://physionet.org/physiobank/\">PhysioBank</a> without the need to download entire records and to store them locally. To enable this feature, you will also need the <a href=\"https://physionet.org/physiotools/libcurl/\"><code>libcurl</code></a> library.</p>\r\n\r\n<p>The WFDB library is documented by the <em>WFDB Programmer&#39;s Guide</em> (available as <a href=\"https://physionet.org/physiotools/wpg/wpg.htm\">HTML</a> or <a href=\"https://physionet.org/physiotools/wpg/wpg.pdf\">PDF</a>). Texinfo sources for the <em>WFDB Programmer&#39;s Guide</em> are included in the <a href=\"https://physionet.org/physiotools/wfdb/doc/\"><code>doc</code></a> directory of the WFDB Software Package.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>WFDB applications</h3>\r\n\r\n<p>A large set of well-tested, interoperable command-line tools for signal processing and automated analysis is included in the <a href=\"https://physionet.org/physiotools/wfdb/app/\"><code>app</code></a>, <a href=\"https://physionet.org/physiotools/wfdb/convert/\"><code>convert</code></a>, and <a href=\"https://physionet.org/physiotools/wfdb/psd/\"><code>psd</code></a> directories of the WFDB Software Package. These applications are described in the <em>WFDB Applications Guide</em> (available as <a href=\"https://physionet.org/physiotools/wag/wag.htm\">HTML</a> or <a href=\"https://physionet.org/physiotools/wag/wag.pdf\">PDF</a>). The <code>troff</code> (Unix <code>man</code> page) sources for the <em>WFDB Applications Guide</em> are included in the <a href=\"https://physionet.org/physiotools/wfdb/doc/\"><code>doc</code></a> directory of the WFDB Software Package.</p>\r\n\r\n<p>Two American National Standards, ANSI/AAMI EC38:1998 (Ambulatory Electrocardiographs) and ANSI/AAMI EC57:1998 (Testing and Reporting Performance Results of Cardiac Rhythm and ST Segment Measurement Algorithms) require the use of several of the WFDB applications for evaluation of certain devices and algorithms. For details, see <a href=\"https://physionet.org/physiotools/wag/eval.htm\">Evaluating ECG Analyzers</a> in the <em>WFDB Applications Guide</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><em>WAVE</em> for GNU/Linux, FreeBSD, Mac OS X, MS-Windows, Solaris, and SunOS</h3>\r\n\r\n<p><em>WAVE</em> is an extensible interactive graphical environment for manipulating sets of digitized signals with optional annotations. <em>WAVE</em> is built using the WFDB library developed for physiologic signal processing, so it can be applied to any of a wide variety of data formats supported by the WFDB library. <em>WAVE</em> can run on GNU/Linux or FreeBSD PCs, Mac OS X, MS-Windows PCs, and Sun workstations, or on any other systems to which the open-source XView toolkit has been ported; in addition, it can be accessed remotely using networked PCs, Macintoshes, or other systems for which X11 servers are available.</p>\r\n\r\n<p>Among <em>WAVE</em>&#39;s capabilities are:</p>\r\n\r\n<ul>\r\n\t<li>fast display of waveforms and annotations at various calibrated scales</li>\r\n\t<li>fast access to any portion of a recording, with caching and `read-ahead&#39; heuristics to improve efficiency and reduce network traffic</li>\r\n\t<li>forward and backward searches for annotation patterns</li>\r\n\t<li>graphical annotation editing using standard or user-defined annotations</li>\r\n\t<li>variable-speed superimposition display (simulation of triggered oscilloscope display with persistence; can be run forward or backward)</li>\r\n\t<li>high-resolution printing of user-selected signal segments</li>\r\n\t<li>extremely flexible control of external signal-processing and analysis programs (menus may be reconfigured by the user while <em>WAVE</em> is running)</li>\r\n\t<li>`remote&#39; mode: external programs such as Web browsers can control <em>WAVE</em>&#39;s display</li>\r\n\t<li>on-line `spot&#39; help for all controls, with additional topic-oriented on-line help</li>\r\n</ul>\r\n\r\n<p>A complete set of sources for <em>WAVE</em> is included in the <a href=\"https://physionet.org/physiotools/wfdb/wave/\"><code>wave</code></a> directory of the WFDB Software Package. The <em>WAVE User&#39;s Guide</em> (available as <a href=\"https://physionet.org/physiotools/wug/wug.htm\">HTML</a> or <a href=\"https://physionet.org/physiotools/wug/wug.pdf\">PDF</a>) contains both tutorial and reference material. The LaTeX source for the <em>WAVE User&#39;s Guide</em> is included in the <a href=\"https://physionet.org/physiotools/wfdb/doc/\"><code>doc</code></a> directory of the WFDB Software Package.</p>\r\n\r\n<p>For convenience, XView sources are available <a href=\"https://physionet.org/physiotools/xview/\">here</a>, as are XView binaries for GNU/Linux, Mac OS X, and MS-Windows, instructions for installing them, as well as information about how to find or create XView libraries for FreeBSD, Solaris, and other versions of Unix. The source and binary packages contain the <code>xview</code> and <code>olgx</code> libraries needed by <em>WAVE</em>.</p>\r\n\r\n<h3>Related software packages</h3>\r\n\r\n<p>The packages described in this section allow use of the WFDB software from other environments and programming languages. These packages are not included in the WFDB Software Package; they must be installed separately.</p>\r\n\r\n<ul>\r\n\t<li>The <a href=\"https://github.com/MIT-LCP/wfdb-python\">WFDB Python package</a> contains a library of native python scripts for reading and writing WFDB signals and annotations without any dependencies on the original WFDB software package</li>\r\n\t<li>The <a href=\"https://physionet.org/physiotools/matlab/wfdb-app-matlab/\">WFDB Toolbox for MATLAB</a> provides access from MATLAB to more than 20 of the applications included in the WFDB Software Package. The toolbox provides MATLAB and Java wrappers for these applications, and an installer that runs within MATLAB to install both the toolbox itself and the precompiled WFDB Software Package executables upon which it relies. The toolbox can be used with 64-bit MATLAB R2010b or later on GNU/Linux, Mac OS X, and MS-Windows.</li>\r\n\t<li>The <a href=\"https://physionet.org/physiotools/wfdb-swig.shtml\">wfdb-swig</a> package provides interfaces between the WFDB library and software written in a variety of other languages, so that such software can have access to the full range of capabilities supported by current and future versions of the WFDB library. The package provides interfaces for software written using Perl, Python, C# (and other .NET languages), and Java. The wfdb-swig package can be readily extended for use with other target languages supported by <a href=\"http://www.swig.org/\" target=\"other\">SWIG</a>, such as PHP, Ruby, TCL, and several versions of Lisp.</li>\r\n</ul>\r\n\r\n<h3>Downloading</h3>\r\n\r\n<p><strong>Quick start guides</strong> are available for <a href=\"https://physionet.org/physiotools/wfdb-freebsd-quick-start.shtml\">FreeBSD</a>, <a href=\"https://physionet.org/physiotools/wfdb-linux-quick-start.shtml\">GNU/Linux</a>, <a href=\"https://physionet.org/physiotools/wfdb-darwin-quick-start.shtml\">Mac OS X (Darwin)</a>, <a href=\"https://physionet.org/physiotools/wfdb-windows-quick-start.shtml\">MS-Windows 95/98/ME/NT/2000/XP</a>, and <a href=\"https://physionet.org/physiotools/wfdb-solaris-quick-start.shtml\">Solaris</a>. (If your platform is not one of these, install the package from sources, following the procedure in the <a href=\"https://physionet.org/physiotools/wfdb-linux-quick-start.shtml\">GNU/Linux</a> quick start guide.)</p>\r\n\r\n<p><strong>Sources:</strong> The current version of the WFDB Software Package (most recently updated on Friday, 8 March 2019 at 20:04 EST) may be downloaded in source form, as a <a href=\"https://physionet.org/physiotools/wfdb.tar.gz\">compressed tar archive</a> (2.2M). A <a href=\"https://physionet.org/physiotools/wfdb-no-docs.tar.gz\">shorter version</a> (904K), without the documentation, is also available. (WinZip users, please read about how to unpack <code>.tar.gz</code> archives in the <a href=\"https://physionet.org/faq.shtml#tar-gz\">FAQ</a>.) You may also browse through the <a href=\"https://physionet.org/physiotools/wfdb/\">source tree</a> to read or download individual files.</p>\r\n\r\n<p>Development snapshots of the WFDB Software Package may be available as <a href=\"https://physionet.org/physiotools/beta/\">beta software</a>. Beta software is available in source form only, to those with the skills, patience, and willingness to contribute to the final stages of the process of testing and debugging upcoming releases of PhysioToolkit software. Don&#39;t use beta software if you need support!</p>\r\n\r\n<p>Older stable versions of the WFDB Software Package are also available in the <a href=\"https://physionet.org/physiotools/archives/\">PhysioToolkit Archives</a>.</p>\r\n\r\n<p><strong>Ready-to-run, precompiled <a href=\"https://physionet.org/physiotools/binaries/\" id=\"binaries\">binaries</a></strong> are available for several popular operating systems. Please read the quick start guide for your platform before installing any of these binaries! Contributions of binaries for other operating systems are welcome; please write to us first.</p>\r\n\r\n<p><strong>Documentation</strong>: A comprehensive set of <a href=\"https://physionet.org/physiotools/manuals.shtml\">tutorials and reference manuals</a> can be read on-line or downloaded and printed.</p>",
    "doi": "",
    "version": "10.6.2",
    "resource_type": 1,
    "publish_date": "2019-03-08",
    "citation": "",
    "citation_url": "",
    "contact_name": "Benjamin Moody",
    "contact_affiliations": "MIT",
    "contact_email": "benjamin@gmail.com"
  }
},
{
  "model": "project.legacyproject",
  "pk": 111,
  "fields": {
    "title": "SEMIA",
    "slug": "semia",
    "abstract": "<p>SEMIA, version 3.0.1, is a tool for viewing time series of diagnostic and morphology parameters of long-term ambulatory recordings, and ST segment annotations with their corresponding ECG waveforms of the Long-Term ST Database (LTST DB). SEMIA was created during the development of the LTST DB, a project supported by Medtronic, Inc. (Minneapolis, MN, USA) and Zymed, Inc. (Camarillo, CA, USA).</p>",
    "full_description": "<h3>Introduction</h3>\r\n\r\n<p>SEMIA, version 3.0.1, is a tool for viewing time series of diagnostic and morphology parameters of long-term ambulatory recordings, and ST segment annotations with their corresponding ECG waveforms of the Long-Term ST Database (LTST DB). SEMIA was created during the development of the LTST DB, a project supported by Medtronic, Inc. (Minneapolis, MN, USA) and Zymed, Inc. (Camarillo, CA, USA).</p>\r\n\r\n<h3>Compiling SEMIA</h3>\r\n\r\n<p>If you have not already installed the <a href=\"https://physionet.org/physiotools/wfdb.shtml\">WFDB software package</a> and the <a href=\"https://physionet.org/physiotools/xview/\">XView toolkit</a>, do so now.</p>\r\n\r\n<p>If you are running under GNU/Linux, you may not need to compile SEMIA. Try running the precompiled version of SEMIA available <a href=\"https://physionet.org/physiobank/database/ltstdb/semia/semia\">here</a>. (You will still need to have installed WFDB and XView in order to do this successfully.)</p>\r\n\r\n<p>If you need to compile SEMIA, make a directory for the SEMIA sources, then copy all files from this directory into it. (For convenience, you may download this <a href=\"https://physionet.org/physiobank/database/ltstdb/semia-3.0.1.tar.gz\">gzip-compressed tar archive</a> of all files in this directory rather than downloading the individual files.)</p>\r\n\r\n<p>Enter your directory of SEMIA sources and type &#39;make&#39;.</p>\r\n\r\n<p>You may encounter many warnings related to improperly formatted comments in XView #include files. These warnings may be ignored. If you wish to eliminate them, download and apply this <a href=\"https://physionet.org/physiotools/wfdb/wave/xview-patches\">patch</a> (read and follow the instructions at the beginning of the patch to see how to apply it).</p>\r\n\r\n<p>When &#39;make&#39; finishes, copy semia into a directory in your <strong>PATH</strong>, and copy semia.opt and semia.hlp into the directory where you wish to use SEMIA.</p>\r\n\r\n<h3>Using SEMIA</h3>\r\n\r\n<p>To run SEMIA successfully, the following files of the LTST DB are needed in the current working directory:</p>\r\n\r\n<ul>\r\n\t<li>s<em>nnnnn</em>.hea (the header file for record s<em>nnnnn</em>). This file also contains comments of human annotators, diagnostic data of the patient, and technical data of the record.</li>\r\n\t<li>s<em>nnnnn</em>.dat (digitized ECGs for the record)</li>\r\n\t<li>s<em>nnnnn</em>.cnt (numbers of annotated ST events and their durations according to annotation protocols A, B, and C, and numbers of normal and abnormal heart beats)</li>\r\n\t<li>s<em>nnnnn</em>_fin.dmy (time series of &quot;fine&quot; diagnostic and morphology parameters obtained on average heart beats)</li>\r\n\t<li>s<em>nnnnn</em>_raw.dmy (time series of &quot;raw&quot; (resampled - 0.5 samples/sec - and smoothed) diagnostic and morphology parameters)</li>\r\n\t<li>s<em>nnnnn</em>_1.sta (ST annotation markers according to annotation protocol A)</li>\r\n</ul>\r\n\r\n<p>The last three of these files are contained within the .tsr.zip files in the LTST DB directory on PhysioNet (or on the &quot;Subset&quot; CD-ROM). Download the .tsr.zip file and unpack it using a command such as:</p>\r\n\r\n<blockquote>\r\n<p>unzip s20011.tsr.zip</p>\r\n</blockquote>\r\n\r\n<p>In addition, you will need copies of semia.opt (a text file containing SEMIA&#39;s options) and semia.hlp (a text file containing on-line help for SEMIA) in the current working directory, as noted above.</p>\r\n\r\n<p>Run SEMIA by typing &quot;semia&quot;. Click on the &quot;Help&quot; button to view SEMIA&#39;s on-line manual. To open a record, click on &quot;Open&quot;, then enter the record name (s<em>nnnnn</em> only; do not include .hea or any other suffix in the record name). Depending on the speed of your system, it may take up to a minute for SEMIA to load the data after you click &quot;OK&quot;.</p>\r\n\r\n<p>Once the data have been loaded, several buttons that were initially inactive become available for use. Each of them ( &quot;Lead0&quot;, &quot;Lead1&quot;, &quot;Lead2&quot;, &quot;Data&quot;, and &quot;KL&quot;) opens a window when clicked. (&quot;Lead2&quot; remains inactive unless you have opened a record with 3 ECG signals.)</p>\r\n\r\n<ul>\r\n\t<li>The &quot;Lead&quot; windows display time series of diagnostic parameters (raw and fine ST level functions, raw and fine ST slope functions, raw linearly interpolated ST reference functions, raw ST deviation functions, raw and fine heart rate functions, and annotated ST episodes) and ST segment annotations according to annotation protocol A of the LTST DB.\r\n\t<p>Fine time series or functions are those obtained on average heart beats after noise detection during preprocessing phase. Raw time series or functions are those after resampling and smoothing of fine functions.</p>\r\n\r\n\t<p>ST segment annotations are: global reference, local references that define the ST reference function, ST segment annotations indicating ischemic and heart-rate related ST episodes (beginnings, extrema, ends), axis shift annotations, conduction change annotations, noise annotations, and annotations indicating unreadable intervals (beginnings, ends).</p>\r\n\r\n\t<p>Three different display modes for &quot;Lead&quot; windows are possible:</p>\r\n\r\n\t<ul>\r\n\t\t<li>Unsubtracted mode displaying ST level function (linearly interpolated ST reference function is not subtracted from the ST level function). In this mode, the active reference to compare ST segment waveforms is the global reference annotation.</li>\r\n\t\t<li>Unsubtracted mode displaying ST level function (linearly interpolated ST reference function is not subtracted from the ST level function). In this mode, the active reference to compare ST segment waveforms is a local reference annotation.</li>\r\n\t\t<li>Subtracted mode displaying ST deviation function (linearly interpolated ST reference function is subtracted from the ST level function to form the ST deviation function). In this mode, the active reference to compare ST segment waveforms is the global reference annotation</li>\r\n\t</ul>\r\n\r\n\t<p>The ECG signal corresponding to current active reference annotation is displayed in the upper part of the &quot;Data&quot; window.</p>\r\n\r\n\t<p>Time series displayed in the &quot;Lead&quot; windows can be examined by pointing them using mouse cursor or setting the <strong>Marker</strong> at the time instance of interest. The corresponding ECG signal is displayed in the lower part of the &quot;Data&quot; window.</p>\r\n\r\n\t<p>ST segment annotations can be examined using the <strong>Exm</strong> option. The examined ST annotation becomes the currently active annotation, and its corresponding ECG signal is displayed in the lower part of the &quot;Data&quot; window as well.</p>\r\n\r\n\t<p>The time scale may be adjusted to permit between 1 minute and 96 hours of data to be seen at once. Time series from &quot;other&quot; ECG leads may be overlaid in each &quot;Lead&quot; window.</p>\r\n\t</li>\r\n\t<li>The &quot;Data&quot; window displays the ECG signal corresponding to the time of the active reference annotation in the upper portion of the window, and that corresponding to the time of the current active annotation or marker in the lower portion of the window. These two ECG waveforms may be overlaid. A variety of scales may be selected for comparing ST segment morphologies. The time scale may be adjusted to permit between 1 and 60 seconds of data to be seen at once.\r\n\t<p>The center heart beat in each ECG trace is the beat average over the chosen time window. ECG signals from &quot;other&quot; ECG leads may be overlaid.</p>\r\n\t</li>\r\n\t<li>The &quot;KL&quot; window displays time series of morphology (waveform shape) parameters. Two sets of parameters (for the ST segment and the QRS complex) can be displayed; the parameters are coefficients of a Karhunen-Lo&egrave;ve transform (principal components).\r\n\t<p>The ST segment or QRS complex distance function (Mahalanobis distance function) can be overlaid in the KL window.</p>\r\n\t</li>\r\n</ul>\r\n\r\n<h3>References</h3>\r\n\r\n<ol>\r\n\t<li>Franc Jager, George B. Moody, Alessandro Taddei, Gorazd Antolic, Michele Emdin, Ales Smrdel, Boris Glavic, Carlo Marchesi, and Roger G. Mark. A Long-Term ST Database for Development and Evaluation of Ischemia Detectors. <em>Computers in Cardiology 1998</em>, pp. 301-304, IEEE Press. ISSN 0276-6547.</li>\r\n\t<li>Franc Jager, Alessandro Taddei, Michele Emdin, Gorazd Antolic, Roman Dorn, George B. Moody, Boris Glavic, Ales Smrdel, M Varanini, Mitja Zabukovec, Simone Bordigiago, Carlo Marchesi, and Roger G. Mark. The Long-Term ST Database: A Research Resource for Algorithm Development and Physiologic Studies of Transient Myocardial Ischemia. <em>Computers in Cardiology 2000</em>, pp. 841-844. IEEE Press. ISSN 0276-6547.</li>\r\n</ol>",
    "doi": "",
    "version": "3.0.1",
    "resource_type": 1,
    "publish_date": "2002-10-30",
    "citation": "",
    "citation_url": "",
    "contact_name": "Franc Jager",
    "contact_affiliations": "University of Ljubljana",
    "contact_email": "franc.jager@fri.uni-lj.si"
  }
},
{
  "model": "project.legacyproject",
  "pk": 112,
  "fields": {
    "title": "rddata",
    "slug": "rddata",
    "abstract": "<pre>\r\nThis program reads ECG data which are saved in MIT format 212.</pre>",
    "full_description": "<p>This program reads ECG data which are saved in MIT format 212.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2003-02-27",
    "citation": "",
    "citation_url": "",
    "contact_name": "Robert Tratnig",
    "contact_affiliations": "Vorarlberg University of Applied Sciences",
    "contact_email": "rtratnig@gmx.at"
  }
},
{
  "model": "project.legacyproject",
  "pk": 113,
  "fields": {
    "title": "Data Chromatix",
    "slug": "dchromatix",
    "abstract": "<p>Analysis of biomedical time series plays a key role in clinical management and basic investigation. However, most conventional monitors streaming data in real-time show only the most recent values, not referenced to past dynamics. The proposed visualization method (termed &ldquo;data chromatix&rdquo;) was developed to address this challenge by bringing memory of the system&rsquo;s past behavior into the current display window.</p>\r\n\r\n<p>The function DataChromatix.m (version 1.0) assigns a color to each data point of a time series. The color is determined by the values of a normalized histogram (estimated probability density function) computed from a pre-selected segment of the data. The algorithm receives the time series as input and generates a video of its colorized version as it would look on a typical monitor display, as well as a static graph of the entire colorized signal.</p>",
    "full_description": "<h3>Software Description</h3>\r\n\r\n<p>Analysis of biomedical time series plays a key role in clinical management and basic investigation. However, most conventional monitors streaming data in real-time show only the most recent values, not referenced to past dynamics. The proposed visualization method (termed &ldquo;data chromatix&rdquo;) was developed to address this challenge by bringing memory of the system&rsquo;s past behavior into the current display window.</p>\r\n\r\n<p>The function DataChromatix.m (version 1.0) assigns a color to each data point of a time series. The color is determined by the values of a normalized histogram (estimated probability density function) computed from a pre-selected segment of the data. The algorithm receives the time series as input and generates a video of its colorized version as it would look on a typical monitor display, as well as a static graph of the entire colorized signal.</p>\r\n\r\n<p>The algorithm has the following parameters:</p>\r\n\r\n<ul>\r\n\t<li>the memory and colorization window lengths</li>\r\n\t<li>the shift (s)</li>\r\n\t<li>the histogram bin size</li>\r\n\t<li>the number of colors (c) in the chromatic map (Fig. 1).</li>\r\n</ul>\r\n\r\n<p>Figure 1 shows: Memory window and colorization window at a given time tC and at the following time instant tC+s. Both windows are shifted to the right by the shift s. Adapted from (1).</p>\r\n\r\n<p>At each step, a normalized histogram of the data points in the memory window is computed. Then, the interval [0,1] is divided into c adjacent intervals, and each interval is assigned a color. If the jet color-map is used, the interval [0,1/c) corresponds to dark red and the interval ((c-1)/c,1] corresponds to dark blue. Subsequently, each data point in the colorization window is assigned the color of the histogram bin into which it falls. Finally, the colorization window is advanced by the shift, s, and the memory window is either extended or advanced by the same amount (Fig. 2).</p>\r\n\r\n<p>Figure 2 shows: Schematic illustration of the colorization algorithm: the histogram of the time series (left panel) is colorized according to the bins height. Each point of the time series (right panel) is then colorized according to the bin it belongs to. Adapted from (1).</p>\r\n\r\n<p>This colorization algorithm is intended to facilitate analysis of physiologic and non-physiologic time series. Future studies will help assess its utility.</p>\r\n\r\n<p>The function has been tested on MATLAB R2014a, R2014b and R2015a.</p>\r\n\r\n<h3>Sample Input</h3>\r\n\r\n<p>Mandatory inputs to the function are:</p>\r\n\r\n<ul>\r\n\t<li>The time series to be colorized</li>\r\n\t<li>The units to show on the x and y axis</li>\r\n\t<li>The length of the window to display in the video</li>\r\n\t<li>The shift</li>\r\n</ul>\r\n\r\n<p>Optional inputs to the function are:</p>\r\n\r\n<ul>\r\n\t<li>The length of the memory window (default from the beginning of recording to the end of the colorization window)</li>\r\n\t<li>The length of the colorization window (default equal to the display window)</li>\r\n\t<li>The number of bins of the histogram (default determined by means of Friedman-Diaconis rule)</li>\r\n\t<li>The number of colors in the color-map (default = 64)</li>\r\n\t<li>The smoothing parameter for the histogram (default = 10)</li>\r\n\t<li>The data sampling frequency (default = 1 Hz)</li>\r\n\t<li>The name of the video (if = 0 does not create the video, default = &lsquo;Myvideo&rsquo;)</li>\r\n\t<li>A flag for data time format, when time units are seconds (if =1, the format is mm:ss, if =0 the format is s, default = 0)</li>\r\n\t<li>The desired color-map (default jet)</li>\r\n</ul>\r\n\r\n<p>Along with the function, we provide two examples that employ a fetal heart rate time series from the <a href=\"https://physionet.org/physiotools/dchromatix/physiobank/database/ctu-uhb-ctgdb/\">CTU-UHB Intrapartum Cardiotocography Database</a> on PhysioNet, one using a memory window starting from the beginning of the recording, the other using a moving memory window of fixed length. Please note that for loading the time series, the MATLAB version of the wfdb library (<a href=\"https://physionet.org/physiotools/dchromatix/physiotools/matlab/wfdb-app-matlab/\">http://physionet.org/physiotools/matlab/wfdb-app-matlab/</a>) must be installed.</p>\r\n\r\n<h3>Acknowledgments</h3>\r\n\r\n<p>This package was developed at the Wyss Institute at Harvard by A. Burykin, S. Mariani, T. Silva and T. Henriques.</p>\r\n\r\n<p>Users of our software should cite: (1) Burykin A*, Mariani S*, Henriques T, Silva T, Schnettler W, Costa MD**, Goldberger AL**. <a href=\"http://www.ncbi.nlm.nih.gov/pubmed/26012777\">&ldquo;Remembrance of time series past: simple chromatic method for visualizing trends in biomedical signals.&rdquo;</a> <em>Physiol Meas</em> 2015;36(7):N95.</p>\r\n\r\n<p>* Joint first authors<br />\r\n** Joint senior authors</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2015-11-09",
    "citation": "Burykin A, Mariani S, Henriques T, Silva T, Schnettler W, Costa MD, Goldberger AL. \u201cRemembrance of time series past: simple chromatic method for visualizing trends in biomedical signals.\u201d Physiol Meas 2015;36(7):N95.",
    "citation_url": "http://www.ncbi.nlm.nih.gov/pubmed/26012777",
    "contact_name": "PhysioNet Support",
    "contact_affiliations": "MIT",
    "contact_email": "webmaster@physionet.org"
  }
},
{
  "model": "project.legacyproject",
  "pk": 114,
  "fields": {
    "title": "Multiscale Poincare Plots",
    "slug": "mpp",
    "abstract": "<p>Poincar&eacute; delay maps are widely used in the analysis of cardiac interbeat interval (RR) dynamics. To facilitate visualization of the structure of these complex time series, we introduced a methodology called multiscale Poincar&eacute; (MSP) plots.</p>",
    "full_description": "<h3>Description</h3>\r\n\r\n<p>Poincar&eacute; delay maps are widely used in the analysis of cardiac interbeat interval (RR) dynamics. To facilitate visualization of the structure of these complex time series, we introduced a methodology called multiscale Poincar&eacute; (MSP) plots.</p>\r\n\r\n<p>Briefly, the function <code>MsPplots.m</code> (version 1.0) starts with the original time series and employs a coarse-graining procedure to create a set of time series, each of which represents the system&rsquo;s dynamics on a different time scale. Next, Poincar&eacute; (delay) plots are constructed (using the function <code>dscatter.m</code> by Robert Henson) for the original and the coarse-grained time series. Finally, as an optional adjunct, color can be added to each point to represent its normalized frequency.</p>\r\n\r\n<p>The functions have been tested on Matlab R2010b, R2014b and R2015a on April 11 2016.</p>\r\n\r\n<h3>Usage</h3>\r\n\r\n<p>Inputs to the <code>MsPplots.m</code> function are:</p>\r\n\r\n<ul>\r\n\t<li>The time series vector with one column (mandatory)</li>\r\n\t<li>The number of time scales (integer; default: scales = 12)</li>\r\n\t<li>Poincar&eacute; plots from scale 1 to scales by scstep. (integer; default: scstep = 1)</li>\r\n\t<li>The number of rows in the plot montage (integer; default: nrwo = 3)</li>\r\n\t<li>The number of columns in the plot montage (integer; default: ncol = 4)</li>\r\n\t<li>A option that allows to save the final figure (boolean; default: 1)</li>\r\n\t<li>The name of the figure to be saved (default: Figure1.png)</li>\r\n</ul>\r\n\r\n<p>Also provided, are two example scripts that employ deidentified RR time series from two sources: one from the database for Chaos <a href=\"https://physionet.org/challenge/chaos/\" target=\"_blank\">Is the Normal Heart Rate Chaotic?</a> and the other from the <a href=\"https://physionet.org/physiobank/database/nsr2db\" target=\"_blank\">Normal Sinus Rhythm RR Interval Database</a>, both available at PhysioNet.</p>\r\n\r\n<p>The first example script requires the text file <code>n2-filtered</code> included in this directory, and the second one requires the <a href=\"http://physionet.org/physiotools/matlab/wfdb-app-matlab/\" target=\"_blank\">WFDB Matlab toolbox</a> to access data from Physiobank.</p>\r\n\r\n<h3>Licensing</h3>\r\n\r\n<p>The helper function <code>dscatter.m</code> is written by a separate author and is covered by the BSD License under Mathsworks. The rest of the software in this directory is licensed under the GNU Public License 3.</p>\r\n\r\n<h3>Contributors</h3>\r\n\r\n<p>The Multiscale Poincare Plot (MSP) package was developed by Teresa S. Henriques, Sara Mariani and Anton Burykin. A detailed description can be found in the citation.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2016-04-12",
    "citation": "Henriques TS, Mariani S, Burykin A, Rodrigues F, Silva TF, Goldberger AL, Multiscale Poincar\u00e9 plots for visualizing the structure of heartbeat time series, BMC Medical Informatics and Decision Making. 2016 Feb 9;16(1):1.",
    "citation_url": "http://bmcmedinformdecismak.biomedcentral.com/articles/10.1186/s12911-016-0252-0",
    "contact_name": "Teresa S. Henriques",
    "contact_affiliations": "Beth Israel Deaconess Medical Center",
    "contact_email": "teresasarhen@gmail.com"
  }
},
{
  "model": "project.legacyproject",
  "pk": 115,
  "fields": {
    "title": "plt - Software for 2D Plots",
    "slug": "plt",
    "abstract": "<p><code>plt</code> is a non-interactive plotting utility originally written for Unix by Paul Albrecht. <code>plt</code> can produce publication-quality 2D plots in PostScript from easily-produced text or binary data files, and can also create screen plots under the X Window System.</p>",
    "full_description": "<h3>Software Description</h3>\r\n\r\n<p><code>plt</code> is a non-interactive plotting utility originally written for Unix by Paul Albrecht. <code>plt</code> can produce publication-quality 2D plots in PostScript from easily-produced text or binary data files, and can also create screen plots under the X Window System. Compared to most other software for 2D graphics, <code>plt</code> has several significant advantages:</p>\r\n\r\n<ul>\r\n\t<li><code>plt</code> generates compact vector PostScript output, which can be transmitted quickly yet can be resized without introducing raster artifacts.</li>\r\n\t<li><code>plt</code> works well with a wide variety of tools that create and manipulate readable text files.</li>\r\n\t<li><code>plt</code> is scriptable; if you need to make 100 plots of 100 data sets, you don&#39;t need to point and click for hours.</li>\r\n\t<li>Complex overlays and multi-part plots are easy to make, using multiple invocations of <code>plt</code> to write to a single window or page.</li>\r\n\t<li><code>plt</code> can read data from a pipe, so it can be used to observe real-time signals or the outputs of computationally intensive processes as they become available.</li>\r\n\t<li><code>plt</code> imposes no fixed limits on the number of points in a plot (even the total amount of available memory is not a constraint if the data are read from a pipe and the axis limits are pre-specified).</li>\r\n\t<li><code>plt</code> is free, open-source software that can be modified as needed for unique applications. (<code>plt</code> runs on all popular platforms, including GNU/Linux, Mac OS X, MS-Windows, and Unix.)</li>\r\n\t<li><code>plt</code> is easy to pronounce (say: P-L-T) and is almost as easy to spell :-)</li>\r\n</ul>\r\n\r\n<p>Sources for the current version of <code>plt</code> are available as a <a href=\"https://physionet.org/physiotools/plt/plt.tar.gz\"><code>gzip</code>-compressed <code>tar</code> archive</a>, or as individual files in the <a href=\"https://physionet.org/physiotools/plt/plt/\">source tree</a>. A <a href=\"https://physionet.org/physiotools/binaries/intel-linux/plt.src.rpm\">source RPM</a> and a <a href=\"https://physionet.org/physiotools/binaries/intel-linux/plt.i386.rpm\">Linux (x86) binary RPM</a> are also available, as are binaries for <a href=\"https://physionet.org/physiotools/binaries/macosx/\">Mac OS X</a> and <a href=\"https://physionet.org/physiotools/binaries/windows/\">MS-Windows</a>. The <code>plt</code> <em>Tutorial and Cookbook</em> is available in <a href=\"https://physionet.org/physiotools/plt/plt/html/\">HTML</a>, printable <a href=\"https://physionet.org/physiotools/plt/plt/doc/book.ps\">PostScript</a> and <a href=\"https://physionet.org/physiotools/plt/plt/doc/book.pdf\">PDF</a> formats, and in <a href=\"https://physionet.org/physiotools/plt/plt/doc/book.tex\">LaTeX source</a> format.</p>\r\n\r\n<h3>Contributors</h3>\r\n\r\n<p>plt was written by George B. Moody of the MIT Lab for Computational Physiology.</p>",
    "doi": "",
    "version": "2.5a",
    "resource_type": 1,
    "publish_date": "2002-11-07",
    "citation": "",
    "citation_url": "",
    "contact_name": "Benjamin Moody",
    "contact_affiliations": "MIT",
    "contact_email": "benjamin.moody@gmail.com"
  }
},
{
  "model": "project.legacyproject",
  "pk": 116,
  "fields": {
    "title": "Software for generating the PhysioBank Index",
    "slug": "pbi",
    "abstract": "<p>The software in this directory generates the <a href=\"https://physionet.org/physiobank/database/pbi/\">PhysioBank Index</a>. On the master PhysioNet server, the script <strong>make-pbi</strong> is run nightly; if any of the constituent data collections have been updated more recently than the Index, the corresponding segments of the Index are regenerated using <strong>pbindex</strong> and the Index is re-assembled by <strong>make-pbi</strong> from its segments.</p>",
    "full_description": "<h3>Software Description</h3>\r\n\r\n<p>The software in this directory generates the <a href=\"https://physionet.org/physiobank/database/pbi/\">PhysioBank Index</a>. On the master PhysioNet server, the script <strong>make-pbi</strong> is run nightly; if any of the constituent data collections have been updated more recently than the Index, the corresponding segments of the Index are regenerated using <strong>pbindex</strong> and the Index is re-assembled by <strong>make-pbi</strong> from its segments.</p>\r\n\r\n<p><strong>pbindex</strong> accepts a list of record names from its standard input, generates index entries for them based on the contents of their .hea (header) and annotation files, and writes those entries to the standard output.</p>\r\n\r\n<p>For correct operation of the PhysioBank Record Search software, the sequence of record names in the PhysioBank Index must be kept in (C locale) sorted order. <strong>make-pbi</strong> ensures that the record names are supplied to <strong>pbindex</strong> in the correct order.</p>\r\n\r\n<p>The aftypes and sigtypes files are read at run time by <strong>pbindex</strong>; they provide up-to-date maps of annotator and signal names to annotator and signal classes. For example, the signal class <strong>ECG</strong> includes signals with a variety of (lead) names, such as <strong>I</strong>, <strong>II</strong>, <strong>III</strong>, <strong>aVR</strong>, <strong>aVF</strong>, etc. These maps are updated as data collections that include new signal and annotator names are added to PhysioBank.</p>\r\n\r\n<p>This package of software can be downloaded as a <a href=\"https://physionet.org/physiotools/pbi.tar.gz\">tarball</a>, or as individual files (below).</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2012-02-06",
    "citation": "",
    "citation_url": "",
    "contact_name": "PhysioNet Support",
    "contact_affiliations": "MIT",
    "contact_email": "webmaster@physionet.org"
  }
},
{
  "model": "project.legacyproject",
  "pk": 117,
  "fields": {
    "title": "Software for searching the PhysioBank Index",
    "slug": "pbs",
    "abstract": "<p>This software provides tools for searching the <a href=\"http://physionet.org/physiobank/database/pbi/\">PhysioBank Index</a> to find records that satisfy user-defined criteria.</p>",
    "full_description": "<h3>Software Description</h3>\r\n\r\n<p>This software provides tools for searching the <a href=\"http://physionet.org/physiobank/database/pbi/\">PhysioBank Index</a> to find records that satisfy user-defined criteria. The tools include:</p>\r\n\r\n<p>pbsqs</p>\r\n\r\n<p>a stand-alone command-line tool for simple query searching</p>\r\n\r\n<p>pbsqsd</p>\r\n\r\n<p>a daemon for processing simple queries</p>\r\n\r\n<p>pbsqsc</p>\r\n\r\n<p>a command-line client for pbsqsd</p>\r\n\r\n<p><a href=\"https://physionet.org/cgi-bin/pbsearch?help_on=on\">pbsearch</a></p>\r\n\r\n<p>a web client for pbsqsd and the pbs-* plugins</p>\r\n\r\n<p>pbs-and, pbs-not, pbs-or</p>\r\n\r\n<p>a set of plugins to provide additional search functions</p>\r\n\r\n<p>The entire package can be downloaded as a <a href=\"https://physionet.org/physiotools/pbs.tar.gz\">tarball</a> or as individual files (below).</p>\r\n\r\n<p><strong>pbsqs</strong> and <strong>pbsqsd</strong> are built from the same code (in pbsqs.c; only their main() functions, defined in standalone.c and daemon.c, differ).</p>\r\n\r\n<p>The code common to <strong>pbsqs</strong> and <strong>pbsqsd</strong> reads the (flat-file) <a href=\"https://physionet.org/physiobank/database/pbi/\">PhysioBank Index</a> from a location defined as PBI_URL in pbsqs.h. Depending on whether the symbol LOCAL is defined at compilation time, PBI_URL is either</p>\r\n\r\n<pre>\r\n/home/physionet/html/physiobank/database/physiobank-index\r\n</pre>\r\n\r\n<p>or</p>\r\n\r\n<pre>\r\nhttp://physionet.org/physiobank/database/physiobank-index\r\n</pre>\r\n\r\n<p>In normal operation, the Index is read only once and is then kept in memory, so although startup time may be longer if LOCAL was not defined and the Index is read via the network, the time needed to respond to a query is unaffected by this choice.</p>\r\n\r\n<p>As noted above, <strong>pbsqs</strong> and <strong>pbsqsd</strong> interpret and execute so-called <em>simple queries</em>. Simple queries include a subject (a class of data), a relationship (e.g., equal to, greater than, etc.), and a value (a string or numeric pattern to be compared with the subject elements). For more on simple queries, see the help for <strong>pbsqs</strong> (pbsqs-help.txt) or <strong>pbsearch</strong> (help.html).</p>\r\n\r\n<p><strong>pbsqsc</strong> is a very simple Perl script (only 17 lines of code, plus comments) that can act as a client for <strong>pbsqsd</strong>. As written, <strong>pbsqsc</strong> and <strong>pbsqsd</strong> must run on the same machine, but this restriction can easily be removed by replacing localhost in <strong>pbsqsc</strong> with the hostname of the machine that is running <strong>pbsqsd</strong>. To use <strong>pbsqsc</strong>, enter a simple query in the command line, like this:</p>\r\n\r\n<pre>\r\npbsqsc &#39;age &gt;= 85&#39;\r\n</pre>\r\n\r\n<p>Note the use of quotation marks to protect characters such as &#39;&gt;&#39; from the shell. The results of the query appear on the standard output; in most cases, you will want to capture the output in a file, or redirect it into a pipe, as in these examples:</p>\r\n\r\n<pre>\r\npbsqsc &#39;ecg-3 ~ 24:0:0&#39; &gt;24-hour-ecgs\r\npbsqsc &#39;age = 0&#39; | more\r\n</pre>\r\n\r\n<p>The first of these uses the &#39;~&#39; (&quot;similar&quot;) comparison to select records containing 3 or more ECG signals, at least 24 hours in duration, and to save the list of results in a file named &#39;24-hour-ecgs&#39;. The second selects records of infants and passes the results to <strong>more</strong>, which displays them a page at a time.</p>\r\n\r\n<p><strong>pbsearch</strong> is a CGI perl script intended to be run by a web server, so that you can interact with it using your web browser. Go to <a href=\"http://physionet.org/cgi-bin/pbsearch\">http://physionet.org/cgi-bin/pbsearch</a> to try it out. As for <strong>pbsqsc</strong>, it must run on the same machine as <strong>pbsqsd</strong> unless you edit it to replace localhost. Unlike <strong>pbsqsc</strong>, however, you can feed results of simple query searches to the plugins to answer more complex queries. For example, you can select two or more sets of results and find results belonging to all sets (logical <em>and</em>), or any sets (logical <em>or</em>).</p>\r\n\r\n<p>Use Makefile and a <a href=\"http://www.gnu.org/software/make/\" target=\"other\">make</a> utility to automate the process of building and installing this software. A PhysioNet mirror has all of the required prerequisites. If you are not installing onto a PhysioNet mirror, you will need to have installed the <a href=\"https://physionet.org/physiotools/wfdb.shtml\">WFDB software package</a>, <a href=\"https://physionet.org/physiotools/libcurl/\">libcurl</a>, and (for the standalone tool only) <a href=\"http:/www.gnu.org/s/readline/\" target=\"other\">libreadline</a>. To install and use <strong>pbsearch</strong>, you will also need to have <a href=\"http://httpd.apache.org\" target=\"other\">Apache <strong>httpd</strong></a> configured to run CGI perl scripts in /home/physionet/cgi-bin/. It is recommended that you make a local copy of the PhysioBank Index in the default location (see above), and this is necessary if your machine does not have a network connection. If you have all of the prerequisites, run the command (in this directory):</p>\r\n\r\n<pre>\r\nmake install\r\n</pre>\r\n\r\n<p>to install this entire package, and run the command:</p>\r\n\r\n<pre>\r\nmake check\r\n</pre>\r\n\r\n<p>to perform a quick test of its basic functionality. If you want <strong>pbsqsd</strong> to start automatically whenever the computer is rebooted, you must set up this behavior manually (on Linux, typically by adding <strong>pbsqsd</strong> to /etc/rc.local).</p>\r\n\r\n<p>To force the server to reread the index if it has been updated, send it a SIGHUP, for example, by running the command</p>\r\n\r\n<pre>\r\nkillall -HUP pbsqsd\r\n</pre>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2012-02-06",
    "citation": "",
    "citation_url": "",
    "contact_name": "PhysioNet Support",
    "contact_affiliations": "MIT",
    "contact_email": "webmaster@physionet.org"
  }
},
{
  "model": "project.legacyproject",
  "pk": 118,
  "fields": {
    "title": "record - An application for capturing data from an HP CMS (Merlin) monitor",
    "slug": "record",
    "abstract": "<p>record is an MS-DOS application that determines what signals and measurements are available from a Hewlett-Packard (Agilent/Philips) Merlin (a.k.a. CMS or Component Monitoring System) patient monitor, and then logs all of the available data to disk continuously until it is stopped by the user.</p>",
    "full_description": "<h3>record: an application for capturing data from an HP CMS (Merlin) monitor</h3>\r\n\r\n<p>George B. Moody (<a href=\"mailto:george@mit.edu\">george@mit.edu</a>)</p>\r\n\r\n<p><strong>Warning: Although you are welcome to use record in your own projects if you are able to do so, be aware that the necessary hardware may be both expensive and difficult or impossible to obtain, and that the task of recompiling record for use with currently manufactured hardware is complicated by the need for proprietary libraries and compilers that may also be both expensive and difficult or impossible to obtain. Since I no longer have the CMS monitor that I used for development of record, I am not able to test alternative hardware or software configurations; you are on your own! </strong></p>\r\n\r\n<p><strong>A (non-free) alternative to record is the <a href=\"http://194.95.45.44/~xlns/dataplore/monitoring.html\" target=\"other\">Data Acquisition Interface for CMS Patient Monitors</a> available as an optional module for <a href=\"http://www.ixellence.com/\" target=\"other\">Dataplore</a> (proprietary software for analysis of signals and time series, available for GNU/Linux or MS-Windows). This software allows the use of a single serial port at up to 38400 baud, which limits the number of signals that can be recorded from the monitor. A newer version of this software, <a href=\"http://194.95.45.44/~xlns/trend/trend_sw_eng.html\" target=\"other\">TrendFace</a>, is specified to work at 115200 baud, allowing more signals to be recorded simultaneously. </strong></p>\r\n\r\n<h3>About record</h3>\r\n\r\n<p>record is an MS-DOS application that determines what signals and measurements are available from a Hewlett-Packard (Agilent/Philips) Merlin (a.k.a. CMS or Component Monitoring System) patient monitor, and then logs all of the available data to disk continuously until it is stopped by the user. The monitor contains up to eight plug-in modules for monitoring physiologic signals (ECG, respiration, pressures, temperature, gases, etc.), and can be reconfigured by the user by inserting or removing modules at any time without restarting the monitor. record, however, determines only which signals and measurements are available at the time it is started, and does not attempt to keep track of modules added later. Signals and measurements are considered available only if the associated module and the transducer are connected and the parameter is turned on; note that a signal or measurement need not be displayed on the monitor screen to be available (in fact, record cannot determine what subset of available parameters is being displayed).</p>\r\n\r\n<p>In order to use record, the Merlin monitor must be equipped with at least one, and ideally two, serial interface cards. These are available as <em>options</em> from HP (Agilent, now Philips Medical Systems; most Merlin monitors are not equipped with these cards). Each card supports two serial lines, one at speeds up to 38400 baud, and the second at speeds up to 9600 baud (other possibilities are described below).</p>\r\n\r\n<p>I wrote record in order to gather real-time patient data for the <a href=\"https://physionet.org/physiobank/database/mimicdb/\">MIMIC (Multi-parameter Intelligent Monitoring for Intensive Care) Database project</a>. The currently completed portion of the MIMIC Database (about 200 patient-days) is freely available via PhysioNet.</p>\r\n\r\n<p>If you find record useful, please let me know how you are using it, by e-mail to <a href=\"mailto:george@mit.edu\">george@mit.edu</a>.</p>\r\n\r\n<h3>Obtaining record</h3>\r\n\r\n<p>You may download record in precompiled form or in source form from this site. The precompiled version requires a DigiBoard PC/4e or compatible `smart&#39; serial card (recommended, see below). With minor modifications to the sources, you can compile a version of record that can be used with the PC&#39;s standard serial ports (not recommended in most cases, since they cannot keep up with the Merlin&#39;s output) or with other smart serial cards. (Note that you should not do this just to save money -- in order to recompile the sources, you will need to buy subroutine libraries from Greenleaf Software, as well as Borland or Turbo C if you don&#39;t have one of these already; the DigiBoard card will be less expensive if you can obtain one.)</p>\r\n\r\n<p>If you wish to use the precompiled version, download <a href=\"https://physionet.org/physiotools/record/record.exe\"> record.exe</a> and <a href=\"https://physionet.org/physiotools/record/record.ini\">record.ini</a>, and save both of them in a directory somewhere in your MS-DOS execution path.</p>\r\n\r\n<h3>Compiling record</h3>\r\n\r\n<p>It is not necessary to compile record unless you wish to modify it.</p>\r\n\r\n<p>record has been successfully compiled using Turbo C/C++ 3.0 and Borland C/C++ 4.0. Earlier versions of these compilers may work as well, but will require recompiling the external libraries as well as the program source. It should be fairly easy to port record to Microsoft C (all of the libraries it uses can be compiled by Microsoft C/C++ compilers without changes; this program uses Borland/Turbo-specific functions for screen output, for far heap memory allocation, and for checking the available disk space, but close equivalents are provided with Microsoft C).</p>\r\n\r\n<p>To recompile record using Borland or Turbo make, follow the instructions in the <a href=\"https://physionet.org/physiotools/record/src/makefile\">makefile</a>. (You should download not only <a href=\"https://physionet.org/physiotools/record/src/record.c\">record.c</a>, but also all of the other files within the <a href=\"https://physionet.org/physiotools/record/src\">src</a> directory, in order to do this.) record makes use of three external libraries:</p>\r\n\r\n<ul>\r\n\t<li>The <em>MECIF library</em> (mecif.lib), version A.01.10, originally available as Part No. M1046-9220C (Dec. 1992) from Hewlett-Packard (Agilent Heathcare Solutions Group, now part of Philips Medical Systems). This library contains functions that support serial communication between the PC and the HP CMS monitor. This software package is provided with the CMS RS-232 card, on an MS-DOS diskette (containing the library itself in source and binary forms, various header (.h) files, a demonstration program, and documentation files), and is accompanied by a manual titled &quot;<em>HP Component Monitoring System RS-232 Computer Interface Programming Guide (Option #J13)</em>&quot;, referred to below as the <em>HP Guide</em>. A <a href=\"https://physionet.org/faq.shtml#tar-gz\">gzip-compressed tar archive</a> of the contents of the MS-DOS diskette may be downloaded from <a href=\"https://physionet.org/physiotools/record/mecif.tar.gz\">here</a>, by permission of the author and Philips Medical Systems. The original version of the MECIF library uses the standard PC serial ports, which are not suitable for high-bandwidth applications. To produce an enhanced version that can use a `smart&#39; serial interface such as the Digiboard PC/4e (recommended), copy the MECIF library sources from the MS-DOS diskette to a directory on your hard drive, then copy the <a href=\"https://physionet.org/physiotools/record/src/mecif/makefile\">makefile</a> and <a href=\"https://physionet.org/physiotools/record/src/mecif/rs232g.c\">rs232g.c</a> into the same directory, then follow the instructions in the makefile to build the library.</li>\r\n\t<li>The <em>Greenleaf CommLib library</em> (gfcl.lib), version 4.0, available from <a href=\"http://www.greenleafsoftware.com/\" target=\"other\">Greenleaf Software</a>, sysFire LLC, Forest Park Gardens, Suite 309, 9550 Forest Lane, Dallas, TX 75243 USA (telephone: 1 800 523 9830 (USA/Canada only), or +1 214 349 3005). This library contains functions invoked by rs232g.c (see above) that support low-level serial communications using many different types of PC serial ports, including &quot;smart&quot; serial cards; this program does not call any CommLib functions directly. The package includes MS-DOS diskettes (containing the library in source form, various header files, and example programs), and a manual titled &quot;<em>Greenleaf CommLib 4.0 Reference</em>&quot;, referred to in record.c as the <em>CommLib manual</em>. The sources can be compiled by many popular C compilers, including those from Borland and Microsoft; specify the primary compiler to be used when ordering CommLib, and the package will also include precompiled versions of the library for use with that compiler and various memory models. Be sure to use gfcl.lib (the large memory model version) with record. CommLib is required in order to use the enhanced version of the MECIF library described above; it is not required in order to use the Hewlett-Packard version. Although executable programs built using CommLib may be distributed without restriction, gfcl.lib may not be.</li>\r\n\t<li>The <em>WFDB library</em> (<a href=\"https://physionet.org/physiotools/record/src/dbl.lib\">dbl.lib</a>), version 9.0 or later, provided here in C source form and in binary form for Turbo C/C++ 3.0 and Borland C/C++ 4.0. This library includes functions that record uses to create files of received data in a compact, portable, binary format. The <a href=\"https://physionet.org/physiotools/dbpg/\"> <em>WFDB Programmer&#39;s Guide</em></a>, referred to in record.c as the <em>DB Guide</em>, describes how to use this library. Be sure to use dbl.lib (the large memory model version) with record.</li>\r\n</ul>\r\n\r\n<p>It is possible to compile record using the version of mecif.lib provided on the HP diskette and without using CommLib, and to use it with the standard PC serial ports (COM1 and COM2). The use of the revised MECIF library as described above, the CommLib library, and a `smart&#39; serial card is strongly recommended as an alternative, permitting reliable operation at top speed while logging data to local drives. Without the use of CommLib and a smart serial card, record is limited to logging data to network drives. (Characters arrive at 260 microsecond intervals on each of the 38400 baud serial lines. Serial interrupts are locked out for several milliseconds during local disk writes. Without a smart card, characters that arrive while writing to the disk are lost. Although the MECIF protocol incorporates limited error detection, there is no provision for error correction or retransmission of lost messages. Lacking a smart serial card, it is possible to log data to a network drive, since the network interface accepts data at PC bus speeds, avoiding the local disk&#39;s interrupt latency.) This operating mode has been tested using a 3Com Etherlink III Ethernet interface card, with Sun PC-NFS networking software used to access the network drives.</p>\r\n\r\n<p>The executable version of record provided here has been compiled for use with the DigiBoard PC/4e (or PC/8i) board, manufactured by <a href=\"http://www.digiboard.com/\" target=\"other\">Digi International</a>, 11001 Bren Road East, Minnetonka, MN 55343 USA (telephone: 1 800 344 4273 (USA/Canada only) or +1 952 912 3444). Other serial devices supported by CommLib (hence the revised MECIF library) include smart cards from Arnet and Star Gate; a one-line change in rs232g.c is required in order to recompile a version of mecif.lib for use with any of these cards. Unfortunately, none of the smart serial cards supported by CommLib is still manufactured, so you will need to find a used card (frequently offered for sale on www.ebay.com) or else find a newer model that is supported by CommLib, or else devise a way to use another smart serial card without the use of CommLib. If you succeed, please <a href=\"mailto:george@mit.edu?subject=smart serial card for record\"> tell me about it</a>. The enhanced MECIF library also incorporates more robust error-recovery that avoids the need to reboot the monitor in the event of interrupted transmissions, a problem that occurs regularly when using the original version of mecif.lib from the diskette.</p>\r\n\r\n<h3>Running record</h3>\r\n\r\n<p>To use record:</p>\r\n\r\n<ol>\r\n\t<li>Connect the HP monitor to the PC using standard serial printer cables (see the wiring diagram on page 2-2 of the <em>HP Guide</em>). Up to four lines may be used.</li>\r\n\t<li>Turn on both the monitor and the PC.</li>\r\n\t<li>Run the program by typing\r\n\t<pre>\r\n\trecord\r\n</pre>\r\n\tor\r\n\r\n\t<pre>\r\n\trecord <em>FILE</em>\r\n</pre>\r\n\t(where <em>FILE</em> is the name of a configuration file such as <a href=\"https://physionet.org/physiotools/record/record.ini\">record.ini</a>).</li>\r\n\t<li>Enter the data requested (patient name and ID). Note that this information is recorded only in the index file (see below), and not in the logged data files.</li>\r\n\t<li>Once recording has begun, use the monitor&#39;s controls to generate a set of calibration pulses. These will be needed to calibrate the recorded signals later on.</li>\r\n</ol>\r\n\r\n<p>record checks the available serial lines and sets the speeds of the PC&#39;s ports to match those of the monitor. The best results will be obtained using the highest available speeds, permitting the maximum amount of data to be retrieved. If the total available bandwidth is insufficient to permit the monitor to transmit all signals and measurements, record attempts to obtain as many signals as possible, and then as many measurements as possible using the remaining bandwidth. If record is used routinely in a setting in which the bandwidth is insufficient, it may be worth modifying the code to permit the user to select which signals and measurements are to be recorded.</p>\r\n\r\n<p>The monitor may have one or two RS232 serial cards installed in it (two are necessary in order to provide suffficient bandwidth to acquire all signals in most cases). Each RS232 card provides two ports. The lower ports are designated ports 1 and 3, and support communications at 9600, 19200, and 38400 baud; the upper ports (2 and 4) are restricted to 9600 baud (or 19200 baud if the lower port on the same card is not running at 38400 baud). The TX/RX order should be <em>Low/High</em> for all connected ports. These settings cannot be changed from the PC; refer to the <em>HP Guide</em> (pp. 2-4 to 2-9) for information on changing them using the monitor&#39;s controls.</p>\r\n\r\n<p>The following baud rate settings are recommended (choose the first set that works from the list):</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Port 1</th>\r\n\t\t\t<th scope=\"col\">Port 2</th>\r\n\t\t\t<th scope=\"col\">Port 3</th>\r\n\t\t\t<th scope=\"col\">Port 4</th>\r\n\t\t\t<th scope=\"col\">Description</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>38400</td>\r\n\t\t\t<td>9600</td>\r\n\t\t\t<td>38400</td>\r\n\t\t\t<td>9600</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n* maximum bandwidth</pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>38400</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>38400</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n** maximum bandwidth with only two lines</pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>19200</td>\r\n\t\t\t<td>19200</td>\r\n\t\t\t<td>19200</td>\r\n\t\t\t<td>19200</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n* use with modems or long cables if 38400 baud can&#39;t be used</pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>38400</td>\r\n\t\t\t<td>9600</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\nmaximum bandwidth with only one RS232 card</pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>38400</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\nmaximum bandwidth with only one line</pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>* Note that the revised MECIF library must be used in order to make use of three or four ports (the standard library supports only two). In some monitor configurations, the use of three or four ports fails for unknown reasons (apparently not related to record or to the PC hardware). For this reason, the default configuration (**) uses only ports 1 and 3.</p>\r\n\r\n<p>Any of the first three choices provides sufficient bandwidth in most cases.</p>\r\n\r\n<p>If you are using a version of record compiled for use with a DigiBoard PC/4e or PC/8i serial card, connections should be made using ports P1, P2, P3, and P4 (which should be configured as COM5, COM6, COM7, and COM8) of the DigiBoard interface, and the DigiBoard driver (currently xidos5.sys) should be loaded. Otherwise, use the PC serial ports COM1 and COM2 (depending on your hardware, COM3 and COM4 may or may not be usable as well). It makes no difference which PC port is connected to which monitor port.</p>\r\n\r\n<p>For details on setting options in record, see <a href=\"https://physionet.org/physiotools/record/record.ini\"> record.ini</a>, which is a sample configuration file. record sets its options using the first available source from the following:</p>\r\n\r\n<ol>\r\n\t<li>a file named on the command line (for example, record myconfig.ini)</li>\r\n\t<li>a file named in the environment variable RCONFIG (for example, by the command `set RCONFIG=c:\\record\\myconfig.ini&#39;)</li>\r\n\t<li>a file named record.ini found in the same directory as record.exe</li>\r\n\t<li>the compiled-in defaults shown in <a href=\"https://physionet.org/physiotools/record/src/record.c\">record.c</a></li>\r\n</ol>\r\n\r\n<p>Thus a file named on the command line takes precedence over a file named in RCONFIG, and so on.</p>\r\n\r\n<h3>About the output</h3>\r\n\r\n<p>Each time it runs, record reads and updates an `index file&#39;. The index file may be named in the configuration file (by default, it is record.idx in the same directory as record.exe). The index file is a text file. Each line in it contains data for one run of record. The first field of each line is the run index number.</p>\r\n\r\n<p>The run index number is the name of the directory in which the log files for this run are collected (see below). By default, this directory is placed in c:\\, but any other location may be specified using the configuration file. If space on the drive containing the log directory becomes nearly exhausted, and a `spillover&#39; directory (presumably on a different drive) has been specified in the configuration file, record switches to that directory. Only one `spillover&#39; directory may be specified; if none is specified, record does not use a `spillover&#39; directory. When almost all of the available space has been used, record exits (it avoids writing on the last few blocks).</p>\r\n\r\n<p>The log files contain the data retrieved from the monitor. At regular intervals (10 minutes by default), record closes the current set of log files and opens a new set; this strategy limits the amount of data lost if there is an interruption in power or other system failure. Each set of log files is identified by a five-digit sequence number contained within the names of the files. The first three characters of the file name are the index number (modulo 1000), and the next five are the sequence number (beginning with 00001). (In the unlikely event that more than 99,999 sets of log files are created, the index number is incremented and the files continue to be generated in numerical order.) The suffix (.dat, .al, or .nu) indicates what type of data will be found in the file (sampled signals, annotations of alarms and signal connections/disconnections, or numerics). An ASCII header (.hea) file accompanies each set, and contains the date and time (from the system clock) at which the files in the set were created, along with information necessary to read the .dat and .al files using DB application programs (such as view for MS-DOS, wview for MS-Windows, and wave for Linux, SunOS, and Solaris; visit our web site to obtain these applications, or to obtain details of the file formats if you wish to write your own programs for reading record output files).</p>\r\n\r\n<p>Generally, log files of different types will have different lengths, but all log files of any given type should have approximately the same length, with the following exceptions:</p>\r\n\r\n<ul>\r\n\t<li>The last file of each type may be shorter than the others.</li>\r\n\t<li>If alarms or `inop&#39; conditions occur, the corresponding .al and .txt files will be longer than the others.</li>\r\n\t<li>If a module was removed from the monitor during the run, the log files obtained during that period may be shorter than the others.</li>\r\n\t<li>Log files open when messages were lost may be shorter than the others.</li>\r\n</ul>\r\n\r\n<p>Except for the first case, careful attention should be paid to any log files that differ significantly in length from others of the same type.</p>\r\n\r\n<p>record also logs its run-time errors in an error log (by default, record.log, in the same directory as record.exe). The error log should be consulted after each run.</p>\r\n\r\n<h3>Creating a composite (multi-segment) record from a set of output files</h3>\r\n\r\n<p>Although record saves its output in segments that are (by default) 10 minutes in length, you may wish to concatenate the segments for ease of access by other software, as we have done for the MIMIC database. This process is quite simple and fast (though the description below is a bit long), and does not require any significant additional disk space (the data files need not be copied).</p>\r\n\r\n<p>You can use other software available from PhysioNet to create a composite record from the log files generated by record. The following instructions assume that you have collected the log files in a directory named <em>NNN</em>, where <em>NNN</em> is record&#39;s `run number&#39;, and that you are running Linux (or Solaris, or SunOS); it is possible to do most of what is described below under MS-DOS or MS-Windows, with minor modifications (see the documentation available on PhysioNet, in particular the <a href=\"https://physionet.org/physiotools/wag/\">WFDB Applications Guide</a>, for details).</p>\r\n\r\n<ul>\r\n\t<li>Determine the number of segments in each record:\r\n\t<pre>\r\n        cd <em>NNN</em>\r\n        ls | tail\r\n</pre>\r\n\tThe output from `ls | tail&#39; will look something like this:\r\n\r\n\t<pre>\r\n        <em>NNN</em>00122.hea\r\n        <em>NNN</em>00122.txt\r\n        <em>NNN</em>00123.al\r\n        <em>NNN</em>00123.dat\r\n        <em>NNN</em>00123.hea\r\n        <em>NNN</em>00123.txt\r\n        <em>NNN</em>00124.al\r\n        <em>NNN</em>00124.dat\r\n        <em>NNN</em>00124.hea\r\n        <em>NNN</em>00124.txt\r\n</pre>\r\n\tNote the segment number of the last segment (124 in the example above). Use this number as shown in this command:\r\n\r\n\t<pre>\r\n        wfdbcollate <em>NNN</em> 1 124 -a al\r\n</pre>\r\n\tPay careful attention to any warnings or error messages that appear! In most cases, you will see a message of the form:\r\n\r\n\t<pre>\r\n        warning (init):\r\n         record <em>NNN</em>00XXX duration differs from that of previously opened record\r\n</pre>\r\n\twhere XXX is the segment number of the last segment. This is harmless, and may be ignored. On the other hand, if dbcollate reports that the sampling frequency is incorrect for the last segment, delete the files for the last segment (`rm *124.*&#39; in the example), and run dbcollate again (`dbcollate <em>NNN</em> 1 123 -a al&#39; in this case). This problem may occur in some cases when the last segment could not be properly finished by record.</li>\r\n\t<li>Use <a href=\"https://physionet.org/physiotools/wug/\">wave</a> to view the collated record:\r\n\t<pre>\r\n        wave -r <em>NNN</em>\r\n</pre>\r\n\t</li>\r\n\t<li>Locate the recorded calibration signals.</li>\r\n\t<li>Use wave&#39;s <em>View</em> panel to set the time scale to 125 mm/sec and the amplitude scale to 40 mm/mV; check `Markers&#39; in the top row, and choose `attached to signals&#39; from the `Show annotations&#39; menu, then click on `Redraw&#39;. Once you have found the calibration signals, enable annotation editing (using the `Edit&#39; menu button), then place `N&#39; labels (or other annotations of your choice) at matching points on the calibration pulses for each ECG signal (the pulses for the other signals can&#39;t be aligned, so ignore them). It&#39;s best to make more than one set of measurements. Now select `Analyze&#39; from wave&#39;s `File&#39; menu, and click on `List annotations&#39;.</li>\r\n\t<li>Examine the output of `rdann&#39; (it appears in the `Analysis commands&#39; window; click on `Show command window&#39; if you don&#39;t see it). It will appear something like this:\r\n\t<pre>\r\n        [08:12:02.784 01/12/1994]     2348     N    0    0    0\r\n        [08:12:02.784 01/12/1994]     2348     N    0    2    0\r\n        [08:12:02.848 01/12/1994]     2356     N    0    1    0\r\n        [08:12:03.712 01/12/1994]     2464     N    0    0    0\r\n        [08:12:03.712 01/12/1994]     2464     N    0    2    0\r\n        [08:12:03.776 01/12/1994]     2472     N    0    1    0\r\n</pre>\r\n\tEach row of output corresponds to a single annotation. The second column from the right indicates which signal each annotation is associated with (0, 1, or 2), and the column to the left of the N codes shows the exact time in samples of the annotation. In this example, there are two sets of annotations, and in each set, the signal 1 annotation occurs 8 samples later than those for signals 0 and 2. The units of skew for ECG signals are 1/4 of a sample interval; thus the skew for signal 1 is 32 (= 8 * 4). (By definition, the signal for which the calibration pulse is observed earliest has a skew of zero; this may not always be signal 0, however.) Because of the way the HP monitor transmits data, we can be quite certain that all skews will be multiples of 16; the largest skew I have observed is 64. In most cases, two signals are already synchronized and only the third has a non-zero skew, most often either 16 or 32 as in this example.</li>\r\n\t<li>Determine the skews for each ECG signal, then exit from wave and run skewedit to correct for the measured skews. In this example, this would be done by\r\n\t<pre>\r\n        skewedit <em>NNN</em> 0 32 0\r\n</pre>\r\n\twhere <em>NNN</em> is the record name, and the arguments that follow it are the skews for signals 0, 1, and 2. When running skewedit, any trailing zeroes may be omitted from the argument list (thus `skewedit <em>NNN</em> 0 32&#39; is equivalent to the command above). After running skewedit, open the record again using wave and verify that you have corrected the skew properly. (Note that skewedit always sets the absolute skew, so if you need to make further adjustments, add any corrections to the previous skews.)</li>\r\n\t<li>Reopen the record using wave and calibrate any signals that can be calibrated. Locate the calibration signals. Set wave&#39;s signal list so that it includes only those signals that are to be calibrated. Mark (with `&lt;&#39; and &#39;&gt;&#39; markers) a segment that contains both the low-amplitude and the high-amplitude regions of the calibration signals. Click on `Calibrate&#39;, and answer any questions that appear in the command window. Reopen the record and check that the signals have been calibrated properly. Repeat this step as necessary.\r\n\t<p>Note that the calibration signals for ECGs are 2 mV peak-to-peak, and that the most common calibration steps for the ABP signal are 0, 30, 60, 120, and 180 mmHg (there is at least one other ABP calibration signal with usable steps of 60 and 0 mmHg only).</p>\r\n\t</li>\r\n\t<li>Clean up the directory in which you have been working:\r\n\t<pre>\r\n        rm -f <em>NNN</em>.wave*\r\n        chmod 444 *\r\n</pre>\r\n\r\n\t<p>The first of these commands removes any annotation files you created while measuring and correcting for skew, and the last command sets all of the data files to read-only mode.</p>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2003-06-09",
    "citation": "",
    "citation_url": "",
    "contact_name": "George Moody",
    "contact_affiliations": "MIT",
    "contact_email": "george@mit.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 119,
  "fields": {
    "title": "The De-Identification Software Package",
    "slug": "deid",
    "abstract": "<p>The <code>deid</code> software package includes code and dictionaries for automated location and removal of protected health information (PHI) in free text from medical records.</p>",
    "full_description": "<h3>Background</h3>\r\n\r\n<p>In the USA, the HIPAA Privacy Rule restricts exchange of medical data containing protected health information (PHI), defined as any information that might be used to identify the individual(s) from whom the data were collected. Data known to contain PHI can be shared for research purposes only under tightly controlled circumstances, typically involving data use agreements under which the researchers involved must obtain IRB or equivalent approvals for use of the data.</p>\r\n\r\n<p>By contrast, medical data that do not contain PHI are exempt from the restrictions of the HIPAA Privacy Rule and may be shared freely. The data available on PhysioNet fall into this category.</p>\r\n\r\n<p>Many of the research data sets currently being collected by PhysioNet are accompanied by PHI, and the process of removing this PHI (&quot;de-identification&quot; in the language of HIPAA, or &quot;anonymization&quot;) is tedious and error-prone. For many research projects, the cost of de-identification is a significant barrier to data sharing.</p>\r\n\r\n<p>The MIMIC II project has invested several years&#39; effort to develop and evaluate software that is capable of removing PHI from text and, where appropriate, replacing it by realistic surrogate PHI. (For example, names are replaced by fictitious names, medical record numbers by fictitious medical record numbers, dates by fictitious dates, geographic locations by other geographic locations, etc.) The MIMIC II project has contributed to PhysioNet both its deidentification software, which may be useful to other researchers needing to remove PHI from their own data, and a large corpus of text drawn from ICU nursing notes that were gathered simultaneously with the signals, trends, laboratory reports, discharge summaries and other data in the MIMIC II clinical and waveform databases.</p>\r\n\r\n<h3>Software</h3>\r\n\r\n<p>As is the case with all software available on PhysioNet, the de-identification software (<code>deid</code>) is provided in source form so that its workings can be studied, customized, and improved. This software is free software. You can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version.</p>\r\n\r\n<p>The authors of the <code>deid</code> software package are Margaret M Douglass, Li-wei H Lehman, William J Long, and Ishna Neamatullah. An experimental prototype by Jason M Levine provided useful guidance in the design of <code>deid</code>.</p>\r\n\r\n<h3>Prerequisite</h3>\r\n\r\n<p>The <code>deid</code> package requires Perl (version 5 or later), which is freely available for all popular platforms <a href=\"http://perl.org/\" target=\"other\">here</a> if you don&#39;t have it already.</p>\r\n\r\n<p>The current version of the <code>deid</code> software package was developed and tested using perl 5.8.8 and perl 5.10 on GNU/Linux (Fedora Core 10). It has also been tested on Fedora 6, 7 and 8, Ubuntu 8.04, MacOS X 10.4.5, and on MS-Windows XP.</p>\r\n\r\n<h3>Downloading and installing <code>deid</code></h3>\r\n\r\n<p>The <code>deid</code> software package can be downloaded as a single file, <code>deid-1.1.tar.gz</code>. The contents of <code>deid-1.1.tar.gz</code> unpack into a directory named <code>deid-1.1</code>, which contains the files listed below.</p>\r\n\r\n<p>The <code>deid</code> software package is command-line software that must be run in a terminal emulator (console) window.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Testing <code>deid</code></h3>\r\n\r\n<p>If you wish to test <code>deid</code>, see <em>Data: the gold-standard corpus of deidentified medical text</em> below for information on obtaining <code>id.text</code> and <code>id.res</code>. Copy <code>id.text</code> into the <code>deid-1.1</code> directory (created when <code>deid-1.1.tar.gz</code> was unpacked in the previous step), and enter that directory. Type the command</p>\r\n\r\n<blockquote>\r\n<pre>\r\nperl deid.pl id deid.config\r\n</pre>\r\n</blockquote>\r\n\r\n<p>The software will print a greeting message:</p>\r\n\r\n<blockquote>\r\n<pre>\r\n    *******************************************************************************************************************\r\n    De-Identification Algorithm: Identifies Protected Health Information (PHI) in Discharge Summaries and Nursing Notes\r\n    *******************************************************************************************************************\r\n\r\n\r\n    Starting de-identification (version 1.1) ...\r\n\r\n    Running deid in output mode. Output files will be: \r\n    id.phi: the PHI locations found by the code.\r\n    id.res: the scrubbed text.\r\n    id.info: debug info about the PHI locations.\r\n</pre>\r\n</blockquote>\r\n\r\n<p>On a typical current PC, the process will run to completion in approximately 10 to 20 minutes. The three output files will be written into the current directory; they should be identical to the files of the same names that are included in the <code>GSoutput</code> directory.</p>\r\n\r\n<p>The program <code>runStat.pl</code> can be used to derive performance statistics by comparing the <code>id.phi</code> file generated by <code>deid.pl</code> with the reference <code>id.deid</code> file provided with the <code>deid</code> software package. To do this, type the command</p>\r\n\r\n<blockquote>\r\n<pre>\r\nperl runStat.pl id.deid id.phi\r\n</pre>\r\n</blockquote>\r\n\r\n<p>which should produce the output</p>\r\n\r\n<blockquote>\r\n<pre>\r\n==========================\r\n\r\nNum of true positives = 1720\r\n\r\nNum of false positives = 546\r\n\r\nNum of false negatives = 59\r\n\r\nSensitivity/Recall = 0.967\r\n\r\nPPV/Specificity = 0.748\r\n\r\n==========================\r\n\r\n</pre>\r\n</blockquote>\r\n\r\n<p>To use the gold standard corpus to test the performance of another deidentifier, arrange for that deidentifier to produce a file in the format of <code>id.phi</code>, then use <code>runStat.pl</code> as above.</p>\r\n\r\n<h3>Customizing <code>deid</code></h3>\r\n\r\n<p>Examine the configuration file, <code>deid.config</code>, to see how to modify the behavior of <code>deid.pl</code>. For additional information, see the user manual.</p>\r\n\r\n<p>In order to customize this software to de-identify free text in other medical records, you may replace our filter modules with your data-specific filters. Additionally, at a minimum, you will have to replace the six files that contain a priori information (see below).</p>\r\n\r\n<p>Depending on the text you wish to de-identify, you may wish to re-classify names as ambiguous or not. For example, &quot;Mae&quot; is an unambiguous name in most contexts, but in nursing and discharge notes, it may be an acronym (meaning &ldquo;moving all extremities&rdquo;) and it is therefore ambiguous in those contexts.</p>\r\n\r\n<h3>Contents of the <code>deid</code> package</h3>\r\n\r\n<p>See above for information about downloading the entire <code>deid</code> package in a single archive file. The individual files in the package can also be viewed or downloaded by following the links below.</p>\r\n\r\n<p><strong>Code</strong></p>\r\n\r\n<ul>\r\n\t<li><code>deid.pl</code> - perl program for de-identifying medical notes</li>\r\n\t<li><code>runStat.pl</code> - perl program for calculating performance statistics</li>\r\n\t<li><code>stat.pm - </code>perl subroutines shared by deid.pl and runStat.pl</li>\r\n\t<li><code>deid.config - </code>sample configuration file for use with deid.pl</li>\r\n\t<li><code>COPYING - </code>GNU General Public License, version 2</li>\r\n</ul>\r\n\r\n<p><strong>Dictionaries</strong> (see the User Manual for details)</p>\r\n\r\n<ul>\r\n\t<li><code>dict/</code> Subdirectory containing lists of words and phrases not likely to be PHI\r\n\r\n\t<ul>\r\n\t\t<li><code>common_words.txt - </code>49,668 words that are common in medical records</li>\r\n\t\t<li><code>commonest_words.txt</code> - 5,126 words that are very common in medical records</li>\r\n\t\t<li><code>medical_phrases.txt</code> - 28 medical phrases</li>\r\n\t\t<li><code>notes_common.txt</code> - 66 very common words found in nursing notes</li>\r\n\t\t<li><code>sno_edited.txt - </code>175,313 medical terms from UMLS/SNOMED</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li><code>lists/</code> Subdirectory containing lists of words and phrases that are or might be PHI\r\n\t<ul>\r\n\t\t<li><em>Names</em>\r\n\t\t<ul>\r\n\t\t\t<li><code>last_names_unambig.txt</code> - 81,497 unambiguous family names</li>\r\n\t\t\t<li><code>last_names_ambig.txt - </code>7,298 ambiguous family names</li>\r\n\t\t\t<li><code>last_names_popular.txt - </code>93 popular family names</li>\r\n\t\t\t<li><code>prefixes_unambig.txt - </code>17 family name prefixes (von, de la, etc.)</li>\r\n\t\t\t<li><code>last_name_prefixes.txt -</code> 138 prefixes that may appear before a family name</li>\r\n\t\t\t<li><code>female_names_unambig.txt - </code>3843 unambiguous female given names</li>\r\n\t\t\t<li><code>female_names_ambig.txt - </code>616 ambiguous female given names</li>\r\n\t\t\t<li><code>female_names_popular.txt - </code>125 popular female given names</li>\r\n\t\t\t<li><code>male_names_unambig.txt - </code>1144 unambiguous male given names</li>\r\n\t\t\t<li><code>male_names_ambig.txt - </code>419 ambiguous male given names</li>\r\n\t\t\t<li><code>male_names_popular.txt - </code>130 popular male given names</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li><em>Locations</em>\r\n\t\t<ul>\r\n\t\t\t<li><code>countries_unambig.txt - </code>179 country names</li>\r\n\t\t\t<li><code>us_states.txt - </code>59 US states and territories</li>\r\n\t\t\t<li><code>us_states_abbre.txt - </code>59 standard US state and territorial abbreviations</li>\r\n\t\t\t<li><code>more_us_state_abbreviations.txt</code> - 53 non-standard US state name abbreviations</li>\r\n\t\t\t<li><code>locations_unambig.txt</code> - 3341 unambiguous location names</li>\r\n\t\t\t<li><code>locations_ambig.txt - </code>135 words that may be (parts of) location names</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li><em>Other possible PHI</em>\r\n\t\t<ul>\r\n\t\t\t<li><code>us_area_code.txt</code> - 382 US telephone area codes</li>\r\n\t\t\t<li><code>company_names_unambig.txt - </code>484 unambiguous company names</li>\r\n\t\t\t<li><code>company_names_ambig.txt - </code>18 ambiguous company names</li>\r\n\t\t\t<li><code>ethnicities_unambig.txt - </code>195 ethnicities</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li><em>Known PHI (a priori information) - </em>The six files in this group contain the surrogate PHI from the gold standard corpus, not the original PHI from the files used to create it! You will need to create your own versions of these six files, using these as models, if you wish to use <code>deid</code> on your own data.\r\n\t<ul>\r\n\t\t<li><code>pid_patientname.txt - </code>163 full names and ids of the patients in the gold standard corpus</li>\r\n\t\t<li><code>doctor_first_names.txt - </code>56 given names of doctors</li>\r\n\t\t<li><code>doctor_last_names.txt - </code>254 family names of doctors</li>\r\n\t\t<li><code>stripped_hospitals.txt - </code>143 names of nearby hospitals</li>\r\n\t\t<li><code>local_places_unambig.txt - </code>48 unambiguous names of nearby towns and cities</li>\r\n\t\t<li><code>local_places_ambig.txt - </code>4 ambiguous names of nearby towns and cities</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li><strong>Files related to the gold-standard corpus (excluding a priori information, see above). </strong><em>The gold standard corpus itself must be obtained separately (see below); it is not part of this package.</em>\r\n\t<ul>\r\n\t\t<li><code>id.deid</code> - PHI locations in the gold standard corpus</li>\r\n\t\t<li><code>id-phi.phrase - </code>PHI locations, types, and PHI terms in the gold standard corpus</li>\r\n\t\t<li><code>shift.txt - </code>Date shifts for patients in the gold standard corpus</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li><strong>Sample outputs generated by <code>deid.pl</code></strong>\r\n\t<ul>\r\n\t\t<li><code>id.phi</code> - locations of detected PHI in the input text</li>\r\n\t\t<li><code>id.res - </code>the deidentified output text, with PHI replaced by tags</li>\r\n\t\t<li><code>id.info - </code>debugging information</li>\r\n\t\t<li><code>GSoutput/</code> [The three files provided in this directory were generated from the gold standard corpus, using the test procedure described below running on Fedora 10.]\r\n\t\t<ul>\r\n\t\t\t<li><code>id.phi</code> - locations of detected PHI in the input text</li>\r\n\t\t\t<li><code>id.res - </code>the deidentified output text, with PHI replaced by tags</li>\r\n\t\t\t<li><code>id.info - </code>debugging information</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li><strong>Documentation</strong>\r\n\t<ul>\r\n\t\t<li><code>doc/</code>\r\n\t\t<ul>\r\n\t\t\t<li><code>DeidUserManual.pdf - </code>De-Identification of Free-Text Medical Records: User Manual</li>\r\n\t\t\t<li><code>Changes.log - </code>Changes made since the initial release (<code>deid-1.0</code>).</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h3>Notes on the files in the package</h3>\r\n\r\n<p>Except for functions related to calculating performance statistics (in <code>stats.pm</code>), the deidentification code is contained in a perl script (<code>deid.pl</code>). Its configuration file, <code>deid.config</code>, can be used to set parameters of the deidentification process at run time. Associated word and phrase lists are in <code>lists/</code> (containing known and possible PHI) and <code>dict/</code> (containing probable non-PHI).</p>\r\n\r\n<p>If the date shift filter is on, <code>deid</code> replaces all dates in its input with surrogate dates. The <code>shift.txt</code> file contains a randomly assigned date shift (between 1000 and 3000 days) for each patient in the gold standard corpus; surrogate dates are generated by adding the specified number of days to the dates in the input file. The method used to generate the date shifts in <code>shift.txt</code> differs from that used in PhysioBank databases.</p>\r\n\r\n<p>The file <code>id-phi.phrase</code> is provided as a convenient index to the PHI in the gold standard corpus; it is not used by the deid software. Each line of this file contains 6 fields: PID, Record_Number, PHI_Start_Location, PHI_End_Location, PHI_Type, and PHI_Text.</p>\r\n\r\n<p>The file <code>id.deid</code> also contains PHI locations in the gold standard corpus, and it is used as a reference for calculating performance statistics by the functions in <code>stats.pm</code>. It contains two types of lines. The first type is of the form</p>\r\n\r\n<blockquote>\r\n<pre>\r\nPatient <em>PID</em> Note <em>Record_Number</em>\r\n</pre>\r\n</blockquote>\r\n\r\n<p>and the second type is of the form</p>\r\n\r\n<blockquote>\r\n<pre>\r\n<em>PHI_Start_Location PHI_Start_Location PHI_End_Location</em>\r\n</pre>\r\n</blockquote>\r\n\r\n<h3>Data: the gold-standard corpus of deidentified medical text</h3>\r\n\r\n<p>Evaluating software for de-identification turns out to be quite difficult. As in many of the projects contributing to PhysioNet, a reference database is highly useful. Ideally the developer of de-identification software needs an appropriate corpus of text in which all of the PHI has been labelled, so that the software&#39;s PHI detection performance can be assessed quickly and quantitatively. To compare different approaches to PHI removal objectively, we need a standard corpus. And here&#39;s the dilemma: we can&#39;t share such a corpus if it has any PHI in it!</p>\r\n\r\n<p>The <code>deid</code> software package was developed and tested using a gold standard corpus of 2,434 nursing notes that have been thoroughly deidentified by a multi-pass process that included meticulous reviews by three or more experts working independently, as well as by a variety of automated methods. All detected instances of PHI in these nursing notes have been replaced by realistic surrogate data in the gold standard corpus. Although the <code>deid</code> software, as noted above, may be redistributed under the terms of the GPL, the gold standard corpus, because of the very small possibility that it may contain one or more instances of undetected PHI, is currently available only to those who have been granted access to PhysioNet Clinical Databases (such as MIMIC-III).</p>\r\n\r\n<p>To apply for access to the gold standard corpus, please see the Deidentified Medical Text page.</p>\r\n\r\n<h3>Further reading</h3>\r\n\r\n<ol>\r\n\t<li>Neamatullah I. <a href=\"https://physionet.org/physiotools/deid/doc/ishna-meng-thesis.pdf\">Automated De-Identification of Free-Text Medical Records</a>. MIT Dept of EECS, MEng thesis, 2006.</li>\r\n\t<li>Douglass M. <a href=\"https://physionet.org/physiotools/deid/doc/douglass-meng-thesis.pdf\">Computer-Assisted De-identification of Free-text Nursing Notes</a>. MIT Dept of EECS, MEng thesis, 2005.</li>\r\n\t<li>Douglass M, Clifford GD, Reisner A, Long WJ, Moody GB, Mark RG. <a href=\"https://physionet.org/physiotools/deid/doc/douglass-cinc-2005.pdf\">De-Identification Algorithm for Free-Text Nursing Notes</a>. <em>Computers In Cardiology</em> 32:331-334, 2005.</li>\r\n\t<li>Douglass M, Clifford GD, Reisner A, Moody GB, Mark RG. <a href=\"https://physionet.org/physiotools/deid/doc/douglass-cinc-2004.pdf\">Computer-Assisted Deidentification of Free Text in the MIMIC II Database</a>. <em>Computers In Cardiology</em> 31:341-344, 2004.</li>\r\n\t<li>Levine JM. <a href=\"https://physionet.org/physiotools/deid/doc/levine-meng-thesis.pdf\">De-identification of ICU patient records</a>. MIT Dept of EECS, MEng thesis, 2003.</li>\r\n</ol>\r\n\r\n<h3>Acknowledgements</h3>\r\n\r\n<p>This work was performed with support from the National Institute of Biomedical Imaging and Bioengineering (NIBIB), under grant R01 EB001659.</p>",
    "doi": "",
    "version": "1.1",
    "resource_type": 1,
    "publish_date": "2007-12-18",
    "citation": "Neamatullah I, Douglass M, Lehman LH, Reisner A, Villarroel M, Long WJ, Szolovits P, Moody GB, Mark RG, Clifford GD. Automated De-Identification of Free-Text Medical Records. BMC Medical Informatics and Decision Making, 2008, 8:32. doi:10.1186/1472-6947-8-32",
    "citation_url": "http://www.biomedcentral.com/1472-6947/8/32",
    "contact_name": "PhysioNet Support",
    "contact_affiliations": "MIT",
    "contact_email": "webmaster@physionet.org"
  }
},
{
  "model": "project.legacyproject",
  "pk": 120,
  "fields": {
    "title": "edf-anonymize",
    "slug": "edf-anonymize",
    "abstract": "<p><em>edf-anonymize</em> reads an EDF or EDF+ file (<em>input</em>), writing an anonymized copy of it as <em>output</em>.</p>",
    "full_description": "<h3>Name</h3>\r\n\r\n<p>edf-anonymize - anonymize (de-identify) an EDF or EDF+ file</p>\r\n\r\n<h3>Synopsis</h3>\r\n\r\n<p><strong>edf-anonymize</strong> <em>input output</em> [ <em>sname</em> <em>sid</em> <em>sdate</em> ]</p>\r\n\r\n<h3>Description</h3>\r\n\r\n<p><em>edf-anonymize</em> reads an EDF or EDF+ file (<em>input</em>), writing an anonymized copy of it as <em>output</em>.</p>\r\n\r\n<p>Anonymization of an EDF or EDF+ file requires removal of the patient name and id, and all elements of the recording date other than the year. These can be replaced with surrogate data, and this is recommended since some software intended to read EDF or EDF+ files may reject inputs in which the fields for name, id, and recording date are empty.</p>\r\n\r\n<p>By default, however, if <em>sname</em>, <em>sid</em>, and <em>sdate</em> are omitted, edf-anonymize replaces the name and id with space (blank) characters, and it replaces the recording day and month with &#39;01.01&#39; (1 January) without altering the recording year.</p>\r\n\r\n<p>Run the program from the command line without any arguments to obtain a brief synopsis of its use.</p>\r\n\r\n<h3>Examples</h3>\r\n\r\n<blockquote>\r\n<p>edf-anonymize foo.edf anonymous.edf</p>\r\n</blockquote>\r\n\r\n<p>This copies the contents of foo.edf to a new file called anonymous.edf, emptying the patient name and id fields and setting the date to 01.01 without altering the recording year.</p>\r\n\r\n<blockquote>\r\n<p>edf-anonymize foo.edf anonymous.edf &quot;Arthur Dent&quot;</p>\r\n</blockquote>\r\n\r\n<p>As above, but the patient&#39;s name is replaced by Arthur Dent. The quotation marks are needed if the name contains any spaces, as in this example. Names longer than 80 characters are truncated.</p>\r\n\r\n<blockquote>\r\n<p>edf-anonymize foo.edf anonymous.edf &quot;Arthur Dent&quot; 42</p>\r\n</blockquote>\r\n\r\n<p>As above, but the patient id is replaced by 42. Ids longer than 80 characters are truncated.</p>\r\n\r\n<blockquote>\r\n<p>edf-anonymize foo.edf anonymous.edf &quot;Arthur Dent&quot; 42 03.04.05</p>\r\n</blockquote>\r\n\r\n<p>As above, but the date is replaced by 03.04.05 (i.e, 3 April 2005).</p>\r\n\r\n<blockquote>\r\n<p>edf-anonymize foo.edf anonymous.edf &quot;Arthur Dent&quot; 42 30.11</p>\r\n</blockquote>\r\n\r\n<p>As above, but the day and month are replaced by 30.11 (30 November), without altering the recording year.</p>\r\n\r\n<blockquote>\r\n<p>edf-anonymize foo.edf anonymous.edf &quot;Arthur Dent&quot; 42 +12345</p>\r\n</blockquote>\r\n\r\n<p>As above, but the recording date is shifted 12345 days into the future.</p>\r\n\r\n<blockquote>\r\n<p>edf-anonymize foo.edf anonymous.edf &quot;Arthur Dent&quot; 42 +-5678</p>\r\n</blockquote>\r\n\r\n<p>As above, but the recording date is shifted -5678 days into the past.</p>\r\n\r\n<h3>Author</h3>\r\n\r\n<p>George B. Moody (<a href=\"mailto:george@mit.edu\">george@mit.edu</a>)</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2010-05-17",
    "citation": "",
    "citation_url": "",
    "contact_name": "George B. Moody",
    "contact_affiliations": "MIT",
    "contact_email": "george@mit.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 121,
  "fields": {
    "title": "Apnea Detection from the ECG",
    "slug": "apdet",
    "abstract": "<p>Hilbert Transform based Sleep Apnea Detection using a Single Lead Electrocardiogram.</p>",
    "full_description": "<p>Hilbert Transform based Sleep Apnea Detection using a Single Lead Electrocardiogram (apdet)</p>\r\n\r\n<p>JE Mietus, C-K Peng, PCh Ivanov, AL Goldberger.<br />\r\nBeth Israel Deaconess Medical Center and Harvard Medical School, Boston, USA</p>\r\n\r\n<h3>Background</h3>\r\n\r\n<p>The apdet software package uses a new automated method to diagnose and quantify obstructive sleep apnea from single-lead electrocardiograms based on detection of the periodic oscillations in cardiac interbeat intervals that are often associated with prolonged cycles of sleep apnea. This technique employs the Hilbert transformation of the sinus interbeat (NN) interval time series to derive the instantaneous amplitudes and frequencies of the series, and calculates their averages and standard deviations over a moving 5-minute window. We then apply a thresholding technique and detect continuous sequences of those windows that lie within threshold limits.</p>\r\n\r\n<p>When applied to the training set of the Apnea-ECG Database created for the CinC Challenge 2000, this algorithm correctly classified 26 of 30 subjects (86.6%), and correctly identified the presence or absence of sleep apnea in 13895 of 17045 minutes (82.1%). When applied to the test set of the Apnea-ECG Database, this algorithm performed even better, correctly classifying 28 out of 30 cases (93.3%) of subjects, and 14591 of 17268 minutes (84.5%).</p>\r\n\r\n<h3>Obtaining the apdet package</h3>\r\n\r\n<p>The apdet software package is available in source form and as prebuilt binaries for Linux and MS-Windows.</p>\r\n\r\n<p><strong>Before building or using the apdet software, you must install the free WFDB software package.</strong> Under MS-Windows, you will also need to install the free <a href=\"http://www.cygwin.com/\" target=\"other\">Cygwin environment</a> before building or using the apdet software.</p>\r\n\r\n<p>Unpacking the apdet package requires tar and gzip, and running the software requires sh (or a compatible shell such as bash), and awk, all of which can be found on all Unix, Linux, and Mac OS/X systems, and in the Cygwin environment for MS-Windows. Cygwin also includes the gcc C compiler and all other utilities needed to compile the apdet package from sources if desired.</p>\r\n\r\n<h3>Downloading and installing the apdet package</h3>\r\n\r\n<p>Once you have installed the WFDB software package (and, under MS-Windows, the Cygwin environment), download and install the apdet package of your choice:</p>\r\n\r\n<p><strong>Sources:</strong></p>\r\n\r\n<ol>\r\n\t<li>Download apdet.src.tar.gz. (You may also view or download the sources as individual files.)</li>\r\n\t<li>Unpack it:<br />\r\n\ttar xfvz apdet.src.tar.gz<br />\r\n\ttar is included in all versions of Unix, Linux, and MacOSX, and in Cygwin for MS-Windows. If your version of tar doesn&#39;t support the z option, unpack the package in two steps:<br />\r\n\tgzip -d apdet.src.tar.gz<br />\r\n\ttar xfv apdet.src.tar</li>\r\n\t<li>Enter the source directory (apdet-1.0) and compile the software:<br />\r\n\tmake all<br />\r\n\t(under MS-Windows, make -f Makefile.w32 all).</li>\r\n\t<li>Install the software:<br />\r\n\tmake install<br />\r\n\t(under MS-Windows, make -f Makefile.w32 install). You will probably need root (administrator) permissions to install in the default location; change the value of BINDIR in Makefile (Makefile.w32) if you need to use a different location.</li>\r\n</ol>\r\n\r\n<p><strong>Linux (x86) binaries:</strong></p>\r\n\r\n<ol>\r\n\t<li>Download apdet.i386-linux.tar.gz.</li>\r\n\t<li>As root, unpack it:<br />\r\n\ttar xCfvz / apdet.i386-linux.tar.gz</li>\r\n</ol>\r\n\r\n<p><strong>MS-Windows binaries:</strong></p>\r\n\r\n<ol>\r\n\t<li>Download apdet.cygwin.tar.gz.</li>\r\n\t<li>In a Cygwin/bash window, unpack it:<br />\r\n\ttar xCfvz / apdet.cygwin.tar.gz</li>\r\n</ol>\r\n\r\n<h3>Using the apdet package</h3>\r\n\r\n<p>Open a terminal window (under MS-Windows, a Cygwin/bash window) and type a command such as</p>\r\n\r\n<blockquote>\r\n<pre>\r\nget_apdet apnea-ecg/a03 qrs\r\n</pre>\r\n</blockquote>\r\n\r\n<p>The first argument is the record name, and the second is the annotator name for a beat annotation file. In the example above, get_apdet will analyze record a03, annotator qrs from the <a href=\"https://physionet.org/physiobank/database/apnea-ecg/\">Apnea-ECG Database</a>. (If you have not previously downloaded the input data into a local apnea-ecg directory, get_apdet obtains the data directly from PhysioNet.)</p>\r\n\r\n<p>The get_apdet command prints the times of detection of sleep apnea heart rate oscillations and the total fraction of time with such detections. For the example above, the output is:</p>\r\n\r\n<blockquote>\r\n<pre>\r\n00:05:59 - 00:59:59\r\n01:39:59 - 02:28:59\r\n03:04:59 - 03:52:59\r\n03:57:59 - 04:22:59\r\n04:38:59 - 05:03:59\r\n05:56:59 - 06:48:59\r\n06:58:59 - 07:24:59\r\n07:45:59 - 08:39:59\r\n\r\ntot = 05:33:00 / 08:42:25 = 0.637\r\n</pre>\r\n</blockquote>\r\n\r\n<p>See an <a href=\"https://physionet.org/physiotools/apdet/a03.html\">illustration of these detections</a>.</p>\r\n\r\n<p>get_apdet relies entirely on normal-to-normal beat interval data, which it normally derives from a beat annotation file. Beat annotation files are available for most of the PhysioBank records that include ECGs. If you wish to study a recording for which no beat annotation file is available, you may be able to create one using sqrs. If you have interbeat interval data but not a beat annotation file, you can modify get_apdet as needed, or you can use rr2ann to put your data into the standard format before processing them.</p>\r\n\r\n<h3>How does get_apdet work?</h3>\r\n\r\n<p>The sequence of steps involved in the detection of the RR interval oscillations, as implemented by get_apdet, is as follows:</p>\r\n\r\n<ol>\r\n\t<li>The normal-to-normal (NN) intervals are derived:<br />\r\n\trrlist $ANN $REC -a N<br />\r\n\tIf the input files ($REC.$ANN and $REC.hea) are not in the current directory, rrlist looks for them in the PhysioBank archives on PhysioNet.</li>\r\n\t<li>The NN interval series is then filtered to remove outliers:<br />\r\n\tfilt 0.2 20 -x 0.4 2.0</li>\r\n\t<li>The series is then linearly resampled at 1 Hz ...<br />\r\n\tlinsamp 1.0</li>\r\n\t<li>... then locally detrended using a moving 40 second window ...<br />\r\n\tldetrend 40</li>\r\n\t<li>... and smoothed using a moving 5 second window:<br />\r\n\tsmooth 5</li>\r\n\t<li>Next, the Hilbert transform is applied to derive instantaneous amplitudes and frequencies:<br />\r\n\tht</li>\r\n\t<li>The Hilbert amplitudes and frequencies are then median filtered using a 60 second window:<br />\r\n\thtmedfilt 60</li>\r\n\t<li>The amplitudes are normalized such that the average amplitude equals 1.0 (using awk).</li>\r\n\t<li>The midpoint of the Hilbert amplitudes is found (using awk and mm), and the minimum Hilbert amplitude threshold is set to<br />\r\n\t<em>THRES = a + b*(mid+1)/2</em><br />\r\n\twhere <em>a = -0.555</em> and <em>b = 1.3</em> (note: the values of <em>a</em> and <em>b</em> were given incorrectly in the original publication; please refer to the <a href=\"https://physionet.org/physiotools/apdet/apdet.shtml\">posted version</a> instead.)</li>\r\n\t<li>The mean Hilbert amplitudes and frequencies, their standard deviations and fraction of time within their specified threshold limits are calculated over 5-minute windows incremented each minute:<br />\r\n\thtavsd 1:00 5:00 <em>THRES</em></li>\r\n\t<li>Those windows where the means, standard deviations and threshold times of the Hilbert amplitudes and frequencies are all within their specified limits are selected (using awk).</li>\r\n\t<li>Apnea is detected whenever at least 15 consecutive windows are selected in the previous step, and the times of the detected apneic periods are printed:<br />\r\n\tdetruns 1:00 5:00 15:00</li>\r\n</ol>\r\n\r\n<p>This program correctly identifies the presence or absence of apnea in in 82.1% of the data in the CinC test set and 84.5% of the data in the CinC training set.</p>\r\n\r\n<p>It is recommended that the accuracy of the oscillation detections be verified by visual inspection of the original RR interval series.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2002-02-04",
    "citation": "",
    "citation_url": "",
    "contact_name": "PhysioNet Support",
    "contact_affiliations": "MIT",
    "contact_email": "webmaster@physionet.org"
  }
},
{
  "model": "project.legacyproject",
  "pk": 122,
  "fields": {
    "title": "Cerebral Haemodynamic Autoregulatory Information System GUI",
    "slug": "charisgui",
    "abstract": "<p>Acute Brain injury (ABI) is a devastating event requiring intensive acute treatment and post-injury rehabilitation, both delivered for indeterminate periods of time. For severe ABIs, acute treatment is aimed at stabilizing the patient to prevent secondary brain injury from ischemia and swelling. This requires a balance between adequate levels of cerebral blood flow and safely low intracranial pressure (ICP) - a task normally done by autoregulatory (AR) processes of the brain.</p>\r\n\r\n<p>In the absence of normal AR, hemodynamic stability is difficult to maintain because there are no reliable predictors to guide treatment. Thus, guidelines for triage and discharge are somewhat arbitrary for ABI and the need for a Clinical Decision Support (CDS) system for neurotrauma is widely recognized. Prerequisite to a CDS is a large database of patient records and efficient means to extract meaningful information from them.</p>\r\n\r\n<p>CHARIS will systematize the analysis of relevant physiological signals, and will embody data-driven algorithms to search for potential predictors of acute clinical events.</p>",
    "full_description": "<p>Introduction</p>\r\n\r\n<p>Acute Brain injury (ABI) is a devastating event requiring intensive acute treatment and post-injury rehabilitation, both delivered for indeterminate periods of time. For severe ABIs, acute treatment is aimed at stabilizing the patient to prevent secondary brain injury from ischemia and swelling. This requires a balance between adequate levels of cerebral blood flow and safely low intracranial pressure (ICP) - a task normally done by autoregulatory (AR) processes of the brain.</p>\r\n\r\n<p>In the absence of normal AR, hemodynamic stability is difficult to maintain because there are no reliable predictors to guide treatment. Thus, guidelines for triage and discharge are somewhat arbitrary for ABI and the need for a Clinical Decision Support (CDS) system for neurotrauma is widely recognized. Prerequisite to a CDS is a large database of patient records and efficient means to extract meaningful information from them.</p>\r\n\r\n<p>CHARIS will systematize the analysis of relevant physiological signals, and will embody data-driven algorithms to search for potential predictors of acute clinical events.</p>\r\n\r\n<p>Software Description</p>\r\n\r\n<p>The CHARIS GUI provides an integrated platform for evaluating data necessary for developing predictive models of intracranial hyptertension (IH).</p>\r\n\r\n<p>The chosen test index which the underlying algorithms use is the well-established PRx, a moving correlation index between mean arterial blood pressure and intracranial pressure. This is based on the assumption that normal intracranial pressure (ICP) should not directly correlate with arterial blood pressure (ABP).</p>\r\n\r\n<p>After loading the data, the algorithm packet averages the data to reduce information volume and calculates the PRx of the input waveforms. It will then search through the data to detect noteable events based on the set threshold parameters. Upon the detection of each potential IH location, the user will be prompted to state whether or not it is an artifact, ultimately resulting in a set of semi-supervised detected events.</p>\r\n\r\n<p>The GUI provides a convenient interface to load, process, label, graph, and save the waveforms, features, and events. Open the GUI by running <strong>CHARIS_GUI.m</strong>. The <strong>CHARIS-GUI-Instructions.pdf</strong> file contains detailed instructions on how to implement each functionality.</p>\r\n\r\n<h3>Example Data</h3>\r\n\r\n<p>The <code>sample-input-data.zip</code> file contains a set of waveform <code>.mat</code> files (ABP, ECG, ICP and Time) that can be fed into the GUI and analyzed. The <code>sample-output.zip</code> file contains an example set of analysis results output by the GUI.</p>\r\n\r\n<h3>Software Requirements</h3>\r\n\r\n<p>The code and GUI are implemented in Matlab. Tests were successfully performed on Windows 10 and Ubuntu 16.04 for Matlab versions 2015b, 2016a, and 2016b.</p>\r\n\r\n<h3>Contributors</h3>\r\n\r\n<p>This software package was contributed by William Craelius, professor of Biomedical Engineering at Rutgers University.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2016-12-16",
    "citation": "Kim N, Krasner A, Kosinski C, Wininger M, Qadri M, Kappus Z, Danish S, Craelius W. Trending autoregulatory indices during treatment for traumatic brain injury. J Clin Monit Comput. 2016 Dec;30(6):821-831. Epub 2015 Oct 7.",
    "citation_url": "https://www.ncbi.nlm.nih.gov/pubmed/26446002",
    "contact_name": "William Craelius",
    "contact_affiliations": "Biomedical Engineering at Rutgers University",
    "contact_email": "billcraelius@gmail.com"
  }
},
{
  "model": "project.legacyproject",
  "pk": 123,
  "fields": {
    "title": "ECGPUWAVE",
    "slug": "ecgpuwave",
    "abstract": "<p>ecgpuwave analyses an ECG signal from the specified record, detecting the QRS complexes and locating the beginning, peak, and end of the P, QRS, and ST-T waveforms. The output of ecgpuwave is written as a standard WFDB-format annotation file associated with the specified annotator.</p>",
    "full_description": "<h3>Name</h3>\n\n<p>ecgpuwave - QRS detector and waveform limit locator</p>\n\n<h3>Synopsis</h3>\n\n<p><strong>ecgpuwave -r</strong> <em>record</em> <strong>-a</strong> <em>annotator</em> [ <em>options</em> ... ]</p>\n\n<h3>Description</h3>\n\n<p><strong>ecgpuwave</strong> analyses an ECG signal from the specified <em>record</em>, detecting the QRS complexes and locating the beginning, peak, and end of the P, QRS, and ST-T waveforms. The output of <strong>ecgpuwave</strong> is written as a standard WFDB-format annotation file associated with the specified <em>annotator</em>. This file can be converted into text format using <strong>rdann</strong> or viewed using <strong>wave</strong>.</p>\n\n<p>The QRS detector is based on the algorithm of Pan and Tompkins (reference 1) with some improvements that make use of slope information (reference 2). Optionally, QRS annotations can be provided as input (see option <strong>-i</strong>), permitting the use of external QRS detectors such as <strong>sqrs</strong> or manually-edited annotations (which can be created using <strong>wave</strong> ). The waveform limit locator is based on the algorithm described in reference 3 and evaluated in references 3 and 4.</p>\n\n<p>The output annotation file contains PWAVE (&quot;<strong>p</strong>&quot;) and TWAVE (&quot;<strong>t</strong>&quot;) annotations that indicate the P- and T-wave peaks, as well as QRS annotations (NORMAL (&quot;<strong>N</strong>&quot;) if generated by the built-in QRS detector, or copies of the input QRS annotations if these were supplied). <strong>ecgpuwave</strong> classifies each T wave as type 0 (normal), 1 (inverted), 2 (positive monophasic), 3 (negative monophasic), 4 (biphasic negative-positive), or 5 (biphasic positive-negative); this numeric classification is written into the <strong>num</strong> field of each TWAVE annotation. The P, QRS, and T waveform onsets and ends are marked in the output annotation file using WFON (&quot;<strong>(</strong>&quot;) and WFOFF (&quot;<strong>)</strong>&quot;) annotations. The <strong>num</strong> field of each WFON and WFOFF annotation designates the type of waveform with which it is associated: 0 for a P wave, 1 for a QRS complex, or 2 for a T wave.</p>\n\n<p><strong><em>Options</em> include:</strong></p>\n\n<p><strong>-f</strong> <em>time</em></p>\n\n<p>Begin at the specified <em>time</em> (default: the beginning of the record).</p>\n\n<p><strong>-i</strong> <em>input-annotator</em></p>\n\n<p>Read QRS locations from the specified <em>input-annotator</em> (and copy them to the output annotation file). Default: run the built-in QRS detector.</p>\n\n<p><strong>-n</strong> <em>beat-type</em></p>\n\n<p>Specify which beats to process (must be used together with <strong>-i</strong>): <em>beat_type</em> may be 0 (default: process all beats) or 1 (process only beats labelled as NORMAL (&quot;<strong>N</strong>&quot;) by the input annotator).</p>\n\n<p><strong>-s</strong> <em>n</em></p>\n\n<p>Analyze signal <em>n</em> (default: signal 0).</p>\n\n<p><strong>-t</strong> <em>time</em></p>\n\n<p>Stop at the specified <em>time</em> (default: the end of the record).</p>\n\n<h3>Environment</h3>\n\n<p>It may be necessary to set and export the shell variable <strong>WFDB</strong> (see <strong>setwfdb</strong>).</p>\n\n<h3>See Also</h3>\n\n<ul>\n\t<li><strong>rdann</strong>(1), <strong>sqrs</strong>(1), <strong>wave</strong>(1), <strong>wqrs</strong>(1)</li>\n\t<li>Installation notes (Fortran version)</li>\n\t<li>Notes for MATLAB/Octave users</li>\n</ul>\n\n<h3>References</h3>\n\n<p>1. Pan J and Tompkins WJ. A Real-Time QRS Detection Algorithm. <em>IEEE Transactions on Biomedical Engineering<strong> 32</strong></em>(3):230-236, 1985.<br>\n2. Laguna P. <em>New Electrocardiographic Signal Processing Techniques: Application to Long-term Records.</em> Ph. D. disertation, Science Faculty, University of Zaragoza, 1990.<br>\n3. Laguna P, Jan&eacute; R, Caminal P. Automatic Detection of Wave Boundaries in Multilead ECG Signals: Validation with the CSE Database. <em>Computers and Biomedical Research <strong> 27</strong></em>(1):45-60, 1994.<br>\n4. Jan&eacute; R, Blasi A, Garc&iacute;a J, and Laguna P. Evaluation of an automatic threshold based detector of waveform limits in Holter ECG with the QT database. <em>Computers in Cardiology <strong>24</strong></em>:295-298 (1997; available at <a href=\"http://www.physionet.org/physiobank/database/qtdb/eval/\">http://www.physionet.org/physiobank/database/qtdb/eval/</a>)</p>\n\n<h3>Availability</h3>\n\n<p><strong>ecgpuwave</strong> is available as part of PhysioToolkit under the GPL (see <strong>Source</strong> below).</p>\n\n<h3>Authors</h3>\n\n<p>Pablo Laguna (laguna@posta.unizar.es), Raimon Jan&eacute;, Eudald Bogatell, and David Vigo Anglada</p>\n\n<h3>Source</h3>\n\n<p>An <strong>incomplete implementation</strong> in m-code for MATLAB or Octave is also available. This version includes QRS delineation, but it does <em>not</em> include an integrated QRS detector such as the modified Pan-Tompkins detector in the original Fortran version, described above. You must provide an input annotation file containing the times of occurrence of the QRS complexes (use the <strong>dirann</strong> and <strong>anot</strong> input parameters to specify where to find this file; see the documentation for the MATLAB version for details). If no annotation file is supplied, limits.m attempts to use basicECG.m and qrsdet.m to detect the QRS complexes, but these files have not been contributed by their authors and are not available here, so this attempt will <strong>fail</strong> unless you have obtained or reimplemented these functions. PhysioToolkit includes several QRS detectors that can generate an annotation file if necessary; these include gqrs(1), sqrs(1), and wqrs(1) (all written in C and included in the WFDB Software Package), as well as the original Fortran version of ecgpuwave, which includes its own QRS detector. The sqrs and wqrs detectors are also available as MATLAB functions within the WFDB Toolbox for MATLAB.</p>",
    "doi": "",
    "version": "1.3.4",
    "resource_type": 1,
    "publish_date": "2018-10-29",
    "citation": "",
    "citation_url": "",
    "contact_name": "Pablo Laguna",
    "contact_affiliations": "University of Zaragoza",
    "contact_email": "laguna@posta.unizar.es"
  }
},
{
  "model": "project.legacyproject",
  "pk": 124,
  "fields": {
    "title": "Cardiac Output Estimation from Arterial Blood Pressure Waveforms",
    "slug": "cardiacoutput",
    "abstract": "<p>This project contains the code used for a study that rigorously compares 11 estimates against thermodilution cardiac output (TCO) using 120 subjects from the MIMIC II database (all subjects for whom multiple TCO measurements were recorded at the time of the study).</p>",
    "full_description": "<h3>Background</h3>\n\n<p>Cardiac output (CO), defined as the volume of blood pumped by the heart per unit time (often expressed in liters per minute), is the critical variable characterizing circulatory function, but it is also one of the most difficult to measure. Thermodilution cardiac output (TCO) is generally regarded as the &quot;gold standard&quot; among CO measurements. By introducing a small amount of cool fluid into the blood upstream of the heart, and observing how rapidly the blood temperature equilibrates, the flow and thus the CO can be calculated. TCO is highly invasive, intermittent, difficult to perform, and has sufficient potential to cause complications that it is used only when an accurate CO measurement is essential -- and even then, TCO errors are on the order of 15 to 20%.</p>\n\n<p>For over a century, many researchers have proposed alternative, minimally invasive or non-invasive methods of estimating CO, based on features of the arterial blood pressure waveform.</p>\n\n<p>&nbsp;</p>\n\n<h3>Software Description</h3>\n\n<p>This project contains the code used for a study that rigorously compares 11 estimates against TCO using 120 subjects from the <a href=\"https://physionet.org/physiobank/database/mimic2db/\">MIMIC II database</a> (all subjects for whom multiple TCO measurements were recorded at the time of the study).</p>\n\n<p>The <strong>code</strong> directory contains Matlab implementations of the CO estimation algorithms, together with additional Matlab code to provide a set of tools for exploring CO estimators.</p>\n\n<p>The software in <strong>code/1extract/</strong> can use the waveform and numerics records to generate input files for the remaining software.</p>\n\n<p>&nbsp;</p>\n\n<h3>Underlying Data</h3>\n\n<p>The <strong>data </strong>directory contains a list of the original MIMIC II records used in this study.</p>\n\n<p>At the time of the <a href=\"https://physionet.org/physiotools/cardiac-output/doc/s54-5.pdf\">2005 study by Sun et al.</a>, the <a href=\"https://physionet.org/physiobank/database/mimic2wdb/\">MIMIC II Waveform Database</a> included 120 pairs of records (the &quot;study records&quot;) that included both ABP waveforms and TCO measurements, and all of these were used in the study. The ABP signals, sampled at 125 Hz, can be found in the waveform records, and the reference TCO measurements, occurring at irregular intervals, can be found in the companion &quot;numerics&quot; records (identified by the same record names, but with an appended &quot;n&quot;). Demographic and clinical information, including age, gender, ICD9 codes, and medications, was available in the <a href=\"https://physionet.org/mimic2/mimic2_clinical_overview.shtml\">MIMIC II Clinical Database</a> for 117 of the study records.</p>\n\n<ul>\n\t<li>The file RECORDS lists the study records, identifying them by their names within the now-obsolete version 2 of the MIMIC II Waveform Database, as was used in the study. If you wish to do anything other than exact replication of the 2005 study, we recommend using the corrected and expanded MIMIC II Waveform Database Matched Subset (for which age, gender, and detailed clinical information are available) or the much larger MIMIC II Waveform Database, version 3 (which includes many additional records for which age, gender, and clinical information are not available).</li>\n\t<li>File RECORDS-2005 also contains the names of the corrected copies of the study records within the current MIMIC II Waveform Database, version 3, as well as their version 2 record names, and the subject IDs for the associated patients&#39; records in the MIMIC II Clinical Database.</li>\n\t<li>File RECORDS-2014 contains an updated list of 535 records from 350 subjects with ABP signals, TCO measurements, age, and gender in the MIMIC II Waveform Database Matched Subset, and clinical data in the MIMIC II Clinical Database, including the 117 study records for which demographic and clinical data are available.</li>\n</ul>\n\n<p>The first column of RECORDS-2005 contains MIMIC II subject IDs for each record, which can be used to associate waveform and numerics data with demographic and clinical data. For example, in the MIMIC II Waveform Database Matched Subset, the ABP signals and TCO measurements for subject ID &quot;s00020&quot; can be found within <a href=\"https://physionet.org/physiobank/database/mimic2wdb/matched/s00020/\">http://physionet.org/physiobank/database/mimic2wdb/matched/s00020/</a>. The ABP and other signals are in waveform record s00020-2567-03-30-17-47 (as can be determined at the link above), and the TCO measurements are the non-zero values of the CO variable in numerics record s00020-2567-03-30-17-47n. The fields appended to the subject ID in these record name are the surrogate date (2567 March 30) and the actual starting time of the record (17:47 in the local time zone where the recording was made).</p>\n\n<p>In the MIMIC II Clinical Database, the initial &quot;s&quot; and any leading zeros are omitted from the subject ID. For example, demographic and clinical data for &quot;s00020&quot; appears in the MIMIC II Clinical Database as subject ID &quot;20&quot;. The last three cases in RECORDS-2005 are shown as subject ID &quot;sxxxxx&quot;; in these cases, there are no corresponding records in the MIMIC II Clinical Database, and age, gender, ICD9 codes, and medications are unknown for these three subjects.</p>\n\n<p>The second column of RECORDS-2005 contains the record names from the (obsolete) MIMIC II Waveform Database, version 2.</p>\n\n<p>For studies that require using the uncorrected data used in the 2005 study, within <a href=\"https://physionet.org/physiobank/database/mimic2db/\">http://physionet.org/physiobank/database/mimic2db/</a> are subdirectories for each record, containing WFDB-compatible waveform and numerics records. For example, the first entry in RECORDS is a40006; find the ABP signal in record mimic2db/a40006/a40006 <a href=\"https://physionet.org/physiobank/database/mimic2db/a40006/a40006_layout.hea\">[layout header]</a>, and the TCO measurements in record mimic2db/a40006/a40006n <a href=\"https://physionet.org/physiobank/database/mimic2db/a40006/a40006n.hea\">[header]</a>.</p>\n\n<p>The third column of RECORDS-2005, and any additional columns, contain the record names from the MIMIC II Waveform Database, version 3. The contents of these records are identical to those in the MIMIC II Waveform Database Matched Subset, except that their .hea files are undated (they contain the starting times but neither the actual nor the surrogate dates, and they do not contain the subjects&#39; age and gender). Note that if there is a gap of an hour or more in a subject&#39;s waveform and numerics recordings, there will be more than one MIMIC II Waveform Database version 3 record for that subject; although TCO measurements will be available in at least one of the records for each subject, they may not be present in all of a given subject&#39;s records. See the main page for the MIMIC II Waveform Database, version 3, for details on locating these records.</p>\n\n<p>The other files here contain additional clinical information extracted from the MIMIC II Clinical Database for 117 of the study records:</p>\n\n<ul>\n\t<li>demographics.txt: sex, age*, and mean and standard deviation of hematocrit. * age over 89 is given as &gt;=90</li>\n\t<li>icd9.txt: ICD9 codes and brief descriptions during the ICU stay</li>\n\t<li>medications.txt: intravenous medications administered during the ICU stay<br>\n\t(not necessarily while ABP was being monitored)</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<h3>Documentation and References</h3>\n\n<p>Detailed descriptions of the algorithms and data collected here can be found in the following papers, contained in the <strong>doc</strong> directory:</p>\n\n<ul>\n\t<li>Sun JX. Cardiac Output Estimation using Arterial Blood Pressure Waveforms. [MEng thesis]. Cambridge, MA: Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, September 2006.</li>\n\t<li>Sun JX, Reisner AT, Saeed M, Mark RG. Estimating Cardiac Output from Arterial Blood Pressure Waveforms: a Critical Evaluation using the MIMIC II Database. Computers in Cardiology <strong>32</strong>:295-298 (2005).</li>\n</ul>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2007-08-02",
    "citation": "Sun JX, Reisner AT, Saeed M, Mark RG. Estimating Cardiac Output from Arterial Blood Pressure Waveforms: a Critical Evaluation using the MIMIC II Database. Computers in Cardiology 32:295-298 (2005).",
    "citation_url": "",
    "contact_name": "James Sun",
    "contact_affiliations": "MIT",
    "contact_email": "toxinsun@gmail.com"
  }
},
{
  "model": "project.legacyproject",
  "pk": 125,
  "fields": {
    "title": "ECG-Derived Respiration",
    "slug": "edr",
    "abstract": "<p>The ECG-Derived Respiration (EDR) technique is an approach to obtain a respiration signal from an ECG.. It is based on the observation that the positions of ECG electrodes on the chest surface move relative to the heart, and transthoracic impedance varies, as the lungs fill and empty. Thus the lead axes vary at different points in the respiratory cycle, and any sufficiently precise measurement of the mean cardiac electrical axis shows variations that are correlated with respiration. This method is particularly effective if two or more ECG signals are available, but a single lead is sufficient. The EDR can be obtained even in the context of congestive heart failure, in which RSA may be absent.</p>",
    "full_description": "<h3>Background</h3>\n\n<p>Several techniques can be used to obtain a respiration signal from an ECG. A popular technique used in bedside patient monitors involves measuring transthoracic impedance using the ECG electrodes. Unlike those described below, this method obtains the respiration signal from the ECG <em>electrodes</em> rather than from the ECG <em>signal</em>. It requires special-purpose hardware and is not suited to recovering respiration from a recorded ECG, but it has the significant advantage (relative to the other methods mentioned here) that a continuous respiration-related waveform can be obtained.</p>\n\n<p>Another well-known method is based on observing the beat-to-beat variations in RR intervals or their reciprocals, which are primarily due to respiratory sinus arrhythmia (RSA) in most individuals. This method works best in young, healthy subjects, in whom RSA is most pronounced.</p>\n\n<p>The EDR (ECG-Derived Respiration) technique is a third approach. It is based on the observation that the positions of ECG electrodes on the chest surface move relative to the heart, and transthoracic impedance varies, as the lungs fill and empty. Thus the lead axes vary at different points in the respiratory cycle, and any sufficiently precise measurement of the mean cardiac electrical axis shows variations that are correlated with respiration. This method is particularly effective if two or more ECG signals are available, but a single lead is sufficient. The EDR can be obtained even in the context of congestive heart failure, in which RSA may be absent.</p>\n\n<p>None of these methods supplies a calibrated respiration signal; for tidal volume and air flow measurements, other techniques (spirometry, measurements from nasal thermistors, and plethysmography) are best. Nevertheless, any of these methods can provide a basis for estimating respiration rate and for detecting apneas.</p>\n\n<p>&nbsp;</p>\n\n<h3>Software Description</h3>\n\n<p>This project contains:</p>\n\n<ul>\n\t<li>A short C program implementing the EDR, which can be used to derive a respiration-related signal from one or two ECG signals (precompiled binaries for Linux and MS-Windows are also available).</li>\n\t<li>The paper that introduced the technique.</li>\n\t<li>A second paper that describes applications for the EDR.</li>\n</ul>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2000-03-19",
    "citation": "Lipsitz LA, Hashimoto F, Lubowsky LP, Mietus J, Moody GB, Appenzeller O, and Goldberger AL. Heart rate and respiratory rhythm dynamics on ascent to high altitude. British Heart Journal 74(4):390-396 (October 1995).",
    "citation_url": "http://heart.bmj.com/cgi/content/abstract/74/4/390",
    "contact_name": "George B. Moody",
    "contact_affiliations": "Massachusetts Institute of Technology",
    "contact_email": "george@mit.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 126,
  "fields": {
    "title": "Puka - Software for Detection of Breaths in Strain Gauge Recordings",
    "slug": "puka",
    "abstract": "<p>Puka calculates descriptive statistics such as heart rate variability (HRV), peak-valley respiratory sinus arrhythmia (RSA), and respiratory variables from EKG and strain gauge respiration data.</p>",
    "full_description": "<h3>Software Description</h3>\n\n<p>puka calculates descriptive statistics such as heart rate variability (HRV), peak-valley respiratory sinus arrhythmia (RSA), and respiratory variables from EKG and strain gauge respiration data.</p>\n\n<p><em>Puka</em> is a Hawaiian word meaning <em>appear</em>, <em>emerge</em>, or <em>an opening</em>, and is also the name of a small round shell with a center hole found on some Hawaiian beaches. It was selected to reflect the exploratory nature of the experiments which generate the data to be analyzed with this program as well as the new knowledge that may be gained.</p>\n\n<p>puka, written in Java, uses MATLAB for signal processing and statistical calculations, and the WFDB Software Package and ecgpuwave for EKG peak detection. Puka can also read and write data from a MySQL database. puka was developed and tested using Cygwin under MS-Windows, but puka should be usable on other platforms supported by MATLAB as well.</p>\n\n<p>puka incorporates a new method of identifying the breaths and pauses in strain gauge belt recordings. This technique locates the points of maximum inspiration and expiration for each breath as well as post-inspiratory and post-expiratory pauses. The authors found that puka correctly locates normal R waves in EKG signals and breaths in strain gauge belt recordings, in tests using artificial EKG data, paced respiration recordings from healthy young subjects, and recordings from neurological patients.</p>\n\n<p>&nbsp;</p>\n\n<h3>Authors</h3>\n\n<p>Joset A. Etzel [1], Erica L. Johnsen [2], Julie A. Dickerson [1], Ralph Adolphs [2].<br>\n<em>[1] Iowa State University<br>\n[2] University of Iowa</em></p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2004-12-15",
    "citation": "Etzel JA, Johnsen EL, Dickerson JA, Adolphs R. A program to accurately identify peaks in respiration and EKG signals for use in psychophysiological research. Psychophysiology 41 (s1), S73 (2004).",
    "citation_url": "",
    "contact_name": "PhysioNet Support",
    "contact_affiliations": "MIT",
    "contact_email": "webmaster@physionet.org"
  }
},
{
  "model": "project.legacyproject",
  "pk": 127,
  "fields": {
    "title": "TWAnalyser - A T-wave Alternans Detector",
    "slug": "twanalyser",
    "abstract": "<p>This software suite consists of Matlab implementations of the widely used Spectral Method (SM) and Modified Moving Average (MMA) for T-wave alternans (TWA) detection. It was initially developed for the PhysioNet/CinC Challenge 2008, in which these and a wide variety of other methods were evaluated and compared in blinded tests, using a data set that included ECGs with and without TWA as well as synthetic ECGs with calibrated amounts of artificial TWA. The implementation of SM presented here scored second in the open-source category and third overall with a score of 0.881. TWAanalyser&#39;s implementation of MMA received a score of 0.400. (A third method, which combined both algorithms, scored 0.834, not quite as well as SM alone. In this case, ECGs in which SM did not detect TWA were assigned a TWA estimate of 0, and all others were assigned the MMA algorithm&#39;s TWA estimate.) Most of the work to improve the score resulted from adjustments to filtering and alignment.</p>\n\n<p>TWAnalyser has been tested on both Windows XP (SP2) and Linux (Fedora Core 4-9) using Matlab R13 (6.5) and R2006b (7.3).</p>",
    "full_description": "<h3>Abstract</h3>\n\n<p>This software suite consists of Matlab implementations of the widely used Spectral Method (SM) and Modified Moving Average (MMA) for T-wave alternans (TWA) detection. It was initially developed for the PhysioNet/CinC Challenge 2008, in which these and a wide variety of other methods were evaluated and compared in blinded tests, using a data set that included ECGs with and without TWA as well as synthetic ECGs with calibrated amounts of artificial TWA. The implementation of SM presented here scored second in the open-source category and third overall with a score of 0.881. TWAanalyser&#39;s implementation of MMA received a score of 0.400. (A third method, which combined both algorithms, scored 0.834, not quite as well as SM alone. In this case, ECGs in which SM did not detect TWA were assigned a TWA estimate of 0, and all others were assigned the MMA algorithm&#39;s TWA estimate.) Most of the work to improve the score resulted from adjustments to filtering and alignment.</p>\n\n<p>TWAnalyser has been tested on both Windows XP (SP2) and Linux (Fedora Core 4-9) using Matlab R13 (6.5) and R2006b (7.3).</p>\n\n<p>&nbsp;</p>\n\n<h3>Prerequisites</h3>\n\n<p><strong>Data</strong></p>\n\n<p>TWAnalyser accepts digitized ECGs in PhysioBank-compatible formats. If you have ECGs in some other format and have Matlab software for reading them, it&#39;s not too difficult to modify TWAnalyser to work with your format. Otherwise, create PhysioBank-compatible records from your ECGs. If you wish to analyze a lengthy recording, you may wish to divide it into short segments (a few minutes each) first; this will save a <em>lot</em> of time.</p>\n\n<p>TWAnalyser requires a set of Q-onset, S-end, and T-end annotations for the ECGs to be analysed. If these are not available, TWAnalyser uses ecgpuwave to produce them. You also have the option of providing your own annotation files. In that case the names of the annotation files should end with .vf or .pu and their contents should mimic the format used by ecgpuwave. Specifically, annotation files should be stored in PhysioBank-compatible format, and they should include:</p>\n\n<ul>\n\t<li>Q-onset annotations (anntyp&nbsp;=&nbsp;WFON, num&nbsp;=&nbsp;1, chan&nbsp;=&nbsp;0)</li>\n\t<li>S-end annotations (anntyp&nbsp;=&nbsp;WFOFF, num&nbsp;=&nbsp;1, chan&nbsp;=&nbsp;0)</li>\n\t<li>T-end annotations (anntyp&nbsp;=&nbsp;WFOFF, num&nbsp;=&nbsp;2, chan&nbsp;=&nbsp;0)</li>\n</ul>\n\n<p>Read about annotations <a href=\"https://physionet.org/faq.shtml#annotation\">here</a>.</p>\n\n<p><strong>Software</strong></p>\n\n<p>TWAnalyser requires Matlab and WFDB. If the required annotations (see above) are not already available for the ECGs to be analyzed, ecgpuwave is also required. TWAnalyser and all of its prerequisite software are freely available under the terms of the <a href=\"http://www.fsf.org/licensing/licenses/gpl.html\">GPL</a>, with the exception of Matlab. It may be possible to run TWAnalyser using <a href=\"http://www.che.wisc.edu/octave/\">GNU Octave</a> or another freely available replacement for Matlab, but this has not been tested.</p>\n\n<p>&nbsp;</p>\n\n<h3>Installation</h3>\n\n<p>Under <strong>Linux</strong>:</p>\n\n<ol>\n\t<li>Install Matlab, WFDB, WFDB_tools, and ecgpuwave if you have not already done so.</li>\n\t<li>Download and unpack twa-mfiles.tar.gz (or twa-mfiles.zip; or download individual source files for TWAnalyser).</li>\n\t<li>Add the twa-mfiles directory to the Matlab path.</li>\n</ol>\n\n<p>Under <strong>Windows</strong>, you may follow the same procedure as for Linux. Alternatively:</p>\n\n<ol>\n\t<li>Install Matlab if you have not already done so.</li>\n\t<li>Download and unpack twa-windows.zip.</li>\n\t<li>Enter the twa-windows directory and run setup.bat from the Windows command prompt.</li>\n</ol>\n\n<p>Note that twa-windows.zip includes Windows executables that were built using version 10.4.4 of the WFDB library (from May 2006), which lacks features of recent versions such as support for reading EDF files.</p>\n\n<p>&nbsp;</p>\n\n<h3>Using TWAnalyser</h3>\n\n<p>There are three commands that will start the analysis for you. From the Matlab command prompt type one of the following:</p>\n\n<p><strong>DoTWASpectral</strong> [performs the SM and provides a graphical interface to explore the results]</p>\n\n<p>You are prompted to locate the ECG file you want to analyze. The SM interface consists of an ECG window, windows displaying successive superimposed beats, alternans series, periodogram and averaged periodogram. Navigation is possible in the ECG, superimposed beat and alternans series windows. One ECG lead at a time is displayed. You can switch leads using the button at the upper right corner of the interface window. A summary of the analysis results is at the top. All three available options (see the <a href=\"https://physionet.org/physiotools/TWAnalyser/docs/KhaustovNematiClifford.pdf\">paper</a>) for SM are displayed simultaneously (i.e., respective alternans series, periodograms and averaged periodograms are superimposed). You can remove the options you don&#39;t need by altering Param.MethodForEctopy in DoTWASpectral.m.</p>\n\n<p><strong>DoTWAbyMMA</strong> [performs the MMA and provides a graphical interface to explore the results]</p>\n\n<div>\n<p>You are prompted to locate the ECG file you want to analyze. The MMA interface consists of ECG window, windows displaying superimposed even and odd averages for the current interval, alternans value trend and two windows containing (even and odd) averages for previous and current interval plotted against the current beat. Navigation is possible in the ECG and trend windows. One lead at a time is displayed. You can switch leads using the button at the upper right corner of the interface window. A text string summarizing the analysis results is displayed at the top of the window.</p>\n</div>\n\n<p><strong>BatchTWA</strong> [performs a batch analysis for a set of records and outputs results into a text file]</p>\n\n<div>\n<p>For batch processing, set the current Matlab directory to the directory with all the data files. You are prompted to locate a file that contains a list of records to analyse (one record per string, no extensions). All available analysis options are performed. If you don&#39;t need something - alter the Metric and Method lists in BatchTWA.m . The results are stored in the current directory, in files twa_SM_replace.txt, twa_SM_differences.txt, twa_SM_lomb.txt, and twa_MMA.txt.</p>\n\n<p>&nbsp;</p>\n\n<p>Future work</p>\n\n<p>We have a long to-do list planned for this software, including: pre-filtering with PCA (as was used by the winning closed-source entry in the competition, although this entry did not provide TWA magnitudes, only rankings); reporting of heart rate (TWA that manifests above 110 BPM is unlikely to be clinically significant); tests to determine the effects of the unevenly sampled nature of TWA; dealing with TWA phase changes (after ectopy for example) and indicators to quantify this effect.</p>\n\n<h3>References</h3>\n\n<ul>\n\t<li>Khaustov A, Nemati S, Clifford GD An open-source standard T-wave alternans detector for benchmarking signals. <em>Computers in Cardiology</em> 2008. The conference presentation of this work is also available here ([HTML] or [PPT]).</li>\n\t<li>Martinez JP, Olmos S <a href=\"http://ieeexplore.ieee.org/iel5/10/30537/01408117.pdf\">Methodological principles of T wave alternans analysis: a unified framework.</a> <em>IEEE Transactions on Biomedical Engineering</em> <strong>52</strong>(4): 599-613; April 2005. [External link; requires subscription. The descriptions of the SM and MMA methods in this paper were the basis for the implementations of these methods presented here.]</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<h3>Credits</h3>\n\n<p>This project was a joint effort by <a href=\"mailto:avk@incart.ru?subject=TWAnalyser\">Alexander Khaustov</a> of the <a href=\"http://www.incart.ru\"> St.-Petersburg Institute of Cardiological Technics (INCART)</a>, and by Shamim Nemati and Gari Clifford of MIT. The software was contributed to PhysioNet by INCART. Please refer your questions to <a href=\"mailto:avk@incart.ru?subject=TWAnalyser\">avk@incart.ru</a>.</p>\n</div>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2008-11-18",
    "citation": "Khaustov A, Nemati S, Clifford GD An open-source standard T-wave alternans detector for benchmarking signals. Computers in Cardiology 2008.",
    "citation_url": "",
    "contact_name": "Alexander Khaustov",
    "contact_affiliations": "St.-Petersburg Institute of Cardiological Technics",
    "contact_email": "avk@incart.ru"
  }
},
{
  "model": "project.legacyproject",
  "pk": 128,
  "fields": {
    "title": "ECG-Kit",
    "slug": "ecgkit",
    "abstract": "<p>This toolbox is a collection of Matlab tools that Mariano Llamedo Soria used, adapted or developed during his PhD and post-doc work with the Besicos group at University of Zaragoza, Spain and at the National Technological University of Buenos Aires, Argentina.</p>",
    "full_description": "<h3>Software Description</h3>\n\n<p>The main feature of this toolbox is that it allows the use of several popular algorithms for ECG processing, including:</p>\n\n<ul>\n\t<li>Algorithms from Physionet&rsquo;s WFDB software package</li>\n\t<li>QRS detectors, such as <a href=\"https://physionet.org/physiotools/wag/gqrs-1.htm\">gqrs</a>, <a href=\"https://physionet.org/physiotools/ecg-kit/wag/wqrs-1.htm\">wqrs</a>, <a href=\"http://diec.unizar.es/~laguna/personal/publicaciones/wavedet_tbme04.pdf\">wavedet</a>, <a href=\"https://physionet.org/physiotools/ecgpuwave\">ecgpuwave</a>, <a href=\"http://dx.doi.org/10.1109/TBME.1985.325532\">Pan &amp; Tompkins</a>, <a href=\"http://www.eplimited.com/confirmation.htm\">EP limited</a></li>\n\t<li><a href=\"http://diec.unizar.es/~laguna/personal/publicaciones/wavedet_tbme04.pdf\">Wavelet-based ECG delineator</a></li>\n\t<li>Pulse wave detectors as <a href=\"https://physionet.org/physiotools/wag/wabp-1.htm\">wabp</a> and <a href=\"http://dx.doi.org/10.1109/JBHI.2013.2267096\">wavePPG</a></li>\n\t<li><a href=\"https://code.google.com/p/a2hbc/\">a2hbc</a> and <a href=\"http://www.eplimited.com/confirmation.htm\">EP limited</a> heartbeat classifiers</li>\n</ul>\n\n<p>The toolbox also includes scripts for inspecting, correcting and reporting results from these algorithms.</p>\n\n<p>ECG-kit has a common application programmer interface (API) implemented in Matlab under Windows, Linux or Mac. The kit also implements a recording interface that allows processing several ECG formats, such as MIT, ISHNE, HES, Mortara, and AHA, of arbitrary recording size. (The record so far is a one-week recording of 3 leads, sampled at 500 Hz).</p>\n\n<p>The project website is <a href=\"http://marianux.github.io/ecg-kit/\" title=\"ECG-kit project website\">http://marianux.github.io/ecg-kit/</a>. The directory listing below provides links to components of a stable version (1.0).</p>\n\n<p>Below are links to</p>\n\n<ul>\n\t<li><a href=\"http://ecg-kit.readthedocs.org/en/master/getting_started.html\">Installation documentation</a>.</li>\n\t<li><a href=\"https://www.youtube.com/watch?v=8lJtkGhrqFw&amp;list=PLlD2eDv5CIe9sA2atmnb-DX48FIRG46z7&amp;index=1\">A YouTube video</a>.</li>\n\t<li>A <a href=\"https://github.com/marianux/ecg-kit/issues\">GitHub code repository</a> for issue tracking and continuous update.</li>\n</ul>\n\n<p><strong>recording208.png</strong> shows a report of the mitdb/208 recording created with the ecg-kit toolbox. The QRS detections created with several algorithms are shown in different colours (vertical dotted lines ended with triangles). In addition, the ecg delineation is represented as coloured boxes superimposed to the signal. Finally the heartbeat classification is printed above each heartbeat.</p>\n\n<h3>Sample Input</h3>\n\n<p>The documentation includes a <a href=\"http://ecg-kit.readthedocs.org/en/master/first_example.html\">first example</a> and <a href=\"http://ecg-kit.readthedocs.org/en/master/examples.html\">another example</a>, as well as <a href=\"http://ecg-kit.readthedocs.org/en/master/index.html\">tutorials and further documentation</a>.</p>\n\n<p>Data from Physionet are included with the kit in the recordings subdirectory. ECG-kit has been tested on Windows 7 and Linux Ubuntu and Debian platforms.</p>\n\n<h3>Acknowledgments</h3>\n\n<p>Many thanks to Andr&eacute;s Demski from UTN who helped to this project before he learned how to use it. Thanks also to <em>all</em> the friends in Zaragoza, Porto and Lund, and especially to the ones closest to the project:</p>\n\n<ul>\n\t<li>Pablo Laguna, Juan Pablo Mart&iacute;nez, Rute Almeida and Juan Bolea, for the wavedet ECG delineator and many parts of the Biosig browser project that were adapted to this project.</li>\n\t<li>Jes&uacute;s L&aacute;zaro and Eduardo Gil for the PPG/ABP pulse detection code.</li>\n</ul>\n\n<p>We also acknowledge all those listed below, who were important in many ways to the fulfilment of this project:</p>\n\n<ul>\n\t<li>George Moody, Wei Zong, Ikaro Silva, for all the software of Physionet</li>\n\t<li>Reza Sameni, for his Open-Source ECG Toolbox (<a href=\"http://www.oset.ir/\">OSET</a>)</li>\n\t<li>Bob Duin and all the team behind <a href=\"http://prtools.org/\">PRtools</a></li>\n\t<li>Yair Altman from <a href=\"http://undocumentedmatlab.com/\">undocumented Matlab</a></li>\n</ul>",
    "doi": "",
    "version": "1.0",
    "resource_type": 1,
    "publish_date": "2015-11-09",
    "citation": "",
    "citation_url": "",
    "contact_name": "Mariano Llamedo Soria",
    "contact_affiliations": "Besicos Group at University of Zaragoza, Spain",
    "contact_email": "llamedom@gmail.com"
  }
},
{
  "model": "project.legacyproject",
  "pk": 129,
  "fields": {
    "title": "Measurement of Global Electrical Heterogeneity",
    "slug": "geh",
    "abstract": "<p>The Global Electrical Heterogeneity (GEH) concept is based on the theory of Wilson&rsquo;s electrical gradient vector, which characterizes the degree of heterogeneity of the total recovery time across the ventricles.</p>",
    "full_description": "<h3>Background</h3>\n\n<p>The Global Electrical Heterogeneity (GEH) concept is based on the theory of Wilson&rsquo;s electrical gradient vector, which characterizes the degree of heterogeneity of the total recovery time across the ventricles.</p>\n\n<p>The larger the degree of heterogeneity of total recovery time across the ventricles, the larger the spatial ventricular gradient (SVG) magnitude. The SVG vector points towards the area where the total recovery time is shortest. SVG vector points the direction along which non-uniformities in excitation and repolarization are the greatest (i.e., it is perpendicular to the line of conduction block). Experimental and theoretical investigations demonstrated that the SVG is related to global heterogeneity of both action potential duration and morphology.</p>\n\n<p>The concept underlying the SVG was extended to the spatial QRS-T angle, the three-dimensional angle between the QRS- and T-vectors and the sum absolute QRST integral (SAI QRST), a scalar analog of the SVG calculated as the absolute value of the area under the QRS complex and T-wave on the X, Y, and Z leads. The scalar value of SVG can also be calculated as a QT integral on Vector Magnitude signal (iVMQT), as an area under the Vector Magnitude signal curve from the QRS-onset to T-offset. Five GEH metrics (SVG magnitude, elevation, and azimuth, spatial QRS-T angle, and SAI QRST (or QT integral on Vector Magnitude signal, iVMQT) are complementary to each other; all together they characterize global electrophysiological properties of the heart. GEH is independently associated with sudden cardiac death. GEH can be measured on routinely used clinical 12-lead ECG, after its transformation into orthogonal (Frank) XYZ ECG. We recommend using Kors transformation.</p>\n\n<h3>Software Description and Usage</h3>\n\n<p>This page contains V.1 of the software. The working repository for this is hosted in the following github page: https://github.com/Tereshchenkolab/Global-Electrical-Heterogeneity.</p>\n\n<p>One test file <code>90757.mat</code> is provided for GEH calculation testing, with a sampling rate 500 Hz and amplitude resolution 1 &micro;V. A raw 12-lead ECG file <code>12LECG.mat</code> is provided to illustrate the Kors transformation from 12-lead to XYZ (Frank) ECG.</p>\n\n<p>For a demonstration, load <code>12LECG.mat</code> and run <code>Kors_git.m</code>, then load <code>90757.mat</code> and run <code>GEH_analysis_git.m</code></p>\n\n<h3>Authors</h3>\n\n<p>Erick Andres Perez Alday, PhD, perezald@ohsu.edu Annabel Li-Pershing, BS, lipershi@ohsu.edu Muammar Kabir, PhD, muammar.kabir@gmail.com Larisa Tereshchenko, MD, PhD, tereshch@ohsu.edu</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2018-05-02",
    "citation": "Waks JW, Sitlani CM, Soliman EZ, Kabir M, Ghafoori E, Biggs ML, Henrikson CA, Sotoodehnia N, Biering-Sorensen T, Agarwal SK, Siscovick DS, Post WS, Solomon SD, Buxton AE, Josephson ME and Tereshchenko LG. Global Electric Heterogeneity Risk Score for Prediction of Sudden Cardiac Death in the General Population: The Atherosclerosis Risk in Communities (ARIC) and Cardiovascular Health (CHS) Studies. Circulation. 2016;133:2222-2234.",
    "citation_url": "https://www.ncbi.nlm.nih.gov/pubmed/27081116",
    "contact_name": "Larisa Tereshchenko",
    "contact_affiliations": "Oregon Health and Science University",
    "contact_email": "tereshch@ohsu.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 130,
  "fields": {
    "title": "PhysioNet Cardiovascular Signal Toolbox",
    "slug": "physionet-cardiovascular-signal-toolbox",
    "abstract": "<p>The PhysioNet Cardiovascular Signal Toolbox is an open-source modular program for calculating heart rate variability (HRV) implemented in Matlab with evidence-based algorithms and output formats. The Toolbox is compatible with 64-bit MATLAB on GNU/Linux, Mac OS X, and MS-Windows.</p>",
    "full_description": "<h3>Introduction</h3>\n\n<p>The PhysioNet Cardiovascular Signal Toolbox is an open-source modular program for calculating heart rate variability (HRV) implemented in Matlab with evidence-based algorithms and output formats. The Toolbox is compatible with 64-bit MATLAB on GNU/Linux, Mac OS X, and MS-Windows.</p>\n\n<ul>\n\t<li>It was compared to several other open source and proprietary tools including the <a href=\"https://physionet.org/tutorials/hrv-toolkit/\"> PhysioNet C HRV Toolkit </a> to create a benchmark for the field.</li>\n\t<li>It was shown to be equivalent to the <a href=\"https://physionet.org/tutorials/hrv-toolkit/\"> PhysioNet C HRV Toolkit </a></li>\n\t<li>It contains the most extensive set of tools in any HRV algorithm collection so far published. (See list <a href=\"https://physionet.org/physiotools/physionet-cardiovascular-signal-toolbox/toolbox-functions\"> below </a> )</li>\n\t<li>It has no dependencies outside of Matlab (tested on Matlab R2017a and R2017b).</li>\n</ul>\n\n<p>Despite its popularity in research and relatively long history, there is still much disagreement in the methods by which researchers apply HRV signal processing. This disagreement limits meaningful comparisons between studies and scientific repeatability, especially when in-house, custom, non-public software are used.</p>\n\n<p>The PhysioNet Cardiovascular Signal Toolbox has been developed to address the issues of validation, standardization, and repeatability. It has been designed to accept a wide range of cardiovascular signals and analyze those signals with a variety of classic and modern signal processing methods. The toolbox includes many features not offered in other programs, including peak and pulse detection, signal quality analysis, rhythm detection, beat classification, general HRV statistics, phase rectified signal averaging (PRSA) techniques for deceleration and acceleration capacity, Detrended Fluctuation Analysis (DFA), Heart Rate Turbulence (HRT), Multiscale Entropy (MSE).</p>\n\n<p>The toolbox can process raw waveform data (such as electrocardiograms) as well as derived RR-interval data. Although it was designed not to deal with file formats, the toolbox natively supports MAT, CSV, or WFDB-compatible annotation formats without relying on PhysioNet&rsquo;s WFDB libraries (or other libraries). If users wish to export results from the HRV Toolbox, a function is included that allows for standard WFDB compatible output annotation files or CSV output files.</p>\n\n<p>The PhysioNet Cardiovascular Signal Toolbox employs several methods to prepare data for HRV estimation, including assessing signal quality and detecting arrhythmias, erroneous data, and noise. These segments of data, which must be excluded from HRV analysis, can then be systematically removed based on threshold settings selected by the user or recommended in previously validated studies. In particular, our toolbox contains one initialization file which lists all the options available, with typical default settings. In this way, a user may easily identify which settings need to be given considerable thought (all the ones listed) and provide this listing in a publication.</p>\n\n<p>&nbsp;</p>\n\n<p>The Toolbox is open-source (distributed under the <a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/tree/master/Documents/LICENSE\">GNU GPL (v3)</a>). Sources for the current version of the Toolbox are available <a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/releases\">here</a> (<a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/releases\">signature).</a> For development snapshots, see <a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox\">the project repository on GitHub.</a></p>\n\n<h3>Key Contributions</h3>\n\n<p>You might ask, why *another* HRV toolbox? The following is a list of key contributions this toolbox and accompanying publication makes to the field, and why you might want to use this in preference to other toolboxes and software out there.</p>\n\n<ul>\n\t<li>A full suite of waveform processing tools, for end-to-end processing,</li>\n\t<li>Detailed explanations of preprocessing and parameter choices to identify where divergences in methods can occur, and to provide standardization in the field,</li>\n\t<li>Benchmarked against other open source HRV tools to identify when they disagree with each other,</li>\n\t<li>Benchmarked against PhysioNet&#39;s C code for compatibility, and hence can be used as a prototyping platform before switching to C for large scalable tasks or embedded systems,</li>\n\t<li>A mostly comprehensive collection of standard and more recent HRV tools that go beyond other toolboxes,</li>\n\t<li>Fully scriptable with no libraries outside Matlab required for reading data and annotations,</li>\n\t<li>Fully WFDB-compatible,</li>\n\t<li>Compatibility with commercial software often used by clinicians (e.g. Kubios),</li>\n\t<li>Open source and versioned on Github so the community may build upon it.</li>\n</ul>\n\n<h3>Quick Start</h3>\n\n<p><strong>Prerequisites:</strong></p>\n\n<ul>\n\t<li>64-bit GNU/Linux, Mac OS X 10.9, or MS-Windows</li>\n\t<li>MATLAB R2017b or later, with Signal Processing Toolbox, Statistics and Machine Learning Toolbox, and Neural Network toolbox.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>How to Use the PhysioNet Cardiovascular Signal Toolbox:</strong></p>\n\n<ol>\n\t<li>Download. Install and Open MATLAB.</li>\n\t<li>Add the PhysioNet Cardiovascular Signal Toolbox folder and subfolders to your Matlab path</li>\n\t<li><strong>Test the Toolbox:</strong>\n\t<p>For a demonstration of the toolbox, go into the Demos subdirectory and run one of the available demonstrations:</p>\n\n\t<blockquote>\n\t<pre>DemoAnnotatedData\n</pre>\n\t</blockquote>\n\n\t<p>If these demos do not run successfully, please see the <a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Documents/FAQ.md\">Toolbox FAQ</a> for troubleshooting hints.</p>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<h3>Toolbox Functions</h3>\n\n<p>The PhysioNet Cardiovascular Signal Toolbox utilizes a standardized approach to preprocess data and compute HRV metrics using Matlab functions.</p>\n\n<p>Click on the adjacent [source] link to view source m-code of a function.</p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>InitializeHRVparams.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/InitializeHRVparams.m\">[source]</a></td>\n\t\t\t<td>Sets up variables that deal with thresholds, window settings, noise limits, and HRV analysis</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Main_HRV_Analysis</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Main_HRV_Analysis.m\">[source]</a></td>\n\t\t\t<td>Main Toolbox script configured to accept RR intervals as well as raw data as input file</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>ConvertRawDataToRRIntervals.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/ConvertRawDataToRRIntervals.m\">[source]</a></td>\n\t\t\t<td>For a raw ECG signal perfoms QRS detection, Signal Quality Index SQI and computes RR intervals</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Analyze_ABP_PPG_Waveforms.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/Analyze_ABP_PPG_Waveforms.m\">[source]</a></td>\n\t\t\t<td>Analyzes ABP ans/or PPG waveforms (Onsets detection and SQI).</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>PerformAFdetection.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/PerformAFdetection.m\">[source]</a></td>\n\t\t\t<td>Performs Atrial Fibrillation (AF) detection.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>CreateWindowRRintervals.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/CreateWindowRRintervals.m\">[source]</a></td>\n\t\t\t<td>Returns the starting time (in seconds) of each window to be analyzed and mark windows that do not meet the crieria.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>EvalTimeDomainHRVstats.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/tree/master/Tools/HRV_Metrics_Tools/EvalTimeDomainHRVstats.m\">[source]</a></td>\n\t\t\t<td>Returns returns time domain HRV metrics calculated on input NN intervals.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>EvalFrequencyDomainHRVstats.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/HRV_Metrics_Tools/EvalFrequencyDomainHRVstats.m\">[source]</a></td>\n\t\t\t<td>Returns frequency domain HRV metrics calculated on input NN intervals.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>prsa.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/PRSA_Tools/prsa.m\">[source]</a></td>\n\t\t\t<td>Calculates acceleration and deceleration capacity values.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>EvalDFA.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/DFA_Tools/EvalDFA.m\">[source]</a></td>\n\t\t\t<td>This function returns DFA scaling coefficients.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Eval_HRT.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/HRT/Eval_HRT.m\">[source]</a></td>\n\t\t\t<td>This function return TO and TS for heart rate turbulence (HRT).</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>EvalMSE.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/Entropy_Tools/EvalMSE.m\">[source]</a></td>\n\t\t\t<td>This function returns MultiScale Entropy MSE values.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>jqrs.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/ECG_Analysis_Tools/PeakDetection_SQI/jqrs.m\">[source]</a></td>\n\t\t\t<td>QRS detector based on the Pan-Tompkins method.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>bsqi.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/ECG_Analysis_Tools/PeakDetection_SQI/bsqi.m\">[source]</a></td>\n\t\t\t<td>Measure SQI of ECG signals by comparing two peak detection annotation files.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>run_wabp.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/BP_Tools/run_wabp.m\">[source]</a></td>\n\t\t\t<td>Beat detector for arterial blood presure (ABP) signal.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>jSQI.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/BP_Tools/jSQI.m\">[source]</a></td>\n\t\t\t<td>ABP waveform signal quality index.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>qppg.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/PPG_Tools/qppg.m\">[source]</a></td>\n\t\t\t<td>Beat detector for photoplethysmogram (PPG) signal.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>PPG_SQI_buf.m</td>\n\t\t\t<td><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Tools/PPG_Tools/qiao_pk_detect/PPG_SQI_20120125/PPG_SQI_buf.m\">[source]</a></td>\n\t\t\t<td>PPG SQI based on beat template correlation.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<h3>Frequently Asked Questions</h3>\n\n<p>Please make sure you check our list of frequently asked questions before contacting us! For the list of frequently asked questions, see our <a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/blob/master/Documents/FAQ.md\">FAQ</a>.</p>\n\n<p><em>For questions, contributions or feedback, please post on our GitHub page:</em></p>\n\n<p><a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/issues\">https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/issues</a></p>\n\n<p>&nbsp;</p>\n\n<h3>Acknowledgments</h3>\n\n<p>The PhysioNet Cardiovascular Signal Toolbox is a collection of algorithms designed and created over the last 20 years by <strong>Gari Clifford</strong>, his students and postdocs, and other collaborators, dilligently assembled, stress tested, updated, documented and Adriana N. Vest and Giulia Da Poian. Original contributors of open source code are credited in their respective MATLAB functions.</p>\n\n<p>We would particularly like to thank the following people for contributing their code: <strong>Qiao Li</strong>, <strong>Patrick McSharry</strong>, <strong>Shamim Nemati</strong>, <strong>James Sun</strong>. We would also like to thank <strong>Mika Tarvainen</strong>, <strong>Raphael Schnieder</strong>, <strong>Joe Mietus</strong>, <strong>George Moody</strong> and <strong>Danny Kaplan</strong> for providing (and running) source code for comparisons, benchmarking, and stress testing.</p>\n\n<p>Thanks are also due to <strong>Amit Shah</strong>, <strong>Roger Mark</strong>, <strong>Ary Goldberger</strong> for providing clinical insights during the process of creation.</p>\n\n<p>&nbsp;</p>\n\n<h3>Previous Releases</h3>\n\n<p>Previous releases of the PhysioNet Cardiovascular Signal Toolbox can be found <a href=\"https://github.com/cliffordlab/PhysioNet-Cardiovascular-Signal-Toolbox/releases\">here!</a>.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2018-04-28",
    "citation": "Vest A, Da Poian G, Li Q, Liu C, Nemati S, Shah A, Clifford GD, \"An Open Source Benchmarked Toolbox for Cardiovascular Waveform and Interval Analysis\" Physiological Measurement (In Press) DOI:10.5281/zenodo.1243111; 2018.",
    "citation_url": "https://zenodo.org/record/1243112",
    "contact_name": "Gari Clifford",
    "contact_affiliations": "MIT",
    "contact_email": "gari@alum.mit.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 131,
  "fields": {
    "title": "Dynamical Density Delay Maps",
    "slug": "dddmaps",
    "abstract": "<p>This project contains Matlab functions for visualizing the behavior of complex systems by means of the <a href=\"http://www.biomedcentral.com/content/pdf/1472-6947-14-6.pdf\"> dynamical density delay mapping (&quot;D3-Map&quot;) technique </a>. This simple-to-implement visualization method provides an animated representation of a system&#39;s dynamics.</p>",
    "full_description": "<h3>Software Description</h3>\n\n<p>This directory contains Matlab functions for visualizing the behavior of complex systems by means of the <a href=\"http://www.biomedcentral.com/content/pdf/1472-6947-14-6.pdf\"> dynamical density delay mapping (&quot;D3-Map&quot;) technique </a>. This simple-to-implement visualization method provides an animated representation of a system&#39;s dynamics. The method is based on a generalization of conventional two-dimensional (2D) Poincar&eacute; plots, which are scatter plots where each data point,x(n),in a time series is plotted against the adjacent one x (n + 1). First, we divide the original time series, x(n) (n=1,...,N), into a sequence of segments (windows). Next, for each segment, a three-dimensional (3D) Poincar&eacute; surface plot of x(n), x(n + 1), h[x(n), x(n + 1)] is generated, in which the third dimension, h,represents the relative frequency of occurrence of each (x(n),x(n + 1)) point. This 3D Poincar&eacute; surface is then chromatized by mapping the relative frequency h values onto a color scheme. We also generate a colorized 2D contour plot from each time series segment using the same colormap scheme as for the 3D Poincar&eacute; surface. Finally, the original time series graph, the colorized 3D Poincar&eacute; surface plot, and its projection as a colorized 2D contour map for each segment, are animated to create the full &quot;D3-Map&quot;.</p>\n\n<p>This visualization technique can be applied to cardiac interval time series, to uncover complex dynamical changes, e.g. transitions between sleep stages, or to detect hidden temporal patterns, e.g, RR patterns in atrial fibrillation.</p>\n\n<ul>\n\t<li>D3M-2Dfun.m generates colorized contour Poincar&eacute; plots</li>\n\t<li>D3M-3Dfun.m generates colorized 3D Poincar&eacute; surface maps</li>\n\t<li>dscatter2.m is a support function for creating a scatter plot colored by density</li>\n\t<li>D3Mdemo.m is a demo script to show how to generate videos with D3M-3Dfun.m</li>\n</ul>\n\n<p>The functions have been tested on Matlab R2013b.</p>\n\n<p>&nbsp;</p>\n\n<h3>Sample Input</h3>\n\n<p>The folders includes 3 cardiac interval time series for testing the functions:</p>\n\n<ul>\n\t<li>Sleep_RR.dat ASCII file with the cardiac interbeat (RR) intervals obtained from the electrocardiographic recording of a healthy subject during sleep (~6 h)</li>\n\t<li>Typical_AF.dat ASCII file with the cardiac interbeat (RR) intervals obtained from the electrocardiographic recording of a subject with atrial fibrillation</li>\n\t<li>Atypical_AF.dat ASCII file with the cardiac interbeat (RR) intervals obtained from the electrocardiographic recording of a subject with atrial fibrillation, whose contour and 3D maps show atypical (i.e., periodic) dynamical patterns</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<h3>Acknowledgments</h3>\n\n<p>This package was developed at the Wyss Institute at Harvard by A. Burykin, L. Citi, T. Silva, M.D. Costa and A.L. Goldberger. S. Mariani and T. Henriques contributed to the modification and packaging of the software and the creation of this tutorial.</p>\n\n<p>Users of our software should cite: Burykin A, Costa MD, Citi L, and Goldberger AL, <a href=\"http://www.biomedcentral.com/content/pdf/1472-6947-14-6.pdf\"> &quot;Dynamical density delay maps: simple, new method for visualising the behaviour of complex systems.&quot; </a> BMC Medical Informatics and Decision Making, 14.1 (2014): 6.</p>\n\n<p>&nbsp;</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2015-01-31",
    "citation": "Burykin A, Costa MD, Citi L, and Goldberger AL \"Dynamical density delay maps: simple, new method for visualising the behaviour of complex systems.\" BMC Medical Informatics and Decision Making, 14.1 (2014): 6.",
    "citation_url": "http://www.biomedcentral.com/content/pdf/1472-6947-14-6.pdf",
    "contact_name": "Ary Goldberger",
    "contact_affiliations": "Harvard University",
    "contact_email": "agoldberger@bidmc.harvard.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 132,
  "fields": {
    "title": "Detrended Fluctuation Analysis",
    "slug": "dfa",
    "abstract": "<p>The method of detrended fluctuation analysis has proven useful in revealing the extent of long-range correlations in time series.</p>",
    "full_description": "<h3>Introduction</h3>\n\n<p>The method of detrended fluctuation analysis has proven useful in revealing the extent of long-range correlations in time series. Briefly, the time series to be analyzed (with <em>N</em> samples) is first integrated. Next, the integrated time series is divided into boxes of equal length, <em>n</em>. In each box of length <em>n</em>, a least squares line is fit to the data (representing the <em>trend</em> in that box). The <em>y</em> coordinate of the straight line segments is denoted by <em>y<sub>n</sub>(k)</em>.</p>\n\n<p>Next, we detrend the integrated time series, <em>y</em>(<em>k</em>), by subtracting the local trend, <em>y<sub>n</sub>(k)</em>, in each box. The root-mean-square fluctuation of this integrated and detrended time series is calculated by the equation in <strong>dfa.png</strong></p>\n\n<p>This computation is repeated over all time scales (box sizes) to characterize the relationship between <em>F</em>(<em>n</em>), the average fluctuation, and the box size, <em>n</em>. Typically, <em>F</em>(<em>n</em>) will increase with box size. A linear relationship on a log-log plot indicates the presence of power law (fractal) scaling. Under such conditions, the fluctuations can be characterized by a scaling exponent, the slope of the line relating log <em>F(n)</em> to log <em>n</em>.</p>\n\n<p>&nbsp;</p>\n\n<h3>Software for DFA</h3>\n\n<p>The file dfa.c is the C language source for a program that performs detrended fluctuation analysis of a time series. Read about how to use this program <a href=\"https://physionet.org/physiotools/dfa/dfa-1.htm\">here</a> (or download this information in Unix man page format).</p>\n\n<p>The instructions below assume that you already have a C compiler, such as <a href=\"http://gcc.gnu.org/\">gcc</a>, and a make utility, such as <a href=\"http://www.gnu.org/software/make/\">GNU make</a>. Most GNU/Linux and Unix systems have these already. Under MS-Windows,we recommend the versions of gcc and make included in the free Cygwin development environment; under Mac OS X, use the versions included in Apple&#39;s XCode tools.</p>\n\n<ul>\n\t<li>Download dfa.c, Makefile, a sample input file (rr-intervals), and the corresponding output file (rr-dfa).</li>\n\t<li>Build dfa by typing:\n\t<pre>make\n</pre>\n\t</li>\n\t<li>Test the compiled dfa by typing:\n\t<pre>make check\n</pre>\n\t</li>\n\t<li>If dfa passes the test, install it by typing:\n\t<pre>make install\n</pre>\n\t</li>\n</ul>\n\n<p>If you wish to use some other C compiler, compile dfa.c and link it with the standard C math library, using whatever method is standard for your C compiler. See Makefile to see how to test the executable file that you compile.</p>\n\n<p>&nbsp;</p>\n\n<h3>Further information</h3>\n\n<p><a href=\"https://physionet.org/tutorials/fmnc/node5.html\">Learn more</a> about applications of DFA to physiologic time series in our tutorial, <a href=\"https://physionet.org/tutorials/fmnc/\">Fractal Mechanisms in Neural Control</a>. Also see the references at the top of this page.</p>\n\n<p>Two papers also available here discuss the effects of <a href=\"https://physionet.org/physiobank/database/synthetic/tns/paper1/\">trends</a> and <a href=\"https://physionet.org/physiobank/database/synthetic/tns/paper2/\">nonstationarities</a> on DFA.</p>\n\n<p>As of August 2012, the two original papers describing the DFA method had been cited by <a href=\"https://physionet.org/physiotools/dfa/citations.shtml\">about 1500 research articles</a>.</p>\n\n<p>This method was first proposed in: Peng C-K, Buldyrev SV, Havlin S, Simons M, Stanley HE, Goldberger AL. <a href=\"http://prola.aps.org/abstract/PRE/v49/i2/p1685_1\"> Mosaic organization of DNA nucleotides.</a> <em>Phys Rev E</em> 1994;<strong>49</strong>:1685-1689.</p>\n\n<p>A detailed description of the algorithm and its application to physiologic signals can be found in: Peng C-K, Havlin S, Stanley HE, Goldberger AL. <a href=\"http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=PubMed&amp;list_uids=11538314&amp;dopt=Abstract\">Quantification of scaling exponents and crossover phenomena in nonstationary heartbeat time series.</a> <em>Chaos</em> 1995;<strong>5</strong>:82-87.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2001-11-11",
    "citation": "A detailed description of the algorithm and its application to physiologic signals can be found in: Peng C-K, Havlin S, Stanley HE, Goldberger AL. Quantification of scaling exponents and crossover phenomena in nonstationary heartbeat time series. Chaos 1995;5:82-87.",
    "citation_url": "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=PubMed&list_uids=11538314&dopt=Abstract",
    "contact_name": "Chung-Kang Peng",
    "contact_affiliations": "Harvard Medical School",
    "contact_email": "cpeng@bidmc.harvard.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 133,
  "fields": {
    "title": "Generalized Multiscale Entropy Analysis",
    "slug": "gmse",
    "abstract": "<p>The method of generalized multiscale entropy (GMSE) analysis is useful for investigating complexity in physiologic signals and other series that have correlations at multiple (time) scales. It represents a generalization of the original method of multiscale entropy analysis.</p>",
    "full_description": "<p>The method of generalized multiscale entropy (GMSE) analysis is useful for investigating complexity in physiologic signals and other series that have correlations at multiple (time) scales. It represents a generalization of the original method of multiscale entropy analysis.</p>\n\n<p>A tutorial about generalized multiscale entropy analysis is available in the <strong>tutorial</strong> directory. It discusses various methods for calculating a coarse-grained time series, and the impact of this choice on the multiscale entropy calculation. The results are illustrated using simulated data as well as real inter-beat interval data.</p>\n\n<p>The software described in the tutorial in is <strong>gmse.c</strong>.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2019-02-02",
    "citation": "",
    "citation_url": "",
    "contact_name": "Ary Goldberger",
    "contact_affiliations": "Beth Israel Deaconess Medical Center",
    "contact_email": "agoldberger@bidmc.harvard.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 134,
  "fields": {
    "title": "Information-Based Similarity",
    "slug": "ibs",
    "abstract": "<p>IBS is a novel method for comparing time series based on linguistic analysis of &quot;word&quot; frequency and rank order statistics. It has been applied successfully in a variety of applications, including analysis of interbeat (RR) intervals, classification of the SARS coronavirus, and study of literary works of disputed authorship.</p>",
    "full_description": "<h3>Software Description</h3>\n\n<p>IBS is a novel method for comparing time series based on linguistic analysis of &quot;word&quot; frequency and rank order statistics. It has been applied successfully in a variety of applications, including analysis of interbeat (RR) intervals, classification of the SARS coronavirus, and study of literary works of disputed authorship.</p>\n\n<p>A tutorial introduction to the IBS method is available <a href=\"https://physionet.org/physiotools/ibs/doc/\">here</a>, and IBS software may be downloaded from the <strong>src</strong> directory.</p>\n\n<p>Albert CC Yang has provided an <a href=\"http://psynet.vghtpe.gov.tw/ibs/index.html\">introduction to IBS for general audiences</a>, focusing on analysis of written text, together with an alternative implementation of IBS aimed at textual analysis.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2004-10-26",
    "citation": "Yang AC, Hseu SS, Yien HW, Goldberger AL, Peng CK: Linguistic analysis of the human heartbeat using frequency and rank order statistics. Phys Rev Lett 2003, 90: 108103.",
    "citation_url": "http://link.aps.org/abstract/PRL/v90/e108103",
    "contact_name": "Ary Goldberger",
    "contact_affiliations": "Beth Israel Deaconess Medical Center",
    "contact_email": "agoldberger@bidmc.harvard.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 135,
  "fields": {
    "title": "A practical method for calculating Lyapunov exponents from small data sets",
    "slug": "lyapunov",
    "abstract": "<p>Detecting the presence of chaos in a dynamical system is an important problem that is solved by measuring the largest Lyapunov exponent. Lyapunov exponents quantify the exponential divergence of initially close state-space trajectories and estimate the amount of chaos in a system.</p>",
    "full_description": "<h3>Abstract</h3>\n\n<p>Detecting the presence of chaos in a dynamical system is an important problem that is solved by measuring the largest Lyapunov exponent. Lyapunov exponents quantify the exponential divergence of initially close state-space trajectories and estimate the amount of chaos in a system. We present a new method for calculating the largest Lyapunov exponent from an experimental time series. The method follows directly from the definition of the largest Lyapunov exponent and is accurate because it takes advantage of all the available data. We show that the algorithm is fast, easy to implement, and robust to changes in the following quantities: embedding dimension, size of data set, reconstruction delay, and noise level. Furthermore, one may use the algorithm to calculate simultaneously the correlation dimension. Thus, one sequence of computations will yield an estimate of both the level of chaos and the system complexity.</p>\n\n<p>The full article may be downloaded in <a href=\"https://physionet.org/physiotools/lyapunov/RosensteinM93.pdf\">PDF</a> (783KB) or <a href=\"https://physionet.org/physiotools/lyapunov/RosensteinM93.ps.gz\">gzip-compressed PostScript</a> (361KB) formats.</p>\n\n<p>&nbsp;</p>\n\n<h3>See also</h3>\n\n<p><a href=\"http://www.cs.umass.edu/~mtr/papers/RosensteinM94b.html\">Visualizing the effects of filtering chaotic signals</a></p>\n\n<p><a href=\"http://www.cs.umass.edu/~mtr/papers/RosensteinM94a.html\">Reconstruction expansion as a geometry-based framework for choosing proper delay times</a></p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2001-01-16",
    "citation": "M.T. Rosenstein, J.J. Collins, and C.J. De Luca. A practical method for calculating largest Lyapunov exponents from small data sets.  This article originally appeared in Physica D 65:117-134, 1993",
    "citation_url": "",
    "contact_name": "PhysioNet Webmaster",
    "contact_affiliations": "MIT",
    "contact_email": "webmaster@physionet.org"
  }
},
{
  "model": "project.legacyproject",
  "pk": 136,
  "fields": {
    "title": "Multiscale Multifractal Analysis",
    "slug": "mma",
    "abstract": "<p>Multiscale multifractal analysis (MMA) (Giera\u0142towski et al., 2012) is a time series analysis method, designed to describe scaling properties of fluctuations within the signal analyzed. The main result of this procedure is the so called Hurst surface <em> h(q,s) </em>, which is a dependence of the local Hurst exponent <em> h </em> (fluctuation scaling exponent) on the multifractal parameter <em> q </em> (Kantelhardt et al., 2002) and the scale of observation <em> s </em> (data window width).</p>",
    "full_description": "<h3>Description</h3>\n\n<p>Multiscale multifractal analysis (MMA) (Giera\u0142towski et al., 2012) is a time series analysis method, designed to describe scaling properties of fluctuations within the signal analyzed. The main result of this procedure is the so called Hurst surface <em> h(q,s) </em>, which is a dependence of the local Hurst exponent <em> h </em> (fluctuation scaling exponent) on the multifractal parameter <em> q </em> (Kantelhardt et al., 2002) and the scale of observation <em> s </em> (data window width).</p>\n\n<p>MMA is a generalization of the standard multifractal detrended fluctuation analysis (MF-DFA) method (Kantelhardt et al., 2002) and adds the dependence on scale, yielding a broader analysis of the fluctuation properties as well as more universal and stable results. As a generalization, the method corresponds directly to earlier fractal signal analysis methods. On the Hurst surface <em> h(q,s) </em>, the results of the standard DFA (Peng et al., 1994) method are represented by one (or two) single points corresponding to the exponent <em> a </em> (or <em>a1</em> and <em> a2 </em>). The results of standard MF-DFA are represented by a single line: a cross section of <em>h(q,s)</em> at a constant <em>s</em> (in standard realization at <em>s=</em> 360).</p>\n\n<p>The Hurst exponent larger than 0.5 is a measure of persistency of the signal (West et al., 2003; Schroeder, 1992) meaning how probable is it that, if the signal has just increased, the next sample will also be an increase of the signal value (and conversely for a decreasing signal). As usual in multifractal analysis, for a <em>q&gt;0</em> parameter the large fluctuations in the data are analyzed, while, for <em>q&lt;0</em>, - the small fluctuations.</p>\n\n<p>MMA eliminates the need for initial assumptions about the presumed time scale of the investigated problem. The new method is able to characterize monofractality or multifractality of the time series in a wide range of frequencies (scales) simultaneously and may be easily applied to data with strong crossover properties. It can correctly recognize fractal properties of time series even for relatively small scales, and it is capable of properly recognizing different fractal properties in small and large scales simultaneously.</p>\n\n<p>The Matlab code, MMA.m, in this directory contains function calculating Hurst surface <em> h(q,s) </em> for a time series. Function name: <em>MMA</em>. As a parameter function takes name of a single file or directory with files to be analyzed. File needs to have .txt extension and contain at least 1200 datapoints.</p>\n\n<p>&nbsp;</p>\n\n<h3>Usage</h3>\n\n<p>Usage example:</p>\n\n<pre>   MMA(filename) or  MMA(directory_name) \n</pre>\n\n<p>where <em>filename</em> (e.g., C:\\directory\\filename.txt) should be a full-path filename; and <em>directory_name</em> (e.g., C:\\directory) is the name of the directory containing the input files.</p>\n\n<p>&nbsp;</p>\n\n<h3>Options</h3>\n\n<p>The <em>MMA.m</em> file contains a set of parameters, which if needed, can be adjusted by the user:</p>\n\n<dl>\n\t<dt><strong>overlapping = 0 </strong></dt>\n\t<dd>0 - time series is partitioned into no overlapping windows of analysis,</dd>\n\t<dd>1 - time series is partitioned into overlapping windows of analysis, step between consecutive windows is = 1 (much longer calculations)</dd>\n\t<dt><strong>smin = 10 </strong></dt>\n\t<dd>minimal s scale used, when calculating Fq(s) functions family . Default is <em>smin</em> = 10.</dd>\n\t<dt><strong>smax = 600 </strong></dt>\n\t<dd>maximal s scale used, when calculating Fq(s) functions family, has to be multiple of 5. Default is <em>smax&gt;</em> = 600; in general should be near to N/50, where N is a time series length.</dd>\n\t<dt><strong>qmin = -5 </strong></dt>\n\t<dd>minimal multifractal parameter q used (default -5)</dd>\n\t<dt><strong>qmax = 5 </strong></dt>\n\t<dd>maximal multifractal parameter q used (deafault 5)</dd>\n\t<dt><strong>precisionMode = 0 </strong></dt>\n\t<dd>0 (default) better looking plot, smaller files, faster calculations; set 1 for enhanced precision (smaller <em>q</em> and <em>s</em> steps)</dd>\n\t<dd>&nbsp;</dd>\n</dl>\n\n<h3>Sample Input &amp; Output</h3>\n\n<p>Sample input time series can be found in the subfolder <em>Sample_time_series_with_results</em>.</p>\n\n<div><strong>Sample1_monofractal_white_noise</strong> - random numbers, normal distribution (0,1), series length 2^14. Classic monofractal time series sample. For all scales s and for all q parameters we expect Hurst exponent <em> h = </em> 0.5 (i.e. flat surface).\n\n<p><strong>Sample2_monofractal_1_over_f^1_noise</strong> - 1/f noise, normal distribution (0.004,0.016), series length 2^14. Another classic monofractal time series sample. For all scales s and for all q parameters we expect Hurst exponent <em> h = </em> 1 (i.e. flat surface).</p>\n\n<p><strong>Sample3_multifractal_Cauchy_distribution_noise</strong> - Random number series with Cauchy distribution (heavy-tailed distribution). Sample of a time series with strong multifractality stemming only from distribution.</p>\n\n<p><strong>Sample4_mono_multi_fractal_phase_transition</strong> - Special example of time series with strong multifractal properties for short scales s and with strong monofractal properties for small scales s. Time series used as an example in (Giera\u0142towski et al. 2012) (see Fig. 3).</p>\n\n<p><strong>Sample5_RR_interval_series_healthy</strong> - night-time RR interval series for a healthy, 25 years old man. Characteristic, highly repetitive shape of Hurst surface for RR interval series of healthy adults during sleep.</p>\n</div>\n\n<p>The corresponding output from <em>MMA</em> using the above input files can be found in the subfolder <em> Sample_time_series_with_results/MMA_results/</em>.</p>\n\n<p>&nbsp;</p>\n\n<h3>References</h3>\n\n<div>\n<p>[Giera\u0142towski et al., 2012] J. Giera\u0142towski, J. J. \u017bebrowski, and R. Baranowski, &quot;Multiscale multifractal analysis of heart rate variability recordings with a large number of occurrences of arrhythmia,&quot; Phys. Rev. E 85, 021915 (2012) [DOI: 10.1103/PhysRevE.85.021915].</p>\n\n<p>[Kantelhardt et al., 2002] J. W. Kantelhardt, S. A. Zschiegner, E. Koscielny-Bunde, S. Havlin, A. Bunde, and H. E. Stanley, &quot;Physica A: Statistical Mechanics and its Applications,&quot; Physica A 316, 87 (2002).</p>\n\n<p>[Peng et al., 1994] C.-K. Peng, S. V. Buldyrev, S. Havlin, M. Simons, H. E. Stanley, and A. L. Goldberger, &quot;Mosaic organization of DNA nucleotides,&quot; Phys. Rev. E 49, 1685 (1994).</p>\n\n<p>[West et al., 2003] B. J. West and N. Scafetta, &quot;Nonlinear dynamical model of human gait,&quot; Phys. Rev. E 67, 051917 (2003).</p>\n\n<p>[Schroeder, 1992] M. Schroeder, Fractals, Chaos, Power Laws: Minutes from an Infinite Paradise (Freeman, New York, 1992).</p>\n</div>\n\n<p>&nbsp;</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2015-01-31",
    "citation": "J. Giera\u0142towski, J. J. \u017bebrowski, and R. Baranowski, \"Multiscale multifractal analysis of heart rate variability recordings with a large number of occurrences of arrhythmia,\" Phys. Rev. E 85, 021915 (2012) [DOI: 10.1103/PhysRevE.85.021915].",
    "citation_url": "http://dx.doi.org/10.1103/PhysRevE.85.021915",
    "contact_name": "PhysioNet Support",
    "contact_affiliations": "MIT",
    "contact_email": "webmaster@physionet.org"
  }
},
{
  "model": "project.legacyproject",
  "pk": 137,
  "fields": {
    "title": "Multiscale Entropy Analysis",
    "slug": "mse",
    "abstract": "<p>The method of multiscale entropy (MSE) analysis is useful for investigating complexity in physiologic signals and other series that have correlations at multiple (time) scales.</p>",
    "full_description": "<h3>Software Description</h3>\n\n<p>The method of multiscale entropy (MSE) analysis is useful for investigating complexity in physiologic signals and other series that have correlations at multiple (time) scales.</p>\n\n<p>A tutorial about multiscale entropy analysis is available <a href=\"https://physionet.org/physiotools/mse/tutorial/\">here</a> (a <a href=\"https://physionet.org/physiotools/mse/tutorial/tutorial.pdf\">PDF</a> version is also available). The tutorial introduces the concept of MSE, describes an algorithm for calculating MSE using <a href=\"https://physionet.org/physiotools/sampen/\">sample entropy</a> (SampEn), presents a portable implementation of this algorithm, and illustrates its use with interbeat (RR) interval time series.</p>",
    "doi": "",
    "version": "1.0",
    "resource_type": 1,
    "publish_date": "2004-08-04",
    "citation": "",
    "citation_url": "",
    "contact_name": "Ary Goldberger",
    "contact_affiliations": "Beth Israel Deaconess Medical Center",
    "contact_email": "agoldberger@bidmc.harvard.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 138,
  "fields": {
    "title": "Software for Analysis of Multifractal Time Series",
    "slug": "multifractal",
    "abstract": "<p>Software for calculating multifractal partitions and moments of a time series.</p>",
    "full_description": "<h3>Software Description</h3>\n\n<p>Software for calculating multifractal partitions and moments of a time series is available here. To begin, download these files:</p>\n\n<ul>\n\t<li>multifractal.c</li>\n\t<li>mf_moments_lt.awk</li>\n\t<li>Makefile</li>\n\t<li>testfiles.tar.gz</li>\n</ul>\n\n<p>In order to to use this code correctly, it is recommended you review:</p>\n\n<div>\n<p>J.F. Muzy, E. Bacry and A. Arneodo. Multifractal formalism for fractal signals: <a href=\"http://prola.aps.org/abstract/PRE/v47/i2/p875_1\">The structure-function approach versus the wavelet-transform modulus-maxima method.</a> <em>Physical Review E</em> <strong>47</strong>:875-884, 1993.</p>\n</div>\n\n<p>We also recommend the PhysioNet tutorial <a href=\"https://physionet.org/tutorials/multifractal/\">&quot;A Brief Overview of Multifractal Time Series&quot;</a>.</p>\n\n<p>&nbsp;</p>\n\n<h3>Requirements</h3>\n\n<ul>\n\t<li>A C compiler; <a href=\"http://gcc.gnu.org/\">gcc</a> is recommended</li>\n\t<li>awk (or <a href=\"http://www.gnu.org/software/gawk/\">gawk</a>) pattern scanning and processing language</li>\n\t<li><a href=\"http://www.gnu.org/software/make/\">make</a> (optional but recommended)</li>\n\t<li><a href=\"http://www.gnu.org/software/tar/\">tar</a> (recommended for unpacking the test files)</li>\n</ul>\n\n<p>All of these are standard on Unix, Linux, and Mac OS X systems, and are freely available for Windows as parts of <a href=\"http://www.cygwin.com/\">Cygwin</a>).</p>\n\n<p>&nbsp;</p>\n\n<h3>Compiling</h3>\n\n<p>If you have a make utility, you can use it to compile and test the software, simply by typing ``make check&#39;&#39; (look in <a href=\"https://physionet.org/physiotools/multifractal/Makefile\">Makefile</a> to see what this command does). Otherwise, compile ibs.c and link it with the C standard math library. For example, if you use the GNU C compiler (recommended), you can do this by:</p>\n\n<pre>     gcc -o multifractal -O multifractal.c -lm\n</pre>\n\n<p>&nbsp;</p>\n\n<h3>Usage</h3>\n\n<p>For brief instructions about how to run the program, type its name at a command prompt:</p>\n\n<pre>    multifractal\n</pre>\n\n<p>which should produce a message similar to:</p>\n\n<pre>    multifractal INPUT N QMIN QMAX DW MODE &gt;OUTPUT\n       INPUT  name of file containing the input time series\n       N      number of points (lines) in INPUT\n       QMIN   minimum MF order (moment, q)\n       QMAX   maximum MF order\n       DW     order of the Gaussian derivative wavelet (0-7)\n       MODE   the type of output to be produced, one of:\n                 1: partition functions (text)\n                 2: maxima lines (text)\n                 3: wavelet cascade (PPM image)\n\n    INPUT is a text file containing two columns of numbers; the\n    first is ignored, and the second contains the data values.\n</pre>\n\n<p>Note that when the Hurst exponent of the input series is negative (i.e., when its <a href=\"https://physionet.org/physiotools/dfa/\">DFA</a> scaling exponent is less than 1), it is necessary to integrate the series before using it as input to this software!</p>\n\n<p>&nbsp;</p>\n\n<h3>Output formats</h3>\n\n<p>As noted above, multifractal can produce three different types of output. The output type is selected by passing 1, 2, or 3 as the sizth argument on the command line; the results of these choices are:</p>\n\n<ul>\n\t<li>1: (text, partition functions) The first column is the scale and the remaining columns give the partition functions for all MF orders in the selected range. All output values are log10-transformed.</li>\n\t<li>2: (text, maxima lines) The first column is the index of the time series (time index), and the second is the scale where the maximum appears at that time. The scales are log10-transformed.</li>\n\t<li>3: (PPM image, wavelet cascade) This file can be viewed using the freely available display application included in <a href=\"http://www.imagemagick.org/\">ImageMagick</a>, as well as a variety of other image viewers.</li>\n</ul>\n\n<p>The tau(q) and multifractal spectra of the input time series can be obtained from the partition functions (MODE 1) using mf_moments_lt.awk; see below.</p>\n\n<p>&nbsp;</p>\n\n<h3>Example of multifractal analysis</h3>\n\n<p>The input to multifractal is a text file containing two columns of numbers (time and data values).</p>\n\n<p>An example multifractal time series, for which the spectrum tau(q) and the MF spectrum D(h) are analytically known, is provided in the file log_normal_sigma0.1, which can be obtained by unpacking <a href=\"https://physionet.org/physiotools/multifractal/testfiles.tar.gz\">testfiles.tar.gz</a>:</p>\n\n<pre>    tar xfvz testfiles.tar.gz\n</pre>\n\n<p>To generate this example time series, we used the log-normal wavelet cascade algorithm, with parameters nu = -ln(2)/4 and sigma = 0.1, as described in:</p>\n\n<div>\n<p>&nbsp;</p>\nA. Arneodo, E. Bacry, and J. F. Muzy. Random cascades on wavelet dyadic trees. <em>J. Math. Phys.</em> <strong>39</strong>:4142 (1998).\n\n<p>&nbsp;</p>\n</div>\n\n<p>First, we generate the multifractal partition function, using the command:</p>\n\n<pre>    multifractal log_normal_sigma0.1 32768 -5 5 3 1 &gt;out.zq\n</pre>\n\n<p>where:</p>\n\n<ul>\n\t<li>log_normal_sigma0.1 is the name of the input file (text, two columns)</li>\n\t<li>32768 is the number of points (lines in the input file)</li>\n\t<li>-5 specifies the minimum MF order (moment <em>q</em>)</li>\n\t<li>5 specifies the maximum MF order</li>\n\t<li>3 specifies that the third derivative Gaussian wavelet is to be used; values between 0 (Gaussian) and 7 (seventh derivative) are acceptable</li>\n\t<li>1 indicates that the program should produce the partition function; other legal values are 2 (produce maxima lines) and 3 (produce a PPM image of the wavelet cascade)</li>\n\t<li>out.zq is the name of the output file, to which the partition functions are to be written</li>\n</ul>\n\n<p>Note that multifractal performs a computationally intensive process that may require a minute or more to complete, even on a fast PC. Be patient!</p>\n\n<p>After obtaining the partition function (out.zq in our case), we may calculate the tau(q) spectrum and the multifractal spectrum D(h), using the awk program, mf_moments_lt.awk:</p>\n\n<pre>    awk -f mf_moments_lt.awk -v a=1 -v b=2.53 out.zq &gt;out.tq\n</pre>\n\n<p>In this command, we have specified the range over which the scaling is calculated (between log10(scale)=1 and log10(scale)=2.53; the -v option indicates that a parameter assigment follows, and the parameters a and b are the upper and lower limits of the scaling range). The program reads out.zq (the output that we have just obtained from multifractal), and it writes the corresponding tau(q) and D(h) curves into out.tq.</p>\n\n<p>&nbsp;</p>\n\n<h3>Further information</h3>\n\n<p>If you have questions or comments about this software, please contact the author, <a href=\"mailto:ashkena@bgu.ac.il\">Yossi Ashkenazy</a>.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2002-05-29",
    "citation": "",
    "citation_url": "",
    "contact_name": "Yossi Ashkenazy",
    "contact_affiliations": "Ben-Gurion University of the Negev",
    "contact_email": "ashkena@bgu.ac.il"
  }
},
{
  "model": "project.legacyproject",
  "pk": 139,
  "fields": {
    "title": "Sample Entropy Estimation",
    "slug": "sampen",
    "abstract": "<p>Sample Entropy is a useful tool for investigating the dynamics of heart rate and other time series. Sample Entropy is the negative natural logarithm of an estimate of the conditional probability that subseries (epochs) of length <em>m</em> that match pointwise within a tolerance <em>r</em> also match at the next point.</p>",
    "full_description": "<h3>Synopsis</h3>\n\n<p><strong>sampen</strong> [ <em>option</em> ... ] [ <em>input-file</em> ]</p>\n\n<p>&nbsp;</p>\n\n<h3>Description</h3>\n\n<p>Sample Entropy is a useful tool for investigating the dynamics of heart rate and other time series. Sample Entropy is the negative natural logarithm of an estimate of the conditional probability that subseries (epochs) of length <em>m</em> that match pointwise within a tolerance <em>r</em> also match at the next point.</p>\n\n<p>This program calculates the sample entropy of the time series given in the specified (text format) <em>input-file</em>. (If no <em>input-file</em> is specified, <strong>sampen</strong> reads the time series from its standard input.) The outputs are the sample entropies of the input, for all epoch lengths of 1 to a specified maximum length, <em>m</em>.</p>\n\n<p>The algorithm builds up runs of points matching within the tolerance <em>r</em> until there is not a match, and keeps track of template matches in counters <em>A(k)</em> and <em>B(k)</em> for all lengths <em>k</em> up to <em>m</em>. If a particular run ends up being of length 4, for example, then that means that 1 is added to the count for template matches of length 4. In addition, there are 2 template matches of length 3, 3 of length 2, and 4 of length 1 that need to be added to the corresponding counts. A special case is needed when a run ends at the last point in the data, where the <em>A(k)</em> counters are incremented but the <em>B(k)</em> counters are not. Once all the matches are counted, the sample entropy values are calculated by <em>SampEn(k,r,N)=-ln(A(k)/B(k-1)</em> for <em>k</em>=0,1,...,m-1 with <em>B(0)=N</em>, the length of the input series.</p>\n\n<p>The algorithm to find runs starts by finding all points that match the first point within a tolerance <em>r</em>. The points that match begin a run of length 1 and those that don&#39;t match have runs of length 0. If the points after those with runs of length 1 match the second point, the runs are now of length 2; otherwise, the run is ended. If the points after those with runs of length 0 match the second point, the runs are now of length 1. This procedure of finding runs is continued until the end of the data.</p>\n\n<p>The <strong>-n</strong> option normalizes the data before finding matches, which is equivalent to the common practice of expressing the tolerance as <em>r</em> times the standard deviation. The <strong>-v</strong> option estimates the standard deviations for the SampEn statistic using a procedure described in the references below. This calculation is rather involved and can increase the calculation time considerably, especially for large <em>N</em>.</p>\n\n<p>&nbsp;</p>\n\n<h3>Options</h3>\n\n<dl>\n\t<dt><strong>-h <em>r</em></strong></dt>\n\t<dd>Print a usage summary.</dd>\n\t<dt><strong>-m <em>m</em></strong></dt>\n\t<dd>Set the maximum epoch length to <em>m</em>. Default is <em>m</em> = 2.</dd>\n\t<dt><strong>-n</strong></dt>\n\t<dd>&quot;Normalize&quot; the time series prior to the estimation of sample entropy, by transforming the time series to have sample mean 0 and sample variance 1.</dd>\n\t<dt><strong>-r <em>r</em></strong></dt>\n\t<dd>Set the tolerance to <em>r</em>. Default is <em>r</em> = 0.2.</dd>\n\t<dt><strong>-v</strong></dt>\n\t<dd>Output an estimate of the standard deviation of the sample entropy estimate<br>\n\tfor each epoch length.</dd>\n\t<dd>&nbsp;</dd>\n</dl>\n\n<h3>See Also</h3>\n\n<p>The following references discuss Sample Entropy and a closely related entropy measure called Approximate Entropy:</p>\n\n<dl>\n\t<dt>Lake, D. E., J. S. Richman, M. P. Griffin, and J. R. Moorman.</dt>\n\t<dd>Sample entropy analysis of neonatal heart rate variability. <em>Am J Physiol</em> 2002; <strong>283</strong>(3):R789-R797;\n\t<p><a href=\"http://ajpregu.physiology.org/content/283/3/R789.abstract\">http://ajpregu.physiology.org/content/283/3/R789.abstract</a></p>\n\t</dd>\n\t<dt>Richman, J. S. and J. R. Moorman.</dt>\n\t<dd>Physiological time series analysis using approximate entropy and sample entropy. <em>Am J Physiol</em> 2000; <strong>278</strong>(6):H2039-H2049; <a href=\"http://ajpheart.physiology.org/content/278/6/H2039.abstract\">http://ajpheart.physiology.org/content/278/6/H2039.abstract</a></dd>\n</dl>\n\n<p>Matlab code for calculating Sample Entropy is also available; see <a href=\"http://www.physionet.org/physiotools/sampen/matlab/\">http://www.physionet.org/physiotools/sampen/matlab/</a>.</p>\n\n<p>Also see this <a href=\"https://physionet.org/physiotools/sampen/00README\">note</a> about testing sampen and interpreting its output.</p>\n\n<p>&nbsp;</p>\n\n<h3>Authors</h3>\n\n<p>DK Lake (dlake at virginia dot edu), JR Moorman and Cao Hanqing.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2004-11-08",
    "citation": "Lake, D. E., J. S. Richman, M. P. Griffin, and J. R. Moorman. Sample entropy analysis of neonatal heart rate variability. Am J Physiol 2002; 283(3):R789-R797;",
    "citation_url": "http://ajpregu.physiology.org/content/283/3/R789.abstract",
    "contact_name": "DK Lake",
    "contact_affiliations": "University of Virginia",
    "contact_email": "dlake@virginia.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 140,
  "fields": {
    "title": "Transfer Entropy With Partitioning",
    "slug": "tewp",
    "abstract": "<p>This is a repository of MATLAB functions that can estimate transfer entropy (information flow) from one time series to another using a non-parametric partitioning algorithm.</p>",
    "full_description": "<h3>Description</h3>\n\n<p>This is a repository of MATLAB functions that can estimate transfer entropy (information flow) from one time series to another using a non-parametric partitioning algorithm. Also included is an example data set that the implemented algorithms can be applied to.</p>\n\n<p>The functions have been tested in MATLAB R2016b on 03 March 2016.</p>\n\n<p>&nbsp;</p>\n\n<h3>Usage</h3>\n\n<p>There are three functions used to calculate transfer entropy between time series using different methods of probability density estimation:</p>\n\n<ul>\n\t<li>[T] = transferEntropyKDE(X,Y,t,w,N,bw_coeff)\n\t<ul>\n\t\t<li>Based on Guassian kernel density estimation.</li>\n\t\t<li>Calls function mdKDE</li>\n\t</ul>\n\t</li>\n\t<li>[T nPar dimPar]=transferEntropyPartition(X,Y,t,w)\n\t<ul>\n\t\t<li>Based on the Darbellay-Vajda partitioning algorithm</li>\n\t\t<li>Calls function DVpartition3D</li>\n\t</ul>\n\t</li>\n\t<li>[T] = transferEntropyRank(X,Y,l,k,t,w,Q)\n\t<ul>\n\t\t<li>Based on bin counting with fixed and equally-spaced bins.</li>\n\t\t<li>Calls function quantentr</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>The MAT file &#39;<em>example_data.mat</em>&#39; contains a 1-D structure array of example data that harnesses an information flow from X to Y at a lag of 2 according to: <strong>y(i)=[(1+a)*x(i-2)]^2</strong><br>\nDifferent values of the coupling constant &#39;<strong>a</strong>&#39; were simulated, along with associated levels of Laplacian noise given by SNR levels.</p>\n\n<ul>\n\t<li>For a demonstration, run &#39;demoscript.m&#39;. The plotted results should look like figure 1.</li>\n\t<li>See the individual .m function files for information on how to call them.</li>\n\t<li>See readme_example_data.txt for information on the example data parameters.</li>\n\t<li>See <a href=\"https://physionet.org/physiotools/tewp/\">Measuring Information Transfer</a>, Physical Review Letters, 85(2):461-464, 2000 for more details on the methods.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<h3>Acknowledgments</h3>\n\n<p>This package was developed by J. Lee, S. Nemati, and I. Silvia.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2016-03-04",
    "citation": "Lee et al. Transfer Entropy Estimation and Directional Coupling Change Detection in Biomedical Time Series. Biomedical Engineering Online 2012 11:19.",
    "citation_url": "http://link.springer.com/article/10.1186/1475-925X-11-19",
    "contact_name": "Joon Lee",
    "contact_affiliations": "Massachusetts Institute of Technology",
    "contact_email": "joonlee@mit.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 141,
  "fields": {
    "title": "Estimating Activity from Instantaneous Heart Rate",
    "slug": "activity",
    "abstract": "<p>Using only a heart rate time series, it is possible to measure a number of features that reflect the level of physical activity. Here we provide software for deriving an &quot;activity index&quot; based on measurements of mean heart rate, total power of the instantaneous heart rate time series over a given interval, and stationarity.</p>",
    "full_description": "<h3>Software Description</h3>\n\n<p>A common problem in many studies is to match levels of physical activity between subjects. In prospective studies, the solution to this problem is usually accomplished by developing and following a protocol that specifies activities. In retrospective studies, such as those that can be performed using PhysioBank data, however, reliable data on activity is often unavailable, so that indirect methods for assessing activity may become useful.</p>\n\n<p>Using only a heart rate time series, it is possible to measure a number of features that reflect the level of physical activity. Here we provide software for deriving an &quot;activity index&quot; based on measurements of mean heart rate, total power of the instantaneous heart rate time series over a given interval, and stationarity. The algorithm was tested using a set of 35 ECG recordings for which an independent activity indicator was available. It consistently selected periods of minimum activity that were in agreement with the independent activity indicator (see the reference below for details).</p>\n\n<p>The input to activity is a time series of instantaneous heart rate measurements, such as can be produced by <a href=\"https://physionet.org/physiotools/wag/tach-1.htm\">tach</a>. For example:</p>\n\n<pre>    tach -r <em>record</em> -a <em>annotator</em> | activity [-m] [<em>len</em>]\n</pre>\n\n<p>Each value of the activity index is derived from <em>len</em> values in the input heart rate time series; if <em>len</em> is omitted, 600 samples (5 minutes, at tach&#39;s default sampling rate) of input data are used to produce each output value. The input windows overlap by 50%, so that the interval between output values is half of that specified by <em>len</em>, or 2.5 minutes by default.</p>\n\n<p>Use activity&#39;s -m option to find and output only the interval for which the activity index is minimum.</p>\n\n<p>Here are:</p>\n\n<ul>\n\t<li>the portable C source for activity (activity.c), and</li>\n\t<li>the <a href=\"https://physionet.org/physiotools/activity/cic92/activity.html\">paper</a> that introduced the technique (also available in <a href=\"https://physionet.org/physiotools/activity/activity.ps\">PostScript</a> or <a href=\"https://physionet.org/physiotools/activity/activity.pdf\">PDF</a> formats).</li>\n</ul>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2002-04-18",
    "citation": "",
    "citation_url": "",
    "contact_name": "George B. Moody",
    "contact_affiliations": "Massachusetts Institute of Technology",
    "contact_email": "george@mit.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 142,
  "fields": {
    "title": "pNNx - Time Domain Heart Rate Variability Analysis",
    "slug": "pnnx",
    "abstract": "<p>The pNNx software package expands the analysis capabilities of the widely used pNN50 measure, providing researchers with the flexibility to test various thresholds for optimal discrimination of HRV in populations of interest.</p>",
    "full_description": "<h3>Background</h3>\n\n<p>The pNN50 statistic is a time domain measure of heart rate variability (HRV) derived from a study by Ewing and colleagues <a href=\"https://physionet.org/physiotools/pNNx/#ref1\">[1]</a>, who introduced the NN50 count, defined as the mean number of times per hour in which the change in consecutive normal sinus (NN) intervals exceeds 50 milliseconds. The authors proposed this measure to help assess parasympathetic (vagal) activity from 24 hour ECG recordings.</p>\n\n<p>Subsequently, Bigger and colleagues <a href=\"https://physionet.org/physiotools/pNNx/#ref2\">[2]</a> introduced</p>\n\n<p><strong>pNN50 = (NN50&nbsp;count)&nbsp;/&nbsp;(total&nbsp;NN&nbsp;count)</strong></p>\n\n<p>(that is, the fraction of consecutive NN intervals that differ by more than 50 ms). The pNN50 measure has proved very useful in providing diagnostic and prognostic information in a wide range of conditions.</p>\n\n<p>The pNN50 statistic, however, is only one member of a family of statistics, designated here as pNNx, where x &gt; 0 ms. Computing pNNx with x &lt; 50 ms in both long and short term recordings may provide more robust discrimination between groups than the standard pNN50 statistic.</p>\n\n<p>In <a href=\"https://physionet.org/physiotools/pNNx/#ref3\">[3]</a>, we applied the pNNx method to previously acquired RR interval data for 155 subjects. Comparisons were made between:</p>\n\n<ul>\n\t<li><a href=\"https://physionet.org/physiotools/pNNx/data/Normal\">healthy subjects</a> vs. <a href=\"https://physionet.org/physiotools/pNNx/data/CHF\">those with congestive heart failure (CHF)</a></li>\n\t<li><a href=\"https://physionet.org/physiotools/pNNx/data/Sleep\">healthy subjects while asleep</a> vs. <a href=\"https://physionet.org/physiotools/pNNx/data/Wake\">healthy subjects while awake</a></li>\n\t<li><a href=\"https://physionet.org/physiotools/pNNx/data/Yng\">healthy young subjects</a> vs. <a href=\"https://physionet.org/physiotools/pNNx/data/Old\">healthy elderly subjects</a></li>\n</ul>\n\n<p>(See <a href=\"https://physionet.org/physiotools/pNNx/data/about\">this note</a> for information about the links above.)</p>\n\n<p>The results of these comparisons, as described in <a href=\"https://physionet.org/physiotools/pNNx/#ref3\">[3]</a>, showed better discrimination between groups when using values of x significantly less than the traditional 50 milliseconds.</p>\n\n<p>The original data used for this study are available here (as a 17 MB tarball, <a href=\"https://physionet.org/physiotools/pNNx/pnnx-rr-orig.tar.gz\">pnnx-rr-orig.tar.gz</a>). These data can be analyzed with either the <a href=\"https://physionet.org/physiotools/pNNx/pNNx.src/pnnlist-orig.c\">original</a> or <a href=\"https://physionet.org/physiotools/pNNx/pNNx.src/pnnlist.c\">current</a> versions of the software used for this study to replicate the results reported in <a href=\"https://physionet.org/physiotools/pNNx/#ref3\">[3]</a>. The original data include over 10 million beat labels; as errors are found, they are corrected in the on-line copies of the data. In comparison with the original software, the current version incorporates additional input checking, a user interface that more closely matches that of other PhysioToolkit software, dynamic rather than static input array allocation (so that input series of any length can be accommodated, up to the limit of available system memory), and a faster and more robust sorting algorithm.</p>\n\n<p>The pNNx software package expands the analysis capabilities of the widely used pNN50 measure, providing researchers with the flexibility to test various thresholds for optimal discrimination of HRV in populations of interest.</p>\n\n<p>&nbsp;</p>\n\n<h3>Obtaining the pNNx software</h3>\n\n<p>The pNNx software package consists of a Makefile, the pNNx shell script, and the pnnlist.c source code. The pnnlist code is also separately available as prebuilt binaries for GNU/Linux, Mac OS/X, MS-Windows and Solaris.</p>\n\n<p>&nbsp;</p>\n\n<h3>Prerequisites</h3>\n\n<ul>\n\t<li>Unless you already have an <a href=\"https://physionet.org/physiotools/pNNx/#annotation-lists\">annotation interval list</a> in the correct format for a recording you wish to study, you will need to install the <a href=\"https://physionet.org/physiotools/wfdb.shtml\">WFDB Software Package</a>, version 10.3.2 or later. This package includes programs (<a href=\"https://physionet.org/physiotools/wag/sqrs-1.htm\">sqrs</a> and <a href=\"https://physionet.org/physiotools/wag/wqrs-1.htm\">wqrs</a>) for detecting the QRS complexes (beats) in a digitized ECG and recording their locations in beat annotation files, and a program (<a href=\"https://physionet.org/physiotools/wag/ann2rr-1.htm\">ann2rr</a>) for preparing an annotation interval list from an annotation file (such as those in <a href=\"https://physionet.org/physiobank/\">PhysioBank</a> or those created using sqrs or wqrs). The WFDB Software Package is available freely from this site in portable C source form and as ready-to-run binaries for several popular platforms.</li>\n\t<li>(Under MS-Windows only, and only if you wish to compile the pNNx sources or use the pNNx shell script) Install the free <a href=\"http://www.cygwin.com/\">Cygwin environment</a> if you have not already done so. Cygwin includes tar and gzip, needed to unpack the pNNx package, the gcc C compiler and all other utilities needed to compile the pNNx code from sources, and the bash shell needed to run the (optional) pNNx shell script. These utilities are standard under GNU/Linux, Mac OS/X, and all versions of Unix.</li>\n\t<li>If you wish to plot the pNNx distributions as in the illustrations below, we recommend installing the <a href=\"https://physionet.org/physiotools/plt/\">plt</a> software package, which is available freely from this site in portable C source form and as ready-to-run binaries for several popular platforms. The pNNx software produces text output only; you will need plt or comparable software to obtain graphical output.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<h3>Downloading and compiling the pNNx sources</h3>\n\n<p>The pNNx software is written in portable C and can be compiled on any modern platform.</p>\n\n<ol>\n\t<li>\n\t<p>(Under MS-Windows only) Install the free <a href=\"http://www.cygwin.com/\">Cygwin environment</a> if you have not already done so.</p>\n\t</li>\n\t<li>\n\t<p>Download <a href=\"https://physionet.org/physiotools/pNNx/pNNx.src.tar.gz\">pNNx.src.tar.gz</a> and unpack it:</p>\n\n\t<pre>      tar xfvz pNNx.src.tar.gz</pre>\n\n\t<p>If your version of tar doesn&#39;t support the z option, unpack the package in two steps:</p>\n\n\t<pre>      gzip -d pNNx.src.tar.gz\n      tar xfv pNNx.src.tar</pre>\n\n\t<p>(You may also view or download the <a href=\"https://physionet.org/physiotools/pNNx/pNNx.src\">individual files</a>.)</p>\n\t</li>\n\t<li>\n\t<p>Enter the source directory (pNNx/src) and compile the software:</p>\n\n\t<pre>      make</pre>\n\t</li>\n</ol>\n\n<h3>Downloading pNNx binaries</h3>\n\n<p>Precompiled binaries are available for several popular platforms:</p>\n\n<ul>\n\t<li><strong>Solaris 8 (SPARC):</strong>\n\n\t<ol>\n\t\t<li>Download <a href=\"https://physionet.org/physiotools/pNNx/pNNx.sol-8.tar.gz\">pNNx.sol-8.tar.gz</a>.</li>\n\t\t<li>Unpack it:<br>\n\t\ttar xfvz pNNx.sol-8.tar.gz</li>\n\t</ol>\n\t</li>\n\t<li><strong>Linux (x86):</strong>\n\t<ol>\n\t\t<li>Download <a href=\"https://physionet.org/physiotools/pNNx/pNNx.i386-linux.tar.gz\">pNNx.i386-linux.tar.gz</a>.</li>\n\t\t<li>Unpack it:<br>\n\t\ttar xfvz pNNx.i386-linux.tar.gz</li>\n\t</ol>\n\t</li>\n\t<li><strong>Mac OS/X:</strong>\n\t<ol>\n\t\t<li>Download <a href=\"https://physionet.org/physiotools/pNNx/pNNx.mac-osx.tar.gz\">pNNx.mac-osx.tar.gz</a>.</li>\n\t\t<li>Unpack it:<br>\n\t\ttar xfvz pNNx.mac-osx.tar.gz</li>\n\t</ol>\n\t</li>\n\t<li><strong>MS-Windows:</strong>\n\t<ol>\n\t\t<li>Download <a href=\"https://physionet.org/physiotools/pNNx/pNNx.msw.zip\">pNNx.msw.zip</a>.</li>\n\t\t<li>In a Command or Cygwin window, unzip it:<br>\n\t\tunzip pNNx.msw.zip</li>\n\t</ol>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<h3>Using the pNNx software</h3>\n\n<p>You will need either a <a href=\"https://physionet.org/physiotools/pNNx/#annotation-files\">beat annotation file</a> or an <a href=\"https://physionet.org/physiotools/pNNx/#annotation-lists\">annotation interval list</a> in order to obtain a pNNx distribution.</p>\n\n<p>The <a href=\"https://physionet.org/physiotools/pNNx/pNNx.src/pNNx\">pNNx</a> shell script reads a beat annotation file (either from a local copy or directly from the PhysioNet web server). It uses <a href=\"https://physionet.org/physiotools/wag/ann2rr-1.htm\">ann2rr</a> (included in the WFDB Software Package) to create an annotation interval list, which is then passed to pnnlist for analysis.</p>\n\n<p>The pnnlist program reads an annotation interval list, identifies the consecutive NN intervals, and calculates the pNNx distribution from them. This program prints each unique normal sinus to normal sinus (NN) interval increment and the percentage of NN interval increments greater than that value.</p>\n\n<p>&nbsp;</p>\n\n<h3>Beat annotation files</h3>\n\n<p>Annotation files are the standard way of storing information about the locations (times of occurrence) and types of events that occur during the recordings available in PhysioBank. Beat annotation files are available for most of the <a href=\"https://physionet.org/physiobank/database/\">PhysioBank</a> records that include ECGs.</p>\n\n<p>If you wish to study a recording for which no beat annotation file is available, you may be able to create one with <a href=\"https://physionet.org/physiotools/wag/sqrs-1.htm\">sqrs</a> or <a href=\"https://physionet.org/physiotools/wag/wqrs-1.htm\">wqrs</a> (included in the WFDB Software Package).</p>\n\n<p>See the <a href=\"https://physionet.org/faq.shtml#annotation\">PhysioNet FAQ</a> for additional information about annotations and annotation files.</p>\n\n<p>&nbsp;</p>\n\n<h3>Annotation interval lists</h3>\n\n<p>Annotation interval lists as used by pnnlist are in text format, consisting of two columns (intervals in seconds and annotations). Interval lists in this format can be prepared from beat annotation files using <a href=\"https://physionet.org/physiotools/wag/ann2rr-1.htm\">ann2rr</a>. For example, the command</p>\n\n<pre>        ann2rr -r nsrdb/16265 -a atr -A -i s8 -w</pre>\n\n<p>creates an interval list from the atr (reference) annotations for record 16265 of the <a href=\"https://physionet.org/physiobank/database/nsrdb\">MIT-BIH Normal Sinus Rhythm Database</a>. (For details on this command, see <a href=\"https://physionet.org/physiotools/wag/ann2rr-1.htm\">ann2rr</a> in the <a href=\"https://physionet.org/physiotools/wag/\">WFDB Applications Guide</a>.) The first few lines of output from this command are:</p>\n\n<pre>\t\t0.00781250\t|\n\t\t0.39843750\tN\n\t\t0.60156250\tN\n\t\t0.60937500\tN\n\t\t0.60156250\tN\n\t\t0.62500000\tN\n\t\t0.60937500\tN\n\t\t0.62500000\tN\n\t\t0.59375000\tN\n\t\t0.60156250\tN\n\t\t0.61718750\tN\n\t\t0.61718750\tN\n\t\t    .\n\t\t    .\n\t\t    .\n</pre>\n\n<p>Each N in the interval list indicates that a normal sinus beat occurs at the end of the corresponding interval. (The initial &quot;|&quot; marks a QRS-like artifact at the beginning of the recording. The first two intervals shown above are not used in the calculation of pNNx since they do not begin and end with N annotations.)</p>\n\n<p>&nbsp;</p>\n\n<h3>Usage</h3>\n\n<p>Both pNNx and pnnlist are text mode applications that must be run in a terminal window (under MS-Windows, a Command or Cygwin window). Read about how to use them below, or in Unix man page format <a href=\"https://physionet.org/physiotools/pNNx/pNNx.src/pnnlis-1.htm\">here</a> (also in man page source format <a href=\"https://physionet.org/physiotools/pNNx/pNNx.src/pnnlist.1\">here</a>).</p>\n\n<p>To run pNNx, type a command such as</p>\n\n<pre>        pNNx -r nsrdb/16265 -a atr</pre>\n\n<p>where nsrdb/16265 is the <a href=\"https://physionet.org/faq.shtml#record-names\">record name</a> and atr is the <a href=\"https://physionet.org/faq.shtml#record-names\">annotator name</a> of the beat annotation file you wish to study. (If you have not previously downloaded the annotation file into a local nsrdb directory, pNNx (via ann2rr) obtains the annotations directly from PhysioNet.)</p>\n\n<p>To run pnnlist, open a terminal window (under MS-Windows, a Command window), and type a command such as</p>\n\n<pre>        ann2rr -r nsrdb/16265 -a atr -A -i s8 -w | pnnlist</pre>\n\n<p>Alternatively, you can save the output of ann2rr in a file, and then read the file with pnnlist, using commands such as:</p>\n\n<pre>        ann2rr -r nsrdb/16265 -a atr -A -i s8 -w &gt;16265.intervals\n        pnnlist &lt;16265.intervals</pre>\n\n<p>This method can also be used if you have obtained an interval list from another source.</p>\n\n<p>These commands will then print each unique NN interval increment in milliseconds along with the percentage of intervals greater than that value. All three of the examples above produce the same output; the first few lines are shown at left below, and plotted at right below:</p>\n\n<blockquote>\n<pre>0\t89.2738\n7.8125\t69.4564\n15.625\t53.3662\n23.4375\t40.8539\n31.25\t31.4265\n39.0625\t24.1817\n46.875\t18.4763\n54.6875\t14.1261\n62.5\t10.7312\n70.3125\t8.06025\n78.125\t6.09401\n85.9375\t4.56975\n93.75\t3.47841\n101.562\t2.66896\n        .\n        .\n        .\n</pre>\n</blockquote>\n\n<p>To capture the output of any of these commands, redirect its output to a file, as in:</p>\n\n<pre>        pNNx -r nsrdb/16265 -a atr &gt;16265.pNNx</pre>\n\n<p>&nbsp;</p>\n\n<h3>Options for pNNx and pnnlist</h3>\n\n<p>In addition to the standard definition of pNNx given above, several variants can also be obtained using pNNx and pnnlist.</p>\n\n<p>&nbsp;</p>\n\n<h3>Percent pNNx (ppNNx)</h3>\n\n<p>In this variant, each NN interval increment is expressed as a percentage of the first of the two intervals. This can be obtained by using the -p option with pNNx or pnnlist. For example,</p>\n\n<pre>        pNNx -r nsrdb/16265 -a atr -p</pre>\n\n<p>yields:</p>\n\n<blockquote>\n<pre>0\t\t89.2738\n0.564972\t89.2728\n0.574713\t89.2718\n0.581395\t89.2708\n0.584795\t89.2698\n0.588235\t89.2688\n0.591716\t89.2658\n0.598802\t89.2637\n0.60241\t\t89.2617\n0.606061\t89.2577\n    .\n    .\n    .\n</pre>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<h3>Signed pNNx (psNNx)</h3>\n\n<p>In this variant, the positive and negative increment distributions are calculated separately. Specify this variant using the -s option with pNNx or pnnlist. For example,</p>\n\n<pre>        pNNx -r nsrdb/16265 -a atr -s</pre>\n\n<p>yields:</p>\n\n<blockquote>\n<pre>-492.188\t0\n-390.625\t0.00352566\n-382.812\t0.00528849\n-359.375\t0.00705132\n-351.562\t0.00881414\n-343.75\t\t0.010577\n-328.125\t0.0123398\n-312.5\t\t0.0141026\n-304.688\t0.0193911\n-296.875\t0.0229168\n    .\n    .\n    .\n460.938\t\t0.0187779\n468.75\t\t0.0150223\n484.375\t\t0.0131446\n492.188\t\t0.0112668\n500\t\t0.00938897\n523.438\t\t0.00751117\n546.875\t\t0.00563338\n562.5\t\t0.00375559\n625\t\t0.00187779\n679.688\t\t0</pre>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<h3>Fixed increment pNNx</h3>\n\n<p>In addition to listing pNNx at each distinct NN increment value, pNNx and pnnlist can output results at specified increments using the -i option followed by the desired increment (in milliseconds). For example,</p>\n\n<pre>        pNNx -r nsrdb/16265 -a atr -i 10</pre>\n\n<p>yields:</p>\n\n<blockquote>\n<pre>\t 0\t89.2738\n\t10\t69.4564\n\t20\t53.3662\n\t30\t40.8539\n\t40\t24.1817\n\t50\t18.4763\n\t60\t14.1261\n\t70\t10.7312\n\t80\t6.09401\n\t90\t4.56975\n\t    .\n\t    .\n\t    .\n</pre>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<h3>Selecting a segment of a longer annotation file</h3>\n\n<p>When using pNNx, you may select a segment of the annotation file to be analyzed, using the -f (from) and -t (to) options, as in:</p>\n\n<pre>        pNNx -r nsrdb/16265 -a atr -f 1:30:00 -t 4:30:00</pre>\n\n<p>where the times following these options specify the start and end of the segment (in hours, minutes, and seconds from the beginning of the recording). These options are also accepted by ann2rr.</p>\n\n<p>&nbsp;</p>\n\n<h3>How does pnnlist work?</h3>\n\n<p>The sequence of steps involved in the computation of pNNx, as implemented by pnnlist, is as follows:</p>\n\n<ol>\n\t<li>\n\t<p>From the annotation interval list, each triplet of three consecutive normal sinus beats is found, and the NN interval increment is calculated as I<sub>2,3</sub>&nbsp;-&nbsp;I<sub>1,2</sub> (the difference of the interval between the second and third beats and that between the first and second beats). For standard pNNx, the absolute value of this difference is used as the NN interval increment.</p>\n\t</li>\n\t<li>\n\t<p>The NN interval increment series is then sorted by increasing value, and NNx (the number of increments less than or equal to each unique increment x), is counted.</p>\n\t</li>\n\t<li>\n\t<p>The fraction of NN interval increments greater than x is then given by</p>\n\n\t<pre>     <strong>pNNx = 1 - NNx/NN0</strong></pre>\n\n\t<p>where NN0 is the total number of NN interval increments.</p>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<h3>References</h3>\n\n<ol>\n\t<li>Ewing DJ, Neilson JM, Travis P. <a href=\"http://heart.bmj.com/cgi/content/abstract/52/4/396\">New method for assessing cardiac parasympathetic activity using 24 hour electrocardiograms.</a> <em>British Heart Journal</em> <strong>52</strong>:396-402; 1984.</li>\n\t<li>Bigger JT Jr, Kleiger RE, Fleiss JL, et al. <a href=\"http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?cmd=Retrieve&amp;db=PubMed&amp;list_uids=3341195&amp;dopt=Abstract\">Components of heart rate variability measured during healing of acute myocardial infarction.</a> <em>Am J Cardiol.</em> <strong>61</strong>:208-215; 1988.</li>\n\t<li>Mietus JE, Peng C-K, Henry I, Goldsmith RL, Goldberger AL. <a href=\"http://heart.bmj.com/cgi/content/abstract/88/4/378\">The pNNx files: re-examining a widely used heart rate variability measure.</a> <em>Heart</em> <strong>88</strong>:378-380; 2002.</li>\n</ol>\n\n<p><strong>We gratefully acknowledge Dr. Phyllis Stein for her generous contribution of data. </strong></p>\n\n<p>&nbsp;</p>\n\n<h3>Authors</h3>\n\n<p><strong><em>The pNNx Heart Rate Variability Metric:<br>\nA Generalization of pNN50 (pnnlist)</em></strong><br>\n<strong>JE Mietus,<sup>1</sup> C-K Peng,<sup>1</sup> I Henry,<sup>1</sup> RL Goldsmith,<sup>2</sup> AL Goldberger<sup>1</sup></strong><br>\n<br>\n<sup>1</sup>Margret and H.A. Rey Institute for Nonlinear Dynamics in Physiology and Medicine, Cardiovascular Division, Harvard Medical School/Beth Israel Deaconess Medical Center, Boston, MA<br>\n<br>\n<sup>2</sup>Division of Circulatory Physiology, Columbia-Presbyterian Medical Center, New York, NY</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2003-03-03",
    "citation": "Mietus JE, Peng C-K, Henry I, Goldsmith RL, Goldberger AL. The pNNx files: re-examining a widely used heart rate variability measure. Heart 88:378-380; 2002.",
    "citation_url": "http://heart.bmj.com/cgi/content/abstract/88/4/378",
    "contact_name": "PhysioNet Support",
    "contact_affiliations": "MIT",
    "contact_email": "webmaster@physionet.org"
  }
},
{
  "model": "project.legacyproject",
  "pk": 143,
  "fields": {
    "title": "Heartprints - A Dynamical Portrait of Cardiac Arrhythmia",
    "slug": "heartprints",
    "abstract": "<p>As part of an effort to visualize and to understand the dynamics of cardiac arrhythmias with frequent ventricular ectopy, we have developed a new representational technique termed &quot;heartprints.&quot; These heartprints are a combination of seven histograms generated from an annotated record of heartbeat time intervals.</p>",
    "full_description": "<h3>Background</h3>\n\n<p>As part of an effort to visualize and to understand the dynamics of cardiac arrhythmias with frequent ventricular ectopy, we have developed a new representational technique termed &quot;heartprints.&quot; These heartprints are a combination of seven histograms generated from an annotated record of heartbeat time intervals. An example is shown in <strong>heartprint.png</strong>.</p>\n\n<p>Each of the seven panels of the heartprint contains data that typically span 20 to 24 hours, the length of an entire long-term (Holter) ECG recording. The three upper panels, left to right, are:</p>\n\n<ul>\n\t<li>the histogram of V-V intervals (the time intervals between successive, but not necessarily consecutive, premature ventricular (V)-beats)</li>\n\t<li>the histogram of NIB (the number of normal (N) beats intervening between successive V-beats)</li>\n\t<li>the histogram of N-V (coupling) intervals (the time interval between a V-beat and the preceding normal beat)</li>\n</ul>\n\n<p>The four lower panels share a common vertical axis (representing the underlying N-N interval length), and all but the first of these share common horizontal axes with the corresponding panels in the upper row. From left to right, the four lower panels are:</p>\n\n<ul>\n\t<li>the histogram of N-N intervals (the time intervals between consecutive normal beats, reflecting the underlying sinus rhythm)</li>\n\t<li>the scattergram of V-V intervals stratified by the underlying N-N intervals</li>\n\t<li>the scattergram of NIB stratified by the underlying N-N intervals</li>\n\t<li>the scattergram of N-V intervals stratified by the underlying N-N intervals</li>\n</ul>\n\n<p>When a V-beat occurs, the N-N (sinus) interval cannot be observed directly, since the V-beat usually inhibits the occurrence of what would otherwise have been a normal beat. In such cases, the neighboring beats are used to estimate the missing observations, permitting reconstruction of the underlying sinus interval time series. (See the comments at the beginning of <a href=\"https://physionet.org/physiotools/heartprints/src/hp_scatter.c\">hp_scatter.c</a>. Note that the quality of this reconstruction determines the reliability of the resulting figures. Alternative reconstruction algorithms, such as that implemented by <a href=\"https://physionet.org/physiotools/wag/nguess-1.htm\">nguess</a>, may be significantly more robust and accurate in other applications that require reconstruction of the N-N interval time series, such as power spectral density estimation using the <a href=\"https://physionet.org/physiotools/wag/fft-1.htm\">FFT</a>.)</p>\n\n<p>Using the reconstructed normal rhythm, we select all segments containing N-N intervals that fall in a given bin of the N-N interval histogram, and we compute the histograms of the V-V intervals, NIBs, and N-V intervals among the data selected in this way to obtain a horizontal stripe of each of the lower histograms. In the V-V, NIB, and N-V scattergrams, we represent the number of observations by shades of grey, where a darker shading represents more observations. This process is repeated for each bin in the N-N interval histogram.</p>\n\n<p>The patterns apparent in these heartprints may reveal the dynamics of the underlying mechanism of ventricular ectopy.</p>\n\n<p>&nbsp;</p>\n\n<p>Obtaining the heartprints package</p>\n\n<p>&nbsp;</p>\n\n<h3>Prerequisites</h3>\n\n<p>&nbsp;</p>\n\n<ul>\n\t<li>A Unix-like operating system or environment (such as GNU/Linux, Mac OS/X, MS-Windows with the freely available <a href=\"http://www.cygwin.com/\">Cygwin environment</a>, Solaris, or another version of Unix) including awk, cc or gcc, make, perl, sh (or a compatible shell such as bash), and tar.</li>\n\t<li>Unless you already have an <a href=\"https://physionet.org/physiotools/heartprints/#annotation-lists\">RR interval list</a> in the correct format for a recording you wish to study, you will need to install the <a href=\"https://physionet.org/physiotools/wfdb.shtml\">WFDB Software Package</a>, version 10.3.2 or later. This package includes two different programs (<a href=\"https://physionet.org/physiotools/wag/sqrs-1.htm\">sqrs</a> and <a href=\"https://physionet.org/physiotools/wag/wqrs-1.htm\">wqrs</a>) for detecting the QRS complexes (beats) in a digitized ECG and recording their locations in beat annotation files, and a program (<a href=\"https://physionet.org/physiotools/wag/ann2rr-1.htm\">ann2rr</a>) for preparing an RR interval list from an annotation file (such as those in <a href=\"https://physionet.org/physiobank/\">PhysioBank</a> or those created using sqrs or wqrs). The WFDB Software Package is available freely from this site in portable C source form and as ready-to-run binaries for several popular platforms.</li>\n\t<li><a href=\"https://physionet.org/physiotools/plt/\">plt</a> version 2.3 or later (including <a href=\"https://physionet.org/physiotools/wag/imagep-1.htm\">imageplt</a>), also available freely from this site in portable C source form and as ready-to-run binaries for several popular platforms.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<h3>Downloading and installing the heartprints package:</h3>\n\n<ol>\n\t<li>Download the <a href=\"https://physionet.org/physiotools/heartprints/heartprints.tar.gz\">heartprints.tar.gz</a> archive.</li>\n\t<li>Unpack it using a command such as:\n\t<pre>\ttar xfvz heartprints.tar.gz\n</pre>\n\t</li>\n\t<li>Enter the heartprints/src source directory and compile the software:\n\t<pre>\tcd heartprints/src\n\tmake\n</pre>\n\t</li>\n\t<li>Install the software:\n\t<pre>\tmake install\n</pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<h3>Using the heartprints package</h3>\n\n<p>You will need either a <a href=\"https://physionet.org/physiotools/heartprints/#annotation-files\">beat annotation file</a> or an <a href=\"https://physionet.org/physiotools/heartprints/#annotation-lists\">inter-beat (RR) interval list</a> in order to obtain a heartprint.</p>\n\n<p>The <a href=\"https://physionet.org/physiotools/heartprints/src/heartprint\">heartprint</a> shell script reads a beat annotation file (either from a local copy or directly from the PhysioNet web server). It uses <a href=\"https://physionet.org/physiotools/wag/ann2rr-1.htm\">ann2rr</a> (included in the WFDB Software Package) to create an RR interval list, which is then passed to <a href=\"https://physionet.org/physiotools/heartprints/src/hp_rrlist\">hp_rrlist</a> for analysis.</p>\n\n<p>The hp_rrlist program reads an RR interval list, reconstructs the N-N intervals and accumulates the data for the heartprint histograms and scattergrams using <a href=\"https://physionet.org/physiotools/heartprints/src/hp_scatter.c\">hp_scatter</a>, formats these data for plotting using <a href=\"https://physionet.org/physiotools/heartprints/src/hp_hist\">hp_hist</a>, and invokes <a href=\"https://physionet.org/physiotools/plt/\">plt</a> to produce a heartprint.</p>\n\n<p>&nbsp;</p>\n\n<h3>Beat Annotation Files</h3>\n\n<p>Annotation files are the standard way of storing information about the locations (times of occurrence) and types of events that occur during the recordings available in PhysioBank. Beat annotation files are available for most of the <a href=\"https://physionet.org/physiobank/database/\">PhysioBank</a> records that include ECGs.</p>\n\n<p>If you wish to study a recording for which no beat annotation file is available, you may be able to create one with <a href=\"https://physionet.org/physiotools/wag/sqrs-1.htm\">sqrs</a> or <a href=\"https://physionet.org/physiotools/wag/wqrs-1.htm\">wqrs</a> (included in the WFDB Software Package). Note, however, that these applications do not distinguish between normal and ectopic beats; it will be necessary to edit the annotation files they create and to change the annotations of the ventricular ectopic beats in order to obtain a (non-trivial) heartprint.</p>\n\n<p>See the <a href=\"https://physionet.org/faq.shtml#annotation\">PhysioNet FAQ</a> for additional information about annotations and annotation files and about how to <a href=\"https://physionet.org/faq.shtml#creating-annotations\">create and edit annotation files</a>.</p>\n\n<p>&nbsp;</p>\n\n<h3>Interbeat (RR) Interval Lists</h3>\n\n<p>RR interval lists as used by hp_rrlist are in text format, consisting of two columns (intervals in seconds and annotations). Interval lists in this format can be prepared from beat annotation files using <a href=\"https://physionet.org/physiotools/wag/ann2rr-1.htm\">ann2rr</a>. Use a command of the form</p>\n\n<pre>\tann2rr -r <em>record</em> -a <em>annotator</em> -c -i s -w &gt;<em>record</em>.rr</pre>\n\n<p>where <em>record</em> is the <a href=\"https://physionet.org/faq.shtml#record-names\">record name</a> and <em>annotator</em> is the <a href=\"https://physionet.org/faq.shtml#record-names\">annotator name</a> of the beat annotation file you wish to study. (If you choose a PhysioBank record and have not previously downloaded the annotation file into a local directory, ann2rr obtains the annotations directly from PhysioNet. For details on the options used in this command, see <a href=\"https://physionet.org/physiotools/wag/ann2rr-1.htm\">ann2rr</a> in the <a href=\"https://physionet.org/physiotools/wag/\">WFDB Applications Guide</a>.) For example, the command</p>\n\n<pre>        ann2rr -r chfdb/chf02 -a ecg -c -i s -w &gt;chf02.rr</pre>\n\n<p>creates an interval list from the ecg beat annotations for record chf02 of the <a href=\"https://physionet.org/physiobank/database/chfdb\">BIDMC Congestive Heart Failure Database</a>. The first few lines of output from this command are:</p>\n\n<blockquote>\n<pre>\t\t0.620\tN\n\t\t0.624\tN\n\t\t0.612\tN\n\t\t0.624\tN\n\t\t0.624\tN\n\t\t0.620\tN\n\t\t0.636\tN\n\t\t0.648\tN\n\t\t0.624\tN\n\t\t0.616\tN\n\t\t0.452\tV\n\t\t0.788\tN\n\t\t0.632\tN\n\t\t    .\n\t\t    .\n\t\t    .\n</pre>\n</blockquote>\n\n<p>Each N in the interval list indicates that a normal sinus beat occurs at the end of the corresponding interval. The V marks a premature ventricular beat.</p>\n\n<p>&nbsp;</p>\n\n<h3>Generating a heartprint in an X window</h3>\n\n<p>Both heartprint and hp_rrlist are text mode applications that must be run in a terminal window (under MS-Windows, a Command or Cygwin window). If an X11 server is running, use one of the commands below to make a heartprint in an X window.</p>\n\n<p>To make a heartprint from a beat annotation file, use heartprint, by typing a command in the form:</p>\n\n<pre>\theartprint -r <em>record</em> -a <em>annotator</em></pre>\n\n<p>where <em>record</em> is the <a href=\"https://physionet.org/faq.shtml#record-names\">record name</a>, and <em>annotator</em> is the <a href=\"https://physionet.org/faq.shtml#record-names\">annotator name</a> of the beat annotation file you wish to study. (If you have not previously downloaded the annotation file into a local directory, heartprint (via ann2rr) obtains the annotations directly from PhysioNet.)</p>\n\n<p>To make a heartprint from an RR interval list, use hp_rrlist, by typing a command in the form:</p>\n\n<pre>        hp_rrlist -i <em>record</em>.rr -F <em>frequency</em></pre>\n\n<p>where <em>record</em>.rr is the file containing the RR interval list in the format shown above, and <em>frequency</em> is the sampling frequency, in Hz, of the original ECG signal(s). If the -i ... option is omitted, hp_rrlist reads the interval list from its standard input.</p>\n\n<p>Specifying the sampling frequency when using hp_rrlist affects the bin size of the histograms (for higher sampling frequencies the bins are narrower). If the -F ... option is omitted from the command, hp_rrlist assumes that the ECG signal(s) were sampled at 128 Hz.</p>\n\n<p>If you don&#39;t know the sampling frequency, and if the original record is available, the sampling frequency can be determined using the command</p>\n\n<pre>\tsampfreq <em>record</em></pre>\n\n<p><a href=\"https://physionet.org/physiotools/wag/sampfr-1.htm\">sampfreq</a> is included in the WFDB Software Package.</p>\n\n<p>Note that generating a heartprint may require up to a minute. imageplt may report warnings of out-of-range points during this period; be patient and wait for the heartprint to appear.</p>\n\n<p>&nbsp;</p>\n\n<h3>Generating a PDF, PNG, or PostScript-format heartprint</h3>\n\n<p>Use the option -T <em>format</em> with either heartprint or hp_rrlist to generate output in another format. The choices for <em>format</em> are pdf, png, ps, and eps. When using any of these options, redirect the standard output into a file or a file viewer. For example,</p>\n\n<pre>\theartprint -r <em>record</em> -a <em>annotator</em> -T ps &gt;<em>record</em>.ps</pre>\n\n<p>-T ps specifies that the output should be in PostScript format, and <em>record</em>.ps is the name of the output file to be created.</p>\n\n<p>&nbsp;</p>\n\n<h3>Options for heartprint and hp_rrlist</h3>\n\n<p>By default, heartprint and hp_rrlist determine the range of the N-N histogram automatically by eliminating bins at either end of the range having fewer than five members. The heartprint can be customized by specifying the N-N interval limits. Use these options to do so:</p>\n\n<dl>\n\t<dt>-m <em>NNmin</em></dt>\n\t<dd>specifies the minimum N-N interval included in the lower panels of the heartprint</dd>\n\t<dt>-M <em>NNmax</em></dt>\n\t<dd>specifies the maximum N-N interval included in the lower panels of the heartprint</dd>\n</dl>\n\n<ul>\n</ul>\n\n<p>Specifing the N-N interval limits allows you to scale the image along the vertical axis for greater or lesser resolution. Appropriate limits may be difficult to determine from the RR list; if so, try making a heartprint with automatically-determined limits first, then choose limits based on what you see. For example:</p>\n\n<pre>\thp_rrlist -i chf02.rr -F 250 -m .5 -M 1 -T eps &gt;chf02.eps </pre>\n\n<p>will create a heartprint in eps (encapsulated PostScript) format with a bin width of (1/250) seconds, showing only data segments containing N-N intervals between .5 and 1 second in the lower panels.</p>\n\n<div>\n<p>&nbsp;</p>\n</div>\n\n<h3>References</h3>\n\n<p>A detailed description of the heartprints algorithm and its application can be found in:</p>\n\n<p>Schulte-Frohlinde V, Ashkenazy Y, Goldberger AL, Ivanov PCh, Costa M, Morley-Davies A, Stanley HE, Glass L. <a href=\"http://link.aps.org/abstract/PRE/v66/e031901\"> Complex patterns of abnormal heartbeats.</a> <em>Phys Rev E</em> <strong>66</strong>(3-1):031901; 2002 (September).</p>\n\n<p>Schulte-Frohlinde V, Ashkenazy Y, Ivanov PCh, Glass L, Goldberger AL, Stanley HE. <a href=\"http://link.aps.org/abstract/PRL/v87/e068104\">Noise effects on the complex patterns of abnormal heartbeats.</a> <em>Phys Rev Lett</em> <strong>87</strong>(6):068104; 2001 (6 August).</p>\n\n<h3>Authors</h3>\n\n<p>V Schulte-Frohlinde, Y Ashkenazy, AL Goldberger, PCh Ivanov, M Costa, A Morley-Davies A, HE Stanley HE, L Glass.<br>\nBeth Israel Deaconess Medical Center and Harvard Medical School, Boston, USA</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2003-03-08",
    "citation": "Schulte-Frohlinde V, Ashkenazy Y, Goldberger AL, Ivanov PCh, Costa M, Morley-Davies A, Stanley HE, Glass L. Complex patterns of abnormal heartbeats. Phys Rev E 66(3-1):031901; 2002 (September).",
    "citation_url": "http://link.aps.org/abstract/PRE/v66/e031901",
    "contact_name": "Ary Goldberger",
    "contact_affiliations": "Beth Israel Deaconess Medical Center",
    "contact_email": "agoldberger@bidmc.harvard.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 144,
  "fields": {
    "title": "CVSim",
    "slug": "cvsim",
    "abstract": "<p>CVSim is a lumped-parameter model of the human cardiovascular system that has been developed and used for research and for teaching quantitative physiology courses at MIT and Harvard Medical School since 1984. The versions presented here have a graphical user interface implemented in Java, with computational components in C.</p>",
    "full_description": "<h3>CVSim: a cardiovascular simulator</h3>\n\n<p>CVSim is a lumped-parameter model of the human cardiovascular system that has been developed and used for research and for teaching quantitative physiology courses at MIT and Harvard Medical School since 1984. The versions presented here have a graphical user interface implemented in Java, with computational components in C.</p>\n\n<p>&nbsp;</p>\n\n<h3>Software and Usage</h3>\n\n<p>Java is required to run CVSim. To use one of the compiled (ready to use) distributions:</p>\n\n<ol>\n\t<li>Download and install the Java Runtime Environment (JRE) version 1.8. Note that the JDK contains the JRE and other java delopment tools.\n\t<ul>\n\t\t<li><a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html\">JRE-8 installation instructions.</a></li>\n\t\t<li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html\">JRE-8 downloads.</a></li>\n\t\t<li><a href=\"https://www.java.com/en/download/help/version_manual.xml\">Determining your java version.</a></li>\n\t</ul>\n\t</li>\n\t<li>Download and save the compiled CVSim archive file for your system: <a href=\"https://physionet.org/physiotools/cvsim/dist/cvsim-1.0.1-linux.tar.gz\">Linux</a>, <a href=\"https://physionet.org/physiotools/cvsim/dist/cvsim-1.0.1-osx.tar.gz\">OSX</a>, <a href=\"https://physionet.org/physiotools/cvsim/dist/cvsim-1.0.1-windows.zip\">Windows</a>.</li>\n\t<li>Extract (unzip) the contents of the downloaded archive file.</li>\n\t<li>Run the program. The script to be executed is: <strong><code>run-cvsim</code></strong>.\n\t<ul>\n\t\t<li>Windows users can just double click the <strong><code>run-cvsim.bat</code></strong> file.</li>\n\t\t<li>Alternatively, users can run the code through a terminal:\n\t\t<ul>\n\t\t\t<li>Open a terminal: can be found under the name <strong><code>terminal</code></strong> in Ubuntu-Linux and OSX, and <strong><code>cmd</code></strong> in Windows.</li>\n\t\t\t<li>Navigate to the extracted content directory using the <strong><code>cd</code></strong> command.</li>\n\t\t\t<li>Type: <strong><code>./run-cvsim</code></strong> in Linux/OSX, or <strong><code>run-cvsim</code></strong> in Windows.</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n\t<li>Choose either the 6 or 21 compartment model (see below).</li>\n\t<li>&nbsp;</li>\n</ol>\n\n<h3>Source Code</h3>\n\n<p>The source files are available from the <a href=\"https://physionet.org/physiotools/cvsim/cvsim\">source tree</a>, and from the <a href=\"https://physionet.org/physiotools/cvsim/dist/cvsim-1.0.1.tar.gz\">gzip-compressed tar archive</a>. CVSim has been successfully compiled using Java 1.6, 1.7, and 1.8 on 32 and 64 bit Linux, OSX, and Windows. To compile the source for your platform, follow the <em>README.txt</em> instructions in the <em>devel</em> subdirectory. Using the Java Development Kit (JDK) 1.8 is recommended.</p>\n\n<p>&nbsp;</p>\n\n<h3>Compiled Code</h3>\n\n<p>Compiled versions using Java 1.8 on 64-bit <a href=\"https://physionet.org/physiotools/cvsim/dist/cvsim-1.0.1-linux.tar.gz\">Ubuntu-Linux 16.04</a>, <a href=\"https://physionet.org/physiotools/cvsim/dist/cvsim-1.0.1-osx.tar.gz\">OSX 10.11</a>, and <a href=\"https://physionet.org/physiotools/cvsim/dist/cvsim-1.0.1-windows.zip\">Windows 10</a>, are also provided.</p>\n\n<p>Issues regarding the code can be reported in the project&#39;s <a href=\"https://github.com/MIT-LCP/cvsim\">github repository</a>.</p>\n\n<p>&nbsp;</p>\n\n<h3>Versions</h3>\n\n<p>The source code and compiled distributions contain content for both 6 and 21 compartment models of CVSim.</p>\n\n<p>The older implementations, <a href=\"https://physionet.org/physiotools/rcvsim/\">RCVSim</a> and <a href=\"https://physionet.org/physiotools/xcvsim/\">XCVSim</a>, are available in their respective Physiotools pages.</p>\n\n<p>&nbsp;</p>\n\n<h3>Using CVSim</h3>\n\n<p>The notes below apply to both the educational and the research versions of CVSim.</p>\n\n<p>&nbsp;</p>\n\n<h3>CVSim Window Components</h3>\n\n<p>The CVSim window is divided into four sections (&quot;panes&quot;) and a toolbar shown in <strong>images/cvsim_gui_annotated_small1.jpg</strong></p>\n\n<p>These components are briefly described here, and demonstrated in short Flash animations.</p>\n\n<p>&nbsp;</p>\n\n<h3>Simulation Control Toolbar</h3>\n\n<p>The Simulation Control Toolbar includes six controls to stop and start the simulation and turn the control systems on and off:</p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>&nbsp;</td>\n\t\t\t<td>Start the simulation</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>&nbsp;</td>\n\t\t\t<td>Stop the simulation</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>&nbsp;</td>\n\t\t\t<td>Turn on the arterial baroreflex control system</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>&nbsp;</td>\n\t\t\t<td>Turn off the arterial baroreflex control system</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>&nbsp;</td>\n\t\t\t<td>Turn on the cardiopulmonary reflex control system</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>&nbsp;</td>\n\t\t\t<td>Turn off the cardiopulmonary reflex control system</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<h3>Simulation Parameters Pane</h3>\n\n<p>The <a href=\"https://physionet.org/physiotools/cvsim/demos/variables.htm\">Simulation Parameters Pane</a> displays the simulation variables and outputs. (The Simulation Outputs Pane, which is located on a separate tab behind the Simulation Parameters Pane, is not functional in the current version of CVSim. In a future version, it will be used to select outputs to be recorded in a log file.)</p>\n\n<p>&nbsp;</p>\n\n<h3>Graphics Pane</h3>\n\n<p>The <a href=\"https://physionet.org/physiotools/cvsim/demos/graphics.htm\">Graphics Pane</a> displays anatomical and circuit representations of the simulation model.</p>\n\n<p>Click and drag the vertical bar between the <strong>Simulation Parameters</strong> and <strong>Graphics</strong> panes to resize them.</p>\n\n<p>&nbsp;</p>\n\n<h3>Strip Chart and Plot Panes</h3>\n\n<p>The <strong>Strip Chart</strong> behaves like a chart recorder, plotting simulation outputs versus time and scrolling from right to left. The <strong>Plot Pane</strong> behaves like a flatbed XY plotter, plotting simulation outputs versus one another. Watch the <a href=\"https://physionet.org/physiotools/cvsim/demos/plots.htm\">Strip Chart and Plot demo</a>.</p>\n\n<p>Strip Chart and Plot panes can be undocked using the arrow icon at the upper right corner of the pane. Once undocked, they can be moved and resized, and it is possible to view more than one of each simultaneously. (Select <strong>New Strip Chart</strong> or <strong>New Plot</strong> from the main window&#39;s Plot menu to create additional strip charts or plots.)</p>\n\n<p>&nbsp;</p>\n\n<h3>Acknowledgments</h3>\n\n<p>This implementation of CVSim is the work of Catherine Dunn and Thomas Heldt, with contributions from Ali Saeed and Brandon Pierquet.</p>\n\n<p>Previous implementations were written by Bob Sah (1983), George Moody (1985), Tim Davis (1989), Rama Mukkamala (2001), Thomas Heldt (2002), and by Eun Bo Shim and his students (2003). The circulatory model used in CVSim was created by Roger Mark, based on an analog model of JG Defares and colleagues [2]. The CVSim model was elaborated by Thomas Heldt, Eun Bo Shim, Roger Kamm, and Roger Mark [3].</p>\n\n<p>Development of CVSim was supported in part through the National Aeronautics and Space Administration (NASA) Cooperative Agreement NCC 9-58 with the National Space Biomedical Research Institute (grants CA00106, CA00205, and CA00403).</p>\n\n<p>&nbsp;</p>\n\n<h3>References</h3>\n\n<p>[1] T Heldt, R Mukkamala, GB Moody, and RG Mark. <a href=\"https://physionet.org/physiotools/cvsim/45TOPETJ.pdf\">CVSim: An Open-Source Cardiovascular Simulator for Teaching and Research</a>. <em>Open Pacing, Electrophysiol &amp; Ther J</em> <strong>3</strong>:45-54 (2010).</p>\n\n<p>[2] JG Defares, JJ Osborne, and HH Hara. <a href=\"http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=retrieve&amp;db=pubmed&amp;list_uids=14168416&amp;dopt=Abstract\"> Theoretical synthesis of the cardiovascular system. Study I: The controlled system</a>. <em>Acta Physiol Pharmacol Neerl</em> <strong>12</strong>:189-265 (1963).</p>\n\n<p>[3] T Heldt, EB Shim, RD Kamm, and RG Mark. <a href=\"http://jap.physiology.org/cgi/content/full/92/3/1239\">Computational modeling of cardiovascular response to orthostatic stress</a>. <em>J Appl Physiol</em> <strong>92</strong>(3):1239-1254 (2002 March 1).</p>\n\n<p>&nbsp;</p>\n\n<h3>Related Links</h3>\n\n<ul>\n\t<li><a href=\"https://physionet.org/physiotools/rcvsim/\">A Cardiovascular Simulator for Research</a>. <strong>RCVSIM</strong> is Rama Mukkamala&#39;s 2001 version of the CVSim model, and was developed using MATLAB. MATLAB is not required to run RCVSIM under Linux. The output of RCVSIM can be read and manipulated further using the <a href=\"https://physionet.org/physiotools/wfdb.shtml\">WFDB</a> software package.</li>\n\t<li><a href=\"https://physionet.org/physiotools/xcvsim/\">XCVSim</a>. Sources and Linux binaries for Tim Davis&#39;s 1989 implementation of CVSim for X10 on MIT&#39;s Project Athena, with revisions by George Moody for X11 on GNU/Linux and other Unix platforms.</li>\n\t<li><a href=\"http://ocw.mit.edu/courses/health-sciences-and-technology/hst-542j-quantitative-physiology-organ-transport-systems-spring-2004/\">Quantitative Physiology: Organ Transport Systems</a>. This MIT OpenCourseWare course is based on Roger Mark&#39;s spring 2004 course, which used XCVSim. CVSim-6 was first used in this course in spring 2007.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<h3>Release Information</h3>\n\n<p>The source code and compiled distributions contain content for both 6 and 21 compartment models of CVSim.</p>\n\n<p>The older implementations, <a href=\"https://physionet.org/physiotools/rcvsim/\">RCVSim</a> and <a href=\"https://physionet.org/physiotools/xcvsim/\">XCVSim</a>, are available in their respective Physiotools pages.</p>\n\n<p>The <strong>CVSim</strong> software was developed between 1983 and 2007, and four versions of it are available from PhysioNet:</p>\n\n<ul>\n\t<li><a href=\"https://physionet.org/physiotools/xcvsim/\"><strong>XCVSim</strong></a> (1991-1998), a 6-compartment model with an X11 GUI</li>\n\t<li><a href=\"https://physionet.org/physiotools/rcvsim/\"><strong>RCVSim</strong></a> (2000-2003), a 6-compartment model with a scriptable command-line interface</li>\n\t<li><a href=\"https://physionet.org/physiotools/cvsim/#cvsim-6\"><strong>CVSim-6</strong></a> (2002-2007), a 6-compartment model with a Java GUI (described below)</li>\n\t<li><a href=\"https://physionet.org/physiotools/cvsim/#cvsim-21\"><strong>CVSim-21</strong></a> (2002-2007), a 21-compartment model with an enhanced Java GUI (also described below)</li>\n</ul>\n\n<p>Issues regarding the code can be reported in the project&#39;s <a href=\"https://github.com/MIT-LCP/cvsim\">github repository</a>.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2007-03-16",
    "citation": "T Heldt, R Mukkamala, GB Moody, and RG Mark. CVSim: An Open-Source Cardiovascular Simulator for Teaching and Research. Open Pacing, Electrophysiol & Ther J 3:45-54 (2010).",
    "citation_url": "https://physionet.org/physiotools/cvsim/45TOPETJ.pdf",
    "contact_name": "Thomas Heldt",
    "contact_affiliations": "Massachusetts Institute of Technology",
    "contact_email": "thomas@mit.edu"
  }
},
{
  "model": "project.legacyproject",
  "pk": 145,
  "fields": {
    "title": "A Cardiovascular Simulator for Research",
    "slug": "rcvsim",
    "abstract": "<p>We introduce here the Research CardioVascular SIMulator (<em>RCVSIM</em>) software in order to complement research with the experimental data sets provided by PhysioBank. The human cardiovascular model upon which <em>RCVSIM</em> is based includes three major components. The first component is a lumped parameter model of the pulsatile heart and circulation. The second component is a short-term regulatory system model which includes an arterial baroreflex system, a cardiopulmonary baroreflex system, and a direct neural coupling mechanism between respiration and heart rate.</p>",
    "full_description": "<h3>Software Description</h3>\n\n<p>Computational modeling and simulation studies can facilitate the advancement of cardiovascular research by complementing experimental studies. Through computational studies, the researcher may formulate hypotheses which may be subsequently tested through experimental studies or the researcher may develop and evaluate inverse modeling algorithms for determining important cardiovascular parameters from experimental data. Experimental studies, in turn, permit the researcher to construct more accurate computational models thereby improving the researcher&#39;s understanding of the cardiovascular system and ability to devise new experimental hypotheses and inverse modeling algorithms.</p>\n\n<p>We introduce here the Research CardioVascular SIMulator (<em>RCVSIM</em>) software in order to complement research with the experimental data sets provided by PhysioBank. The human cardiovascular model upon which <em>RCVSIM</em> is based includes three major components. The first component is a lumped parameter model of the pulsatile heart and circulation. The second component is a short-term regulatory system model which includes an arterial baroreflex system, a cardiopulmonary baroreflex system, and a direct neural coupling mechanism between respiration and heart rate. The final component is a model of resting physiologic perturbations which includes respiration, autoregulation of local vascular beds (exogenous disturbance to systemic arterial resistance), and higher brain center activity impinging on the autonomic nervous system (<em>1/f</em> exogenous disturbance to heart rate). The model is capable of generating reasonable human pulsatile hemodynamic waveforms, cardiac function and venous return curves, and beat-to-beat hemodynamic variability. <em>RCVSIM</em> has been previously employed in cardiovascular research by its author for the development and evaluation of system identification methods aimed at the dynamical characterization of autonomic regulatory mechanisms.</p>\n\n<p>The data simulated by <em>RCVSIM</em> is written in a format which is identical to the experimental data sets of PhysioBank. As such, the open-source data analysis software provided by PhysioToolkit may be readily applied to the simulated data as well. The data generated by <em>RCVSIM</em> may be viewed as they are being calculated or any time after they have been calculated with the WAVE display system (provided by PhysioToolkit) and Gnuplot. The <em>RCVSIM</em> software is open-source and heavily commented so that it can be extended and modified by the cardiovascular research community. The <em>RCVSIM</em> software includes pre-compiled Linux binaries which may be executed at the Linux or MATLAB prompts. It should also be possible to compile the source code to create binaries that may be executed on the other platforms that support WAVE (e.g., Solaris, SunOS). (Note that MATLAB and its compiler (version 1.2) is required for compiling the source code.)</p>\n\n<p>Arterial pressure (Pa) and volume (Qa) waveforms simulated by <em>RCVSIM</em> during nominal conditions and following a 50% step decrease in arterial compliance (Ca). Note how Pa transiently increases at the time of the Ca step decrease in order to preclude an instantaneous change to Qa.</p>\n\n<p>This directory includes <em>RCVSIM</em> sources, documentation, and Linux binaries; it may also be downloaded as a <a href=\"https://physionet.org/physiotools/rcvsim.tar.gz\">gzip-compressed tar archive</a>, The <em>RCVSIM User&#39;s Manual and Software Guide</em> is available in <a href=\"https://physionet.org/physiotools/rcvsim/doc/manual/manual.html\">HTML</a>, <a href=\"https://physionet.org/physiotools/rcvsim/doc/manual.pdf\">PDF</a>, <a href=\"https://physionet.org/physiotools/rcvsim/doc/manual.ps\">PostScript</a>, and <a href=\"https://physionet.org/physiotools/rcvsim/doc/manual.tex\">LaTeX</a> source formats.</p>\n\n<p>&nbsp;</p>\n\n<h3>Reference</h3>\n\n<ol>\n\t<li>Mukkamala R, Cohen RJ. <a href=\"http://ajpheart.physiology.org/content/281/6/H2714.abstract?ijkey=5eab3310757b830285c8aee5fe4650199c453a3c&amp;keytype2=tf_ipsecsha\">A forward model-based validation of cardiovascular system identification.</a> <em>Am J Physiol: Heart Circ Physiol</em> 2001; <strong>281</strong>(6):H2714-H2730.</li>\n\t<li>Mukkamala R, Toska K, Cohen RJ. <a href=\"http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=PubMed&amp;list_uids=12433656&amp;dopt=Abstract\">Noninvasive identification of the total peripheral resistance baroreflex.</a> <em>Am J Physiol: Heart Circ Physiol</em> 2003; <strong>284</strong>(3):H947-H959.</li>\n</ol>\n\n<p>&nbsp;</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2001-09-19",
    "citation": "",
    "citation_url": "",
    "contact_name": "PhysioNet Support",
    "contact_affiliations": "MIT",
    "contact_email": "webmaster@physionet.org"
  }
},
{
  "model": "project.legacyproject",
  "pk": 146,
  "fields": {
    "title": "AFVP - A Realistic Ventricular Rhythm Model During AF",
    "slug": "afvp",
    "abstract": "<p>AFVP generates a synthesized beat-to-beat interval sequence of ventricular excitations with a realistic structure observed during AF.</p>",
    "full_description": "<h3>Software Description</h3>\n\n<p>AFVP generates a synthesized beat-to-beat interval sequence of ventricular excitations with a realistic structure observed during AF. The AV junction (AVJ) is treated as a lumped structure characterized by refractoriness and automaticity. Bombarded by random AF impulses, the AVJ can also be invaded by the VP-induced retrograde wave. The model includes bi-directional conduction delays in the AVJ and ventricle. Both refractory period and conduction delay of the AVJ are dependent upon its recovery time. The electrotonic modulation by blocked impulses is also considered in the model. With proper parameter settings, the model can account for most principal statistical properties of the RR intervals during AF.</p>\n\n<p>&nbsp;</p>\n\n<h3>Contributors</h3>\n\n<p>AFVP was contributed to PhysioNet by <a href=\"mailto:jie.lian@biotronik.com?subject=afvp.c\">Jie Lian</a>, Dirk M&uuml;ssig, and Volker Lang, all from Micro Systems Engineering, Inc., a subsidiary of Biotronik GmbH. The code is freely available under the <a href=\"http://www.gnu.org/licenses/gpl.txt\">GNU GPL</a> (General Public License), and can be downloaded as a single gzip-compressed tar archive, <a href=\"https://physionet.org/physiotools/afvp/afvp.tar.gz\">afvp.tar.gz</a>, or as <a href=\"https://physionet.org/physiotools/afvp/afvp/\">individual files</a>.</p>\n\n<p>&nbsp;</p>\n\n<h3>References</h3>\n\n<p>The routines used by AFVP are described in</p>\n\n<div>\n<p>Lian J., M&uuml;ssig D., Lang V. <a href=\"http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?isnumber=34714&amp;arnumber=1658145&amp;count=38&amp;index=5\">Computer Modeling of Ventricular Rhythm During Atrial Fibrillation and Ventricular Pacing</a> [external link, subscription required] <em>IEEE Transactions on Biomedical Engineering</em> <strong>53</strong>(8): 1512-1520; 2006.</p>\n\n<p>Lian, J., Clifford, G.D., Muessig, D. and Lang, V., <a href=\"http://www.biomedical-engineering-online.com/content/6/1/9\">Open source model for generating RR intervals in atrial fibrillation and beyond</a>. <em>BioMedical Engineering OnLine</em> <strong>6</strong>:9, doi:10.1186/1475-925X-6-9; 2007.</p>\n\n<p>Of related interest is the <a href=\"https://physionet.org/physiotools/afvp/challenge/2002/generators/\">set of RR interval generators</a> entered in the <a href=\"https://physionet.org/physiotools/afvp/challenge/2002/\">PhysioNet/Computers in Cardiology Challenge 2002</a>. These C-code algorithms were attempts to address the questions: <em>Can you construct a simulation of the RR interval time series spanning a full 24 hours with sufficient verisimilitude to be taken as real? Can you classify a mixed set of real and simulated RR interval time series?</em></p>\n\n<p>&nbsp;</p>\n</div>\n\n<p>&nbsp;</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2007-08-09",
    "citation": "",
    "citation_url": "",
    "contact_name": "Jie Lian",
    "contact_affiliations": "Micro Systems Engineering",
    "contact_email": "jie.lian@biotronik.com"
  }
},
{
  "model": "project.legacyproject",
  "pk": 147,
  "fields": {
    "title": "ECGSYN - A realistic ECG waveform generator",
    "slug": "ecgsyn",
    "abstract": "<p>ECGSYN generates a synthesized ECG signal with user-settable mean heart rate, number of beats, sampling frequency, waveform morphology (P, Q, R, S, and T timing, amplitude,and duration), standard deviation of the RR interval, and LF/HF ratio (a measure of the relative contributions of the low and high frequency components of the RR time series to total heart rate variability).</p>",
    "full_description": "<h3>Software Description</h3>\n\n<p>ECGSYN generates a synthesized ECG signal with user-settable mean heart rate, number of beats, sampling frequency, waveform morphology (P, Q, R, S, and T timing, amplitude,and duration), standard deviation of the RR interval, and LF/HF ratio (a measure of the relative contributions of the low and high frequency components of the RR time series to total heart rate variability). Using a model based on three coupled ordinary differential equations, ECGSYN reproduces many of the features of the human ECG, including beat-to-beat variation in morphology and timing, respiratory sinus arrhythmia, QT dependence on heart rate, and R-peak amplitude modulation. The output of ECGSYN may be employed to assess biomedical signal processing techniques which are used to compute clinical statistics from the ECG.</p>\n\n<p>ECGSYN was contributed to PhysioNet by <a href=\"mailto:mcsharry@robots.ox.ac.uk?subject=ecgsyn.m\">Patrick McSharry</a> from the Department of Engineering Science, University of Oxford, and by <a href=\"mailto:gari@mit.edu?subject=ecgsyn.m\">Gari Clifford</a> of the Laboratory for Computational Physiology at MIT. Three implementations are available:</p>\n\n<ul>\n\t<li>A version for Matlab and Octave (<a href=\"https://physionet.org/physiotools/ecgsyn/Matlab/\">sources</a>)</li>\n\t<li>A version in C (<a href=\"https://physionet.org/physiotools/ecgsyn/C/\">sources</a>; ready-to-run binaries for <a href=\"https://physionet.org/physiotools/ecgsyn/C/linux/\">GNU/Linux</a>, <a href=\"https://physionet.org/physiotools/ecgsyn/C/solaris/\">Solaris</a>, and <a href=\"https://physionet.org/physiotools/ecgsyn/C/windows/\">MS-Windows</a> are also available)</li>\n\t<li>A Java applet by <a href=\"mailto:mauricio.villarroel@estudiantes.ucb.edu.bo\">Mauricio Villarroel</a> of the Universidad Cat&oacute;lica Boliviana (click <a href=\"https://physionet.org/physiotools/ecgsyn/Java/ecgsyn-java.html\">here</a> to run the applet in your web browser; the <a href=\"https://physionet.org/physiotools/ecgsyn/Java/\">Java sources</a> are also available)</li>\n</ul>\n\n<p>All three forms of the code are freely available under the <a href=\"http://www.gnu.org/licenses/gpl.txt\">GNU GPL</a> (General Public License), and can be downloaded as a single gzip-compressed tar archive, <a href=\"https://physionet.org/physiotools/ecgsyn/ecgsyn.tar.gz\">ecgsyn.tar.gz</a>.</p>\n\n<p>The algorithms used by ECGSYN are described in</p>\n\n<div>\n<p>McSharry PE, Clifford GD, Tarassenko L, Smith L. <a href=\"https://physionet.org/physiotools/ecgsyn/paper/\">A dynamical model for generating synthetic electrocardiogram signals.</a> <em>IEEE Transactions on Biomedical Engineering</em> <strong>50</strong>(3): 289-294; March 2003.</p>\n</div>\n\n<p>Current implementations of ECGSYN allow the user to modify the morphology of the P-QRS-T cycle, which was not a feature of the original ECGSYN described in the paper. The angle of each attractor (P, Q, R, S and T) around the limit cycle is set by <strong>ti</strong> (initially, [-70 -15 0 15 100]*pi/180). Their positions above or below the z=0 plane are set by <strong>bi</strong> and the widths of the waveform components are given by <strong>ai</strong>. Since <strong>ti</strong>=0 defines the placement of the R-peak, the ordering of each element of <strong>ti</strong>, <strong>ai</strong> and <strong>bi</strong> is [P Q R S T]. The <strong>bi</strong> and the <strong>ti</strong> are stretched by the square root of the reciprocal mean RR interval, as suggested by Bazett&#39;s (empirical) formula relating the QT interval to the heart rate. This transformation does not cancel out the reduction of the inter-attractor angular distance that arises &#39;naturally&#39; from augmented heart rates in this model.</p>\n\n<p>Of related interest is <a href=\"https://physionet.org/physiotools/matlab/ECGwaveGen/\">ECGwaveGen</a>, a Matlab/Octave application that generates (non-realistic) ECG-like test waveforms with well-defined characteristics as specified in ANSI/AAMI EC13:1992 (American National Standard: Cardiac Monitors, Heart Rate Meters, and Alarms).</p>\n\n<p>&nbsp;</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2003-12-03",
    "citation": "",
    "citation_url": "",
    "contact_name": "Patrick McSharry",
    "contact_affiliations": "Department of Engineering Science, University of Oxford",
    "contact_email": "mcsharry@robots.ox.ac.uk"
  }
},
{
  "model": "project.legacyproject",
  "pk": 148,
  "fields": {
    "title": "ECG waveform generator for Matlab/Octave",
    "slug": "ecgwavegen",
    "abstract": "<p>ECGwaveGen generates a synthesized ECG signal with user-settable heart rate, signal duration, sampling frequency, QRS amplitude and duration, and T-wave amplitude; it uses QRSpulse to create premature beats followed by compensatory pauses.</p>",
    "full_description": "<h3>Software Description</h3>\n\n<p>The files <a href=\"https://physionet.org/physiotools/matlab/ECGwaveGen/ECGwaveGen.m\">ECGwaveGen.m</a> and <a href=\"https://physionet.org/physiotools/matlab/ECGwaveGen/QRSpulse.m\">QRSpulse.m</a> were contributed to PhysioNet by <a href=\"mailto:fharriott@stellate.com?subject=ECGwaveGen.m\">Floyd Harriott</a> of Stellate Systems. ECGwaveGen generates a synthesized ECG signal with user-settable heart rate, signal duration, sampling frequency, QRS amplitude and duration, and T-wave amplitude; it uses QRSpulse to create premature beats followed by compensatory pauses. The algorithm is based in part on Ruha A and Nissila S, &quot;A real-time microprocessor QRS detector system with a 1-ms timing accuracy for the measurement of ambulatory HRV&quot;, IEEE Trans Biomed Eng <strong>44</strong>(3):159-167 (1997), in which the authors describe an artificial ECG signal based on the standard test waveforms specified in ANSI/AAMI EC13:1992 (American National Standard: Cardiac Monitors, Heart Rate Meters, and Alarms), available from <a href=\"http://www.aami.org/\">AAMI</a>. (Please note that the synthesized ECG is not intended to be highly realistic; the primary application is for testing the fidelity of analog signal-processing components of cardiac monitors and similar instruments, using an ECG-like signal with well-defined characteristics.)</p>\n\n<p>EC13 also specifies the use of a specific set of <a href=\"https://physionet.org/physiobank/database/aami-ec13/\">non-synthesized waveforms</a>, available in PhysioBank.</p>\n\n<p>Potential users of ECGwaveGen may also wish to consider <a href=\"https://physionet.org/physiotools/ecgsyn/\">ECGSYN</a>, which generates realistic ECG signals and provides a somewhat different set of capabilities.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2002-11-23",
    "citation": "",
    "citation_url": "",
    "contact_name": "Floyd Harriott",
    "contact_affiliations": "Stellate Systems",
    "contact_email": "fharriott@stellate.com"
  }
},
{
  "model": "project.legacyproject",
  "pk": 149,
  "fields": {
    "title": "FECGSYN Toolbox",
    "slug": "fecgsyn",
    "abstract": "<p>The <em>FECGSYN</em> toolbox is a reference open-source platform for NI-FECG research, product of a collaboration between the Department of Engineering Science, University of Oxford (DES-OX), the Institute of Biomedical Engineering, TU Dresden (IBMT-TUD) and the Biomedical Engineering Faculty at the Technion Israel Institute of Technology (BME-IIT).</p>",
    "full_description": "<h3>Introduction</h3>\n\n<p>The <em>FECGSYN</em> toolbox is a reference open-source platform for NI-FECG research, product of a collaboration between the Department of Engineering Science, University of Oxford (DES-OX), the Institute of Biomedical Engineering, TU Dresden (IBMT-TUD) and the Biomedical Engineering Faculty at the Technion Israel Institute of Technology (BME-IIT). The authors are <a href=\"mailto:joachim.behar@eng.ox.ac.uk?subject=[PhysioNet -FECGSYN toolbox]\"> Joachim Behar</a> (DES-OX,BME-IIT), <a href=\"mailto:fernando.andreotti@mailbox.tu-dresden.de?subject=[PhysioNet- FECGSYN toolbox]\"> Fernando Andreotti</a> (IBMT-TUD), <a href=\"mailto:julien.oster@eng.ox.ac.uk?subject=[PhysioNet- FECGSYN toolbox]\"> Julien Oster</a> (DES-OX), <a href=\"mailto:sebastian.zaunseder@tu-dresden.de?subject=[PhysioNet- FECGSYN toolbox]\"> Sebastian Zaunseder</a> (IBMT-TUD) and <a href=\"mailto:gari@alum.mit.edu?subject=[PhysioNet - FECGSYNtoolbox]\"> Gari D. Clifford (DES-OX)</a>. For further information please <a href=\"http://fernandoandreotti.github.io/fecgsyn/\"> visit the toolbox&rsquo;s website</a>.</p>\n\n<p><strong>The authors invite researchers contribute new algorithms or databases to this toolbox.</strong> Please refer to the <a href=\"http://fernandoandreotti.github.io/fecgsyn/pages/documentation.html\">documentation</a> and information about how to <a href=\"http://fernandoandreotti.github.io/fecgsyn/pages/contribute.html\">contribute</a>!</p>\n\n<p>&nbsp;</p>\n\n<h3>Features</h3>\n\n<ul>\n\t<li>Realistic modelling of adult and foetal ECGs</li>\n\t<li>Several NI-FECG <a href=\"http://fernandoandreotti.github.io/fecgsyn/pages/documentation.html#Extraction\" title=\"Extract docu\">extraction methods</a> available</li>\n\t<li><a href=\"http://fernandoandreotti.github.io/fecgsyn/pages/documentation.html#Benchmark\" title=\"Benchmark docs\">Benchmarking algorithms</a> for NI-FECG QRS detection and extraction of morphological features</li>\n\t<li>Large freely available database of simulated NI-FECG signals &mdash; see <a href=\"http://physionet.org/physiobank/database/fecgsyndb/\" title=\"FECGSYNDB\">FECGSYN-DB</a></li>\n\t<li>Numerous <a href=\"http://fernandoandreotti.github.io/fecgsyn/pages/examples.html\" title=\"Examples\">examples</a> of how to use the toolbox</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<h3>How to download</h3>\n\n<ul>\n\t<li>The latest stable version of the source code for MATLAB and Octave is available at <a href=\"https://github.com/fernandoandreotti/fecgsyn/archive/master.zip\" title=\"The latest stable version of the source code for MATLAB and Octave\">github.com/fernandoandreotti/fecgsyn/archive/master.zip</a>.</li>\n\t<li>For developers, a <a href=\"https://github.com/fernandoandreotti/fecgsyn\">Github repository</a> with the current issues is also available. A log of the changes made to each version is available <a href=\"http://fernandoandreotti.github.io/fecgsyn/pages/changelog.html\" title=\"A log of the changes made to each version\">here</a>.</li>\n</ul>\n\n<p>All the code is freely available under the <a href=\"http://www.gnu.org/licenses/gpl.txt\">GNU GPL</a> (General Public License).</p>\n\n<h3>Referencing this work</h3>\n\n<div>\n<p>When using <em>FECGSYN</em>, please reference at least one of the following articles:</p>\n\n<div>Behar J., Andreotti F., Zaunseder S., Li Q., Oster J. and Clifford G D., <a href=\"http://iopscience.iop.org/0967-3334/35/8/1537/article\">An ECG model for simulating maternal-foetal activity mixtures on abdominal ECG recordings.</a> <em>Physiol Meas</em> <strong>35</strong>, pp.1537-50, 2014.</div>\n\n<p>and/or</p>\n\n<div>Andreotti F., Behar J., Zaunseder S.,Oster J. and Clifford G D., <a href=\"http://iopscience.iop.org/article/10.1088/0967-3334/37/5/627\">An Open-Source Framework for Stress-Testing Non-Invasive Foetal ECG Extraction Algorithms.</a> <em>Physiol Meas</em> <strong>5</strong>, pp. 627-648, 2016.</div>\n\n<div>&nbsp;</div>\n</div>\n\n<h3>Contribute</h3>\n\n<p><em>FECGSYN</em> is updated often. Fellow researchers and collaborators are welcome to contribute with their own code. Please refer to information about <a href=\"http://fernandoandreotti.github.io/fecgsyn/pages/contribute.html\">how to contribute</a>, and to the <em>FECGSYN</em> <a href=\"https://github.com/fernandoandreotti/fecgsyn\">GitHub repository</a>.</p>\n\n<p>&nbsp;</p>\n\n<p>History</p>\n\n<p><em>FECGSYN</em> is built upon the work from <a href=\"http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=1186732\">McSharry et al.</a> and <a href=\"http://asp.eurasipjournals.com/content/pdf/1687-6180-2007-043407.pdf\">Sameni et al.</a>. The original code from McSharry et al. is available in MATLAB and in C on PhysioNet (<a href=\"http://www.physionet.org/physiotools/ecgsyn/\">ECGSYN</a>). The code developed by Sameni et al. is part of the OSET toolbox, also available online in MATLAB (<a href=\"http://oset.ir/\">OSET</a>). The <em>FECGSYN</em> was further used in creating the <a href=\"https://physionet.org/physiobank/database/fecgsyndb/\">FECGSYN Database</a>.</p>\n\n<p>References:</p>\n\n<ul>\n\t<li>McSharry, P. E., &amp; Clifford, G. D. (2003). <a href=\"http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=1186732\">A Dynamical Model for Generating Synthetic Electrocardiogram Signals</a>, <em>IEEE Trans. Biomed. Eng.</em>, 50(3):289&ndash;294; March 2003.</li>\n\t<li>Sameni, R., Clifford, G. D., Jutten, C., Shamsollahi, M. B. (2007). <a href=\"http://doi.org/10.1155/2007/43407\">Multichannel ECG and Noise Modeling: Application to Maternal and Fetal ECG Signals</a>. <em>EURASIP J Adv Signal Process</em>, 2007(1), 043407.</li>\n</ul>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2014-11-04",
    "citation": "Behar J., Andreotti F., Zaunseder S., Li Q., Oster J. and Clifford G D., An ECG model for simulating maternal-foetal activity mixtures on abdominal ECG recordings. Physiol Meas 35, pp.1537-50, 2014.",
    "citation_url": "http://iopscience.iop.org/0967-3334/35/8/1537/article",
    "contact_name": "Joachim Behar",
    "contact_affiliations": "University of Oxford",
    "contact_email": "joachim.behar@oxfordalumni.org"
  }
},
{
  "model": "project.legacyproject",
  "pk": 150,
  "fields": {
    "title": "Gradient Algorithm",
    "slug": "gradient-algorithm",
    "abstract": "<p>In finding an optimal stimulus waveform for inducing switches in neuronal states, analytical techniques from optimal control theory are often found to be difficult to use or extremely time intensive. Here, we present the code for a gradient-based algorithm approach that has been used to find energetically optimal stimulus waveforms to trigger an action potential in the Hodgkin-Huxley model as well as initiating and repressing repetitive firing in the FitzHugh-Nagumo models. These two models serve just as examples and the code can be easily adapted to any other system.</p>",
    "full_description": "<h3>Abstract</h3>\n\n<p>In finding an optimal stimulus waveform for inducing switches in neuronal states, analytical techniques from optimal control theory are often found to be difficult to use or extremely time intensive. Here, we present the code for a gradient-based algorithm approach that has been used to find energetically optimal stimulus waveforms to trigger an action potential in the Hodgkin-Huxley model as well as initiating and repressing repetitive firing in the FitzHugh-Nagumo models. These two models serve just as examples and the code can be easily adapted to any other system.</p>\n\n<p>&nbsp;</p>\n\n<h3>Project description</h3>\n\n<p>This directory contains code and documentation for three applications of a stochastically-seeded gradient algorithm as described in the paper included. The gradient algorithm is used to solve optimization problems given a set of constraints and an optimization metric. We have applied the algorithm to three different neuronal applications:</p>\n\n<ol>\n\t<li>Triggering an action potential in the Hodgkin-Huxley model (an empirically validated ionic model of neuronal excitability)</li>\n\t<li>Initiating repetitive firing in the FitzHugh-Nagumo model (an abstract model applied to a wide range of biological systems that exhibit an oscillatory state and a quiescent state), and</li>\n\t<li>Suppressing repetitive firing in the FitzHugh-Nagumo model</li>\n</ol>\n\n<p>We demonstrate in our study that this algorithm enables automated exploration of a wide solution space with stochastic seeding that allows us to find multiple locally optimal solutions. Furthermore, this algorithm is robust enough that no a priori knowledge of the optimal stimulus is necessary.</p>\n\n<p>The code provided here are preset to run for these three applications, but they can be used as training tools to apply the gradient algorithm to any other application so desired.</p>\n\n<p>&nbsp;</p>\n\n<h3>Directory Contents</h3>\n\n<dl>\n\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/Gradient-Algorithm.pdf\">Gradient Algorithm.pdf</a></dt>\n\t<dd>The paper which describes the work that we have done.</dd>\n\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/Hodgkin-Huxley/\">Hodgkin-Huxley/</a></dt>\n\t<dd>\n\t<dl>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/Hodgkin-Huxley/gradAlg.m\">gradAlg.m</a></dt>\n\t\t<dd>This is the main program to run.</dd>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/Hodgkin-Huxley/hh.m\">hh.m</a></dt>\n\t\t<dd>Function describe the Hodgkin-Huxley equations</dd>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/Hodgkin-Huxley/pInfluence.m\">pInfluence.m</a></dt>\n\t\t<dd>Function describing the p influence equations</dd>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/Hodgkin-Huxley/RInfluence.m\">RInfluence.m</a></dt>\n\t\t<dd>Function describing the R influence equations</dd>\n\t</dl>\n\t</dd>\n\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Initiating-Repetitive-Firing/\">FitzHugh-Nagumo/Initiating Repetitive Firing/</a></dt>\n\t<dd>\n\t<dl>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Initiating-Repetitive-Firing/fhn.m\">fhn.m</a></dt>\n\t\t<dd>Function describing the FitzHugh-Nagumo equations</dd>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Initiating-Repetitive-Firing/gradAlg.m\">gradAlg.m</a></dt>\n\t\t<dd>This is the gradient algorithm for a single run with a given initial and terminal condition.</dd>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Initiating-Repetitive-Firing/optInOut.m\">optInOut.m</a></dt>\n\t\t<dd>This is the main program to run used to process every single run between the quiescent state and every single point on the repetitive firing limit cycle.</dd>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Initiating-Repetitive-Firing/outX.mat\">outX.mat</a></dt>\n\t\t<dd>A set of 68 points defining the repetitive firing limit cycle.</dd>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Initiating-Repetitive-Firing/pInfluence.m\">pInfluence.m</a></dt>\n\t\t<dd>Function describing the p influence equations</dd>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Initiating-Repetitive-Firing/RInfluence.m\">RInfluence.m</a></dt>\n\t\t<dd>Function describing the R influence equations</dd>\n\t</dl>\n\t</dd>\n\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Suppressing-Repetitive-Firing/\">FitzHugh-Nagumo/Suppressing Repetitive Firing/</a></dt>\n\t<dd>\n\t<dl>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Suppressing-Repetitive-Firing/fhn.m\">fhn.m</a></dt>\n\t\t<dd>Function describing the FitzHugh-Nagumo equations</dd>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Suppressing-Repetitive-Firing/gradAlg.m\">gradAlg.m</a></dt>\n\t\t<dd>This is the gradient algorithm for a single run with a given initial and terminal condition.</dd>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Suppressing-Repetitive-Firing/optOutIn.m\">optOutIn.m</a></dt>\n\t\t<dd>This is the main program to run used to process every single run between the quiescent state and every single point on the repetitive firing limit cycle.</dd>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Suppressing-Repetitive-Firing/outX.mat\">outX.mat</a></dt>\n\t\t<dd>A set of 68 points defining the repetitive firing limit cycle.</dd>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Suppressing-Repetitive-Firing/pInfluence.m\">pInfluence.m</a></dt>\n\t\t<dd>Function describing the p influence equations</dd>\n\t\t<dt><a href=\"https://physionet.org/physiotools/gradient-algorithm/FitzHugh-Nagumo/Suppressing-Repetitive-Firing/RInfluence.m\">RInfluence.m</a></dt>\n\t\t<dd>Function describing the R influence equations</dd>\n\t</dl>\n\t</dd>\n</dl>\n\n<p>&nbsp;</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2015-08-21",
    "citation": "Chang J, Paydarfar D (2014) Switching neuronal state: optimal stimuli revealed using a stochastically-seeded gradient algorithm. J Comput Neurosci.",
    "citation_url": "http://www.ncbi.nlm.nih.gov/pubmed/25145955",
    "contact_name": "PhysioNet Support",
    "contact_affiliations": "MIT",
    "contact_email": "webmaster@physionet.org"
  }
},
{
  "model": "project.legacyproject",
  "pk": 151,
  "fields": {
    "title": "The EVAL_ST Tool",
    "slug": "eval-st",
    "abstract": "<p>The EVAL_ST tool is an open source tool to evaluate and compare performance and robustness of ST episode detection algorithms. The tool supports all standard and other relevant performance measures, aggregate gross and average statistics, and bootstrap statistical procedure to predict real-world clinical performance. The tool (written in C) is compilable an a wide variety of platforms and contains an additional graphic user interface module (LessTif/Motif environment) for use on the LINUX/UNIX operating systems.</p>",
    "full_description": "<p>Software Description</p>\n\n<p>The EVAL_ST tool is an open source tool to evaluate and compare performance and robustness of ST episode detection algorithms. The tool supports all standard and other relevant performance measures, aggregate gross and average statistics, and bootstrap statistical procedure to predict real-world clinical performance. The tool (written in C) is compilable an a wide variety of platforms and contains an additional graphic user interface module (LessTif/Motif environment) for use on the LINUX/UNIX operating systems.</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2004-09-17",
    "citation": "",
    "citation_url": "",
    "contact_name": "PhysioNet Support",
    "contact_affiliations": "MIT",
    "contact_email": "webmaster@physionet.org"
  }
},
{
  "model": "project.legacyproject",
  "pk": 152,
  "fields": {
    "title": "Random Search Toolbox",
    "slug": "random-search",
    "abstract": "<p>A major issue with many signal processing and machine learning algorithms is the lack of optimisation methods for determining the numerous hyper-parameters associated with the model as well as the knowledge of which hyper-parameters are relevant. These parameters are usually tunned by trial and error (manual search) or by grid search. In 2012 <a href=\"http://dl.acm.org/citation.cfm?id=2188395\">Bergstra et al.</a> showed empirically that random search was performing similar or better than grid search while reducing the computational cost substantially.</p>",
    "full_description": "<h3>Introduction RS-toolbox</h3>\n\n<p>A major issue with many signal processing and machine learning algorithms is the lack of optimisation methods for determining the numerous hyper-parameters associated with the model as well as the knowledge of which hyper-parameters are relevant. These parameters are usually tunned by trial and error (manual search) or by grid search. In 2012 <a href=\"http://dl.acm.org/citation.cfm?id=2188395\">Bergstra et al.</a> showed empirically that random search was performing similar or better than grid search while reducing the computational cost substantially.</p>\n\n<p>RS-toolbox is contributed by <a href=\"mailto:joachim.behar@eng.ox.ac.uk?subject=rstoolbox.m\">Joachim Behar</a>, <a href=\"mailto:alistair.johnson@eng.ox.ac.uk?subject=rstoolbox.m\">Alistair Johnson</a>, <a href=\"mailto:julien.oster@eng.ox.ac.uk?subject=rstoolbox.m\">Julien Oster</a> and <a href=\"mailto:gari@mit.edu?subject=rstoolbox.m\">Gari D Clifford</a>. All authors are part of the institute of biomedical engineering at the University of Oxford. The source code is available in MATLAB <a href=\"https://physionet.org/physiotools/random-search/rs-toolbox.zip\">rs-toolbox.zip</a></p>\n\n<p>The RS-toolbox code provides functions for creating Efficiency Curves (EC) and Automatic Relevance Determination (ARD) plots. The functions can easily be run to reproduce the plots of this <a href=\"https://physionet.org/physiotools/random-search/BeharJohnsonOsterClifford_RS_example.pdf\">example</a>. Start by simply launching the ESN_EfficiencyCurve.m script in order to produce a similar EC as Figure 1 of the <a href=\"https://physionet.org/physiotools/random-search/BeharJohnsonOsterClifford_RS_example.pdf\">example</a> and then launch ESN_IntrinsicDimensionality.m in order to produce an ARD plot as Figure 2 of the <a href=\"https://physionet.org/physiotools/random-search/BeharJohnsonOsterClifford_RS_example.pdf\">example</a>. This code together with its example of parameters search for training an Echo State Neural network should provide the users with a quick insight on how to use random search and produce EC and ARD from the searched parameters.</p>\n\n<p>General remark on Random Search and ARD: be aware that the interval that you sample your variables from will have an impact on the ARD plots and the conclusions you will make from it!</p>",
    "doi": "",
    "version": "1.0.0",
    "resource_type": 1,
    "publish_date": "2014-11-04",
    "citation": "Behar Joachim, Jonhson Alistair, Clifford Gari D., Oster Julien. \"A Comparison of Single Channel Foetal ECG Extraction Methods\". Annals of Biomedical Engineering. 42(6), 1340-53. 2014.",
    "citation_url": "http://link.springer.com/article/10.1007/s10439-014-0993-9#page-1",
    "contact_name": "Joachim Behar",
    "contact_affiliations": "University of Oxford",
    "contact_email": "joachim.behar@oxfordalumni.org"
  }
}
]
