[uwsgi]

# Django-related settings
# the base directory
chdir = /code/physionet-django

# Port
http-socket = :8000

# Django's wsgi file
module = physionet.wsgi

# Only use one version of python
single-interpreter = true

# process-related settings
# master
master = true

# maximum number of worker processes
processes = 10

# the socket
socket = /uwsgi.sock
# ... with appropriate permissions - may be needed
chmod = 664

# clear environment on exit
vacuum = true

uid = root
gid = root

# Log all 5++ erros
log-5xx = true

# Only valid uWSGI options are tolerated.
strict = true

# If the app is not found kill the proccess
need-app = true

# Kill all processes on termination
die-on-term = true

# Enable thunder lock to prevent the thundering herd problem.
thunder-lock = true

# Shut down worker processes when we exit.
no-orphans = true

# Worker recycling can prevent issues that become apparent over time such
# as memory leaks or unintentional states. In some circumstances, however,
# it can improve performance because newer processes have fresh memory space.
max-requests = 1000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 2048                 ; Restart workers after this much resident memory
worker-reload-mercy = 60             ; How long to wait before forcefully killing workers

# This configuration will restart a worker process after any of the following events:
# - 1000 requests have been handled
# - The worker has allocated 2 GB of memory
# - 1 hour has passed

# Logging plugin
plugin = /code/docker/uwsgi-json-logging-plugin/escape_json_plugin.so

# Enable Django JSON Logging
env = JSON_LOGGING=ON

# UWSGI Logs
logger = default stdio
logger = applogger stdio
log-route = applogger {
log-route = default ^((?!\{).)*$
log-encoder = json:default {"time":${unix}, "source":"uwsgi", "message":"${msg}"}
log-encoder = format:applogger ${msg}
log-encoder = nl

# Request Logs
logger-req = stdio
log-format = "address":"%(addr)", "worker_id":%(wid), "host":"%(json_host)", "method":"%(method)", "uri":"%(json_uri)", "protocol":"%(proto)", "resp_size":%(size), "req_body_size":%(cl), "resp_status":%(status), "resp_time":%(secs)
log-req-encoder = format {"time":${unix}, "source":"uwsgi-req", ${msg}}
log-req-encoder = nl
