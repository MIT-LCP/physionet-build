# Installs PhysioNet dependencies on Debian 10 and runs tests on the `dev` branch and PRs against the `dev` branch.

name: Debian / Build and Test

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    container: debian:10
    env:
      DJANGO_SETTINGS_MODULE: physionet.settings.settings
      TEST_GCS_INTEGRATION: false
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        pip3: ['poetry', 'requirements.txt']
    steps:

      - name: Update packages
        run: apt-get update --yes

      - name: Install and configure needed software
        run: |
          apt-get install sudo git python3-dev python3-pip build-essential libpq-dev postgresql zip wget flake8 python-virtualenv --yes

      # Note: run checkout after updating git
      - name: Checkout physionet-build repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create .env file
        run: |
          ln -sT .env.example .env

      - name: Install repo dependencies
        # add virtual env path to github_path so each run: process will see it
        run: |
          export VIRTUAL_ENV=/env3
          virtualenv -p python3.7 $VIRTUAL_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          source $VIRTUAL_ENV/bin/activate
          if [ ${{matrix.pip3}} = 'poetry' ]; then
            pip3 install poetry
            poetry config virtualenvs.create false
            poetry install --no-root
          else
            pip3 install -r requirements.txt
          fi

      - name: Install libseccomp-dev for syscall filtering
        run: apt-get install libseccomp-dev

      - name: Setup postgres
        run: |
          service postgresql start
          sudo -u postgres psql -c "create user physionet with superuser password 'password';" -U postgres
          sudo -u postgres psql -c "create database physionet;" -U postgres
      
      - name: Install and setup GCS fake server
        run: |
          wget https://github.com/fsouza/fake-gcs-server/releases/download/v1.30.1/fake-gcs-server_1.30.1_Linux_amd64.tar.gz
          tar -xf fake-gcs-server_1.30.1_Linux_amd64.tar.gz
          ./fake-gcs-server -scheme http -port 4443 -external-url http://0.0.0.0:4443 -backend memory &

      - name: Install and setup wfdb
        run: |
          wget https://github.com/bemoody/wfdb/archive/10.6.2.tar.gz -O wfdb.tar.gz
          tar -xf wfdb.tar.gz
          (cd wfdb-* && ./configure --without-netfiles && make -C lib install && make -C data install)

      - name: Run linker for newly installed software
        run: ldconfig

      - name: Install and setup lightwave
        run: |
          wget https://github.com/bemoody/lightwave/archive/bfe908a7f53434df61fd2444bf8c235e3e6226fc.tar.gz -O lightwave.tar.gz
          tar -xf lightwave.tar.gz
          (cd lightwave-* && make CGIDIR=/usr/local/bin sandboxed-server)

      - name: Setup and test physionet, check amount of code tested
        run: |
          cd physionet-django
          python manage.py makemigrations --dry-run --no-input --check
          python manage.py resetdb
          python manage.py loaddemo
          coverage run --source='.' manage.py test --verbosity=3 --keepdb
          coverage report -m

      - name: Run code style check on changed files relative to PR base branch
        if: github.event_name == 'pull_request'
        run: |
          git rev-parse --verify ${{ github.event.pull_request.base.sha }}
          git diff -U0 ${{ github.event.pull_request.base.sha }} HEAD | \
              flake8 --diff

      - name: Run code style check relative to local dev branch
        if: github.event_name != 'pull_request'
        run: |
          git fetch origin dev
          git diff -U0 origin/dev HEAD | flake8 --diff
